desc: Ze Scanner Chorus
version: 1.06
author: T.Rochebois
changelog: Initial release

/* Author: T.Rochebois  06/2016
*/
slider1:sl_lfoA=7<0.2500,20,0.0001>LFO A Rate 
slider2:sl_lfoB=3.25<0.0625,10,0.0001>LFO B Rate
slider3:sl_lfoM=0.2<0,1,0.0001>LFO A B Mix
slider4:sl_depth=8<1,17,0.0001>Modulation depth

slider6:sl_F1=2500<200,5000,0.0001>F1
slider7:sl_F0=1000<200,5000,0.0001>F0
slider8:sl_R=0.7<0.3,0.99,0.0001>R
slider9:sl_lfoF=0.125<0.0,20,0.0001>LFO F Rate 

slider11:sl_fb=0<0,0.5>Feedback
slider12:sl_fbType=0<0,4,1{Short,Medium,Long,Delay,Long Delay}>Fb Type
slider13:sl_fbLp=1<0,1>Feedback LP

slider15:sl_type=1<0,3,1{Vibrato,Chorus,Double chorus,Triple chorus}>Type

slider17:sl_selfPM=0<0,1>Self PM (dist)
@init
// ___________________________________________________________________
function TABLE(m) local(tmp) ( tmp = ad; ad += m; tmp;);
function VRB_init(len)(
  this.t = TABLE(len);
  this.len = len|0;
  memset(this.t,0,this.len);
  this.g = 0.7;
  this.r = this.w = 0|0;
  this.dcy =this.y = 0;
);
function VRB_set(d) instance(r w len)(
  d = (d*srate)|0;
  r = (w - d + 4 * len) % len;
);
function VRB_proc(x)
instance(u g v t r w y len)(
  u = g * (x - v);
  y = u + v;
  v = t[r];     
  t[w] = u + x; 
  r += 1; w += 1;
  r -= len * (r >= len); w -= len * (w >= len);
  y;
);
// ___________________________________________________________________
function LFO_proc() instance(p dp t y)(
  p+=dp; p-=2*(p>=2); // ramp     [0 2[
  t=p+(p>1)*(2-2*p);  // triangle [0 1]
  y=t*t*(3-2*t);  // sort of sine [0 1]
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function SC_init()( 
  this.y = TABLE(21);
  this.vrb1.VRB_init(2*srate);
  this.vrb2.VRB_init(2*srate);
  this.vrb3.VRB_init(2*srate);
  this.vrb4.VRB_init(2*srate);
  this.vrb5.VRB_init(2*srate);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function SC_proc(x a1 a2) local(tmp)instance( y
v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18 v19 
w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 
y0 y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15 y16 y17 y18 y19)(
  tmp=a1*v0 +a2*(x  +w0);  y[ 0]=y0 =w0 +tmp; w0 =v0;  v0 = x -tmp; 
  tmp=a1*v1 +a2*(y0 +w1);  y[ 1]=y1 =w1 +tmp; w1 =v1;  v1 =y0 -tmp; 
  tmp=a1*v2 +a2*(y1 +w2);  y[ 2]=y2 =w2 +tmp; w2 =v2;  v2 =y1 -tmp; 
  tmp=a1*v3 +a2*(y2 +w3);  y[ 3]=y3 =w3 +tmp; w3 =v3;  v3 =y2 -tmp; 
  tmp=a1*v4 +a2*(y3 +w4);  y[ 4]=y4 =w4 +tmp; w4 =v4;  v4 =y3 -tmp; 
  tmp=a1*v5 +a2*(y4 +w5);  y[ 5]=y5 =w5 +tmp; w5 =v5;  v5 =y4 -tmp; 
  tmp=a1*v6 +a2*(y5 +w6);  y[ 6]=y6 =w6 +tmp; w6 =v6;  v6 =y5 -tmp; 
  tmp=a1*v7 +a2*(y6 +w7);  y[ 7]=y7 =w7 +tmp; w7 =v7;  v7 =y6 -tmp; 
  tmp=a1*v8 +a2*(y7 +w8);  y[ 8]=y8 =w8 +tmp; w8 =v8;  v8 =y7 -tmp; 
  tmp=a1*v9 +a2*(y8 +w9);  y[ 9]=y9 =w9 +tmp; w9 =v9;  v9 =y8 -tmp; 
  tmp=a1*v10+a2*(y9 +w10); y[10]=y10=w10+tmp; w10=v10; v10=y9 -tmp; 
  tmp=a1*v11+a2*(y10+w11); y[11]=y11=w11+tmp; w11=v11; v11=y10-tmp; 
  tmp=a1*v12+a2*(y11+w12); y[12]=y12=w12+tmp; w12=v12; v12=y11-tmp; 
  tmp=a1*v13+a2*(y12+w13); y[13]=y13=w13+tmp; w13=v13; v13=y12-tmp; 
  tmp=a1*v14+a2*(y13+w14); y[14]=y14=w14+tmp; w14=v14; v14=y13-tmp; 
  tmp=a1*v15+a2*(y14+w15); y[15]=y15=w15+tmp; w15=v15; v15=y14-tmp; 
  tmp=a1*v16+a2*(y15+w16); y[16]=y16=w16+tmp; w16=v16; v16=y15-tmp; 
  tmp=a1*v17+a2*(y16+w17); y[17]=y17=w17+tmp; w17=v17; v17=y16-tmp; 
  tmp=a1*v18+a2*(y17+w18); y[18]=y18=w18+tmp; w18=v18; v18=y17-tmp; 
  tmp=a1*v19+a2*(y18+w19); y[19]=y19=w19+tmp; w19=v19; v19=y18-tmp; 
  y[20] = y[19];
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function SC_read(x) local(x0) instance(y)(
  x0 = x|0;
  y[x0] + (x - x0) * (y[x0 + 1] - y[x0]);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function SC_chorus(x) 
  instance(k lfoA1 lfoA2 lfoA3 lfoB1 lfoB2 lfoB3 lfoF
         c  m1  m2  m3 
        dc dm1 dm2 dm3 fg0 fg1 fg2 fg3
        out fout dcout lpFb)
  local(nc nm1 nm2 nm3 fb spm)(
  k <= 0 ? (
    k = 8;
    lfoA1.LFO_proc();  lfoB1.LFO_proc();
    nm1 = lfoA1.y + sl_lfoM * (lfoB1.y - lfoA1.y);
    lfoA2.LFO_proc();  lfoB2.LFO_proc();
    nm2 = lfoA2.y + sl_lfoM * (lfoB2.y - lfoA2.y);
    lfoA3.LFO_proc();  lfoB3.LFO_proc();
    nm3 = lfoA3.y + sl_lfoM * (lfoB3.y - lfoA3.y) - 0.5;
    lfoF.LFO_proc();
    // c ~ -2 * cos(2*$pi*f/srate)
    nc = fcoef * (sl_F0 + lfoF.y * (sl_F1 - sl_F0));
    nc = nc*nc;
    nc = -2 + nc*(1 + nc*((-1/12) + nc*((1/360) + nc*((-1/20160)))));
    nc *= sl_R;
    nm1 =  2.9   + sl_depth * nm1;
    nm2 = 19.001 - sl_depth * nm2;
    nm3 =  9.501 + sl_depth * nm3;
    dm1 = 0.125 * (nm1-m1);
    dm2 = 0.125 * (nm2-m2);
    dm3 = 0.125 * (nm3-m3);
    dc  = 0.125 * (nc - c);
  );
  k -= 1;
  c += dc; m1 += dm1; m2 += dm2; m3 += dm3;
  fg0 += 0.0625 * (g0 - fg0); fg1 += 0.0625 * (g1 - fg1);
  fg2 += 0.0625 * (g2 - fg2); fg3 += 0.0625 * (g3 - fg3);
  // self phase modulation (distorsion)
  spm = 9+8*min(1,max(-1,x));
  // feedback thru reverberators
  dcout += dcCoef *(out - dcout);
  fout += lpFb * (out - dcout - fout);
  x = _sl_fb * x + sl_fb * this.vrb1.VRB_proc(this.vrb2.VRB_proc(
    this.vrb3.VRB_proc(this.vrb4.VRB_proc(this.vrb5.VRB_proc(fout)))));
  this.SC_proc(x, c, R2);
  out = fg0 * x 
  + fg1 * this.SC_read(m1 + sl_selfPM * (spm - m1))  // start of line 
  + fg2 * this.SC_read(m2 + sl_selfPM * (spm - m2))  // end of line    
  + fg3 * this.SC_read(m3 + sl_selfPM * (spm - m3)); // middle of line    
);
// ___________________________________________________________________
_srate = 1 / srate;
fcoef = 2*$pi*_srate;
dcCoef = 0.05*44100*_srate;
lfoCoef1 = 16 * _srate;
lfoCoef2 = 1.13 * lfoCoef1;
lfoCoef3 = 0.90 * lfoCoef1;
scL.SC_init();
scR.SC_init();
// ___________________________________________________________________
@slider
scL.lpFb = scR.lpFb = (60000*sl_fbLp*sl_fbLp*_srate)/(1+60000*sl_fbLp*sl_fbLp*_srate);
sl_depth = min(19, max(1, sl_depth));
scL.lfoA1.dp = scR.lfoA1.dp = lfoCoef1 * sl_lfoA;
scL.lfoA2.dp = scR.lfoA2.dp = lfoCoef2 * sl_lfoA;
scL.lfoA3.dp = scR.lfoA3.dp = lfoCoef3 * sl_lfoA;
scL.lfoB1.dp = scR.lfoB1.dp = lfoCoef1 * sl_lfoB;
scL.lfoB2.dp = scR.lfoB2.dp = lfoCoef2 * sl_lfoB;
scL.lfoB3.dp = scR.lfoB3.dp = lfoCoef3 * sl_lfoB;
scL.lfoF.dp = scR.lfoF.dp = lfoCoef1 * sl_lfoF;
// quadrature LFOs for stereo
scR.lfoA1.p = scL.lfoA1.p + 0.5;
scL.lfoA2.p = scR.lfoA2.p + 0.5;
scL.lfoA3.p = scR.lfoA3.p + 0.5;
scL.lfoB1.p = scR.lfoB1.p + 0.5;
scR.lfoB2.p = scL.lfoB2.p + 0.5;
scR.lfoB3.p = scL.lfoB3.p + 0.5;
scL.lfoF.p = scR.lfoF.p + 0.5;

  sl_type == 0 ? (g0 = 0.00; g1 = 0.00; g2 = 0.00; g3 = 1.00; )  // vib
: sl_type == 1 ? (g0 = 0.70; g1 = 0.00; g2 = 0.00; g3 = 0.70; )  // chor
: sl_type == 2 ? (g0 = 0.40; g1 = 0.57; g2 = 0.00; g3 = 0.71; )  // dblechor
: sl_type == 3 ? (g0 = 0.48; g1 = 0.40; g2 = 0.50; g3 = 0.60; ); // triplechor
R2 = sl_R * sl_R;
_sl_fb = 1 - sl_fb;
sl_fbType == 0 ? (
  scL.vrb1.VRB_set(0.025); scL.vrb2.VRB_set(0.023); scL.vrb3.VRB_set(0.015); scL.vrb4.VRB_set(0.012); scL.vrb5.VRB_set(0.0095);
  scR.vrb1.VRB_set(0.026); scR.vrb2.VRB_set(0.022); scR.vrb3.VRB_set(0.017); scR.vrb4.VRB_set(0.011); scR.vrb5.VRB_set(0.0095);
):sl_fbType == 1 ? (
  scL.vrb1.VRB_set(0.069); scL.vrb2.VRB_set(0.032); scL.vrb3.VRB_set(0.015); scL.vrb4.VRB_set(0.007); scL.vrb5.VRB_set(0.004);
  scR.vrb1.VRB_set(0.067); scR.vrb2.VRB_set(0.034); scR.vrb3.VRB_set(0.015); scR.vrb4.VRB_set(0.009); scR.vrb5.VRB_set(0.003);
):sl_fbType == 2 ? (
  scL.vrb1.VRB_set(0.120); scL.vrb2.VRB_set(0.054); scL.vrb3.VRB_set(0.021); scL.vrb4.VRB_set(0.009); scL.vrb5.VRB_set(0.007);
  scR.vrb1.VRB_set(0.123); scR.vrb2.VRB_set(0.051); scR.vrb3.VRB_set(0.023); scR.vrb4.VRB_set(0.008); scR.vrb5.VRB_set(0.005);
):sl_fbType == 3 ? (
  scL.vrb1.VRB_set(0.550); scL.vrb2.VRB_set(0.244); scL.vrb3.VRB_set(0.011); scL.vrb4.VRB_set(0.005); scL.vrb5.VRB_set(0.004);
  scR.vrb1.VRB_set(0.450); scR.vrb2.VRB_set(0.304); scR.vrb3.VRB_set(0.013); scR.vrb4.VRB_set(0.009); scR.vrb5.VRB_set(0.002);
):sl_fbType == 4 ? (
  scL.vrb1.VRB_set(1.000); scL.vrb2.VRB_set(0.125); scL.vrb3.VRB_set(0.125*0.125); scL.vrb4.VRB_set(0.007); scL.vrb5.VRB_set(0.003);
  scR.vrb1.VRB_set(0.750); scR.vrb2.VRB_set(0.125); scR.vrb3.VRB_set(0.125*0.125); scR.vrb4.VRB_set(0.006); scR.vrb5.VRB_set(0.005);
);
// ___________________________________________________________________
@sample

// Gate
m = max(max(abs(spl0), abs(spl1)),  max(abs(y0), abs(y1)));
m >= e ? e = m : e *= 0.99;
e > 0.0001 ? (
  c = min(1, 1000*(e-0.0001));
  y0 = scL.SC_chorus(spl0);
  y1 = scR.SC_chorus(spl1);
  spl0 = c * y0;
  spl1 = c * y1;
) : y0 = y1 = e = 0;

/*
spl0 = scL.SC_chorus(spl0);
spl1 = scR.SC_chorus(spl1);
*/
