desc: Ze Big Chorus
author: T.Rochebois
version: 1.0
changelog: Initial release
provides: TiaR_Ze Big Chorus/*

/*
  Smashed.Transistors at gmail.com                   T.Rochebois 2015
______________________________________________________________________
                                                             FEATURES

  - 12 algorithms with series/parallel/nested allpass delay lines
  - seven allpass delay lines x 2 (stereo)
  - full stereo (independent signal paths)
  - separate parameters for 
    - static delays (ie "reverb")
    - modulated delays (ie "chorus")
    -> mean values and dispersion coefficients (how much the actual
       values for the 7 allpass delay lines are spread around the mean
       values).
  - 28 pseudo random lfos with global control of
    - mean lfo rates for delay and feedback/forward (g coefs)
    - rate "dispersion" for both lfo rates
    some lfo pairs are in quadrature for a smoother sound.
  - input gain
  - dry/wet with constant energy

______________________________________________________________________
                                                           ALGORITHMS
  
  Ze Big Chorus uses 7 allpass delay lines (A, B, C, D, E, F and G
  in the code) that can be put in series, in parallel or even
  "nested".
  
  In most algorithms the units are chained in their natural order.
  
  Units A, B, C, D are rather used as chorus units.
  Units E, F, G are rather used as reverb units.
  
  the dispersion sliders strenghthen these functionality.
  
  LFOs for units A and B are in quadrature.
  LFOs for units C and D are in quadrature.
  LFOs for units E, F and G are free running.
  
  Left and right LFOs are totally independant (with slightly
  different rates).
  
  
  Here are the 11 algorithms
  
                                        A B C D E F G  delay lines
                                                  [ ]  allpass "nest"
                                                   +   addition
                                                   -   substraction
                                                   ~   chaining
                                                  +~   add and chain

   Algorithm name                                           Structure
                                                   
1  Series                                [A]~[B]~[C]~[D]~[E]~[F]~[G]

2  Series of nested I                 [[A]C] ~ [[B]D] ~ [[E]F] ~ [G]

3  Series of nested II                   [[A][C]E] ~ [[B][D]F] ~ [G]
  
    Provide smooth sounding "ensemble effect". If the sound attack is
    too smooth, use shorter delays.

 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    

4  Parallel                        [A]-[B]+[C]+[D]+[E]+[F]-[G]
  
    Set Gmin and Gmax to 0 for the classical chorus sound.
    G = 0.7 will provide a smoother sound.

 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _        

5  Parallel series               ([A]+[B]-[C]-[D]+[E]) ~ [F] ~ [G]

6  Series in Parallel           [A]~[C] + [B]~[D] - [E]~[F] + [G*]

7  Nested in parallel I             [[A]C] + [[B]D*] - [[E]F] + [G]

8  Nested in parallel II             ([[A]C] - [[B]D]) ~ [[E][F] G]

    Hybrid effects between chorus and ensemble

 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _        

9  All nested                                 [[A][B][C][D][E][F] G]

10 Series and nest                      [A] ~ [B] ~ [[C][D][E][F] G] 

    The allpass delay lines are nested : they are in a feedback loop.
    So, the chorus/ensemble elements are part of a reverb algo.
    
    These algos are good for modulated reverb effects. Slow
    modulations and nesting avoid the metallic sound found on many 
    "Schroeder / Moorer" reverbs.

 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    
    
11 Series of combs         [A] +~ ([B]+[C]) ~ ([D]+[E]) ~ ([F]+[G])
12 Catacombs                       [A]+~[B]+~[C]+~[D]+~[E]+~[F]+~[G]

______________________________________________________________________
                                                              SLIDERS
  - Delay sliders
  
    - Static Delay (ms)
      Sets the mean static delay ("reverb" delay)
      
    - Modulated Depth (%)
      Sets the mean modulation depth ("chorus" delay)
  
    - Dispersion sliders
       Units ABC are sort of "chorus" units (as they often are the
       first in the algorithm chain). While units EFG are rather
       "reverb" units as the are at the end of the processing.
       
       The dispersion sliders accentuate the differences between the
       units.

      - Static Delay dispersion
        How much does the actual values of each element will be spread
        around the mean static delays.
    
      - Modulated Delay dispersion
        How much does the actual values of each element will be spread
        around the mean modulated delays
  
    - Modulation Rate
      The mean modulation rate for the delay lfos
  
    - Rate dispersion
      Much like the other dispersion sliders.
      ABC rates will go faster (more "chorus like") whike EFG will go
      slower (more "reverb like").

  - Feedback/feedforward sliders
      
    - G Max and G Min
      Set the range of variation of the feedback/feedforward coefficient.
      0.0 0.5  -> delay lines
      0.5 0.7  -> allpass
      0.7 0.95 -> reverb

    - G modulation sliders
      These settings are secondary, but they add smooth randomness
      to the effect.
      
      - Modulation Rate
      - Rate dispersion
        much like the delay sliders, these set the mean modulation rate
        and how much the rates are spread.
  
  - Distortion
    Experimental. Adds distortion by audio modulation of G feedback
    coefs
        
  - Gain (db)
    The output is amplified and smooth clipped to [-1, 1].
    All the algorithms are normalized, so that you won't have to
    use this slider too often.
  - Dry/Wet
    Power conservative
______________________________________________________________________
      
*/
/*
 Copyright 2015, Thierry Rochebois
 All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:
  Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

  The name of Thierry Rochebois may not be used to endorse or promote
  products derived from this software without specific prior written
  permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
slider1:sl_algo=4<0,11,1{Series,Series of nested I,Series of nested II,Parallel,Parallel series,Series in Parallel,Nested in parallel I,Nested in parallel II,All nested,Series and nest,Series of combs,Catacombs}>Algo

slider3:sl_delay=15<0,100,0.00001>Static Delay (ms)
slider4:sl_dmod=90<0,100,0.00001>Modulated Depth (%)

slider6:sl_dispStatic=1<0,1,0.00001>Static Delay disp.
slider7:sl_dispMod=1<0,1,0.00001>Modulated Delay disp.

slider9:sl_rate=0.05<0,1,0.00001>Modulation Rate
slider10:sl_ratedisp=0.1<0,1,0.00001>Rate disp.

slider12:sl_grate=0.1<0,6,0.00001>G ---- Mod Rate
slider13:sl_gratedisp=1<0,1,0.00001>Rate disp.
slider14:sl_g1=0.65<-0.95,0.95,0.00001>G Max
slider15:sl_g0=0.75<-0.95,0.95,0.00001>G Min

slider18:sl_gain=0<-48,12>Gain (db)
slider19:sl_drywet=1<0,1>Dry/Wet

import TiaR_ZeBigChorus_03.jsfx-inc
import TiaR_SCP_01.jsfx-inc
// ___________________________________________________________________
@init
function copyT(lfo*)( this.t = lfo.t; this.dt = lfo.dt; );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
KRATE = 32;
_KRATE = 1 / KRATE;

l.scp.SCP_init();
l.scp.r = 0; l.scp.g = 0.5; l.scp.b = 1.0;
r.scp.SCP_init();
r.scp.r = 1; r.scp.g = 0.5; r.scp.b = 0.0;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
asl_algo=-1;
asl_delay = 15;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                 Four lfo tables containing pseudo random waveforms
//____________________________________________________________________
lfo1.RLFO_init2(16,0.0,  0.5,1,  0.05,38,  0.02,71,  0.01,113);
lfo2.RLFO_init2(16,1.5,  0.5,1,  0.05,39,  0.02,70,  0.01,110);

lfo3.RLFO_init2(16,0.0,  0.5,2,  0.05,36,  0.02,73,  0.01,123);
lfo4.RLFO_init2(16,1.5,  0.5,2,  0.05,37,  0.02,72,  0.01,113);

l.A.d.copyT(lfo1);l.B.d.copyT(lfo2);
r.A.d.copyT(lfo3);r.B.d.copyT(lfo4);

l.C.d.copyT(lfo3);l.D.d.copyT(lfo4);
r.C.d.copyT(lfo1);r.D.d.copyT(lfo2);

l.E.d.copyT(lfo1);
r.E.d.copyT(lfo3);

l.F.d.copyT(lfo2);
r.F.d.copyT(lfo4);

l.G.d.copyT(lfo3);
r.G.d.copyT(lfo1);

l.A.g.copyT(lfo4);l.B.g.copyT(lfo3);l.C.g.copyT(lfo2);l.D.g.copyT(lfo1);
l.E.g.copyT(lfo2);l.F.g.copyT(lfo3);l.G.g.copyT(lfo4);

r.A.g.copyT(lfo2);r.B.g.copyT(lfo1);r.C.g.copyT(lfo4);r.D.g.copyT(lfo3);
r.E.g.copyT(lfo4);r.F.g.copyT(lfo1);r.G.g.copyT(lfo2);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                      inits the delay/allpass lines
l.NAP_init();
r.NAP_init();
// ___________________________________________________________________
@slider
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                            helpers
function setRate(disp)(
  this.RLFO_setRate(sl_rate * (1 + sl_ratedisp * disp));
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
function setDelay(dispStatic dispMod)local(st md)(
  st = (sl_delay * 0.001 * srate) * (1 + sl_dispStatic * dispStatic);
  
  md =  0.5 * st 
  * sl_dmod * 0.01                       // [0 1]
     * (1 + sl_dispMod    * dispMod   ); // [0 2] -> 0 2*0.5*st
  
  this.d.v0 = st - md; // [0 st]
  this.d.v1mv0 = 2 * md; // [st 2*st]
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
function setGRate(disp)(
  this.RLFO_setRate(sl_grate * (1 + sl_gratedisp * disp));
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//                                        multiplies g.v0 and g.v1mv0
function mulG(m)(  this.g.v0 *= m;  this.g.v1mv0 *= m;);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                    7 x 2 lfos for delay modulation
l.A.d.setRate( 0.60);  r.A.d.setRate( 0.63); // rather used
l.B.d.setRate( 0.60);  r.B.d.setRate( 0.63); // for chorus

l.C.d.setRate( 0.17);  r.C.d.setRate( 0.09);
l.D.d.setRate( 0.17);  r.D.d.setRate( 0.09); 
                                             // these units are
l.E.d.setRate(-0.33);  r.E.d.setRate(-0.35); // rather used
l.F.d.setRate(-0.52);  r.F.d.setRate(-0.49); // for rev 
l.G.d.setRate(-0.75);  r.G.d.setRate(-0.76); // => slowed modulation
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                             Min / Max delay with value dispersion
//          static   modulated          static   modulated
l.A.setDelay(-0.70, +0.33); r.A.setDelay(-0.75, +0.37); // rather used
l.B.setDelay(-0.50, +0.05); r.B.setDelay(-0.57,  0.05); // for chorus
l.C.setDelay(-0.33,  0.35); r.C.setDelay(-0.41,  0.30);

l.D.setDelay( 0.00,  0.00); r.D.setDelay( 0.00,  0.00); 
                                                        // rather used
l.E.setDelay( 0.30, -0.27); r.E.setDelay( 0.32, -0.29); // for rev 
l.F.setDelay( 0.63, -0.60); r.F.setDelay( 0.80, -0.40); // => small variable delay
l.G.setDelay( 0.98, -0.50); r.G.setDelay( 0.99, -0.60); //    big static delay
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                        7 x 2 lfos for g modulation
l.A.g.setGRate( 0.90);  r.A.g.setGRate( 0.85);
l.B.g.setGRate( 0.35);  r.B.g.setGRate( 0.47);
l.C.g.setGRate( 0.25);  r.C.g.setGRate( 0.17);

l.D.g.setGRate( 0.00);  r.D.g.setGRate( 0.00);

l.E.g.setGRate(-0.13);  r.E.g.setGRate(-0.17);
l.F.g.setGRate(-0.39);  r.F.g.setGRate(-0.33);
l.G.g.setGRate(-0.57);  r.G.g.setGRate(-0.63);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
l.A.g.v0 = r.A.g.v0 = l.B.g.v0 = r.B.g.v0 = l.C.g.v0 = r.C.g.v0
= l.D.g.v0 = r.D.g.v0 = l.E.g.v0 = r.E.g.v0 = l.F.g.v0
= r.F.g.v0 = l.G.g.v0 = r.G.g.v0 = sl_g0;

l.A.g.v1mv0 = r.A.g.v1mv0 = l.B.g.v1mv0 = r.B.g.v1mv0 = l.C.g.v1mv0 = r.C.g.v1mv0
= l.D.g.v1mv0 = r.D.g.v1mv0 = l.E.g.v1mv0 = r.E.g.v1mv0 = l.F.g.v1mv0
= r.F.g.v1mv0 = l.G.g.v1mv0 = r.G.g.v1mv0 = sl_g1 - sl_g0;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
gain =(2/3) *  (2 ^ (sl_gain / 6));

gWet = sqrt(sl_drywet);
gDry = sqrt(1 - sl_drywet);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                g depending of algo
// nested allpass needs lower g to avoid over reverberation
sl_algo === 1 ? ( 
   l.C.mulG(0.7); r.C.mulG(0.7);
   l.D.mulG(0.7); r.D.mulG(0.7);
   l.F.mulG(0.7); r.F.mulG(0.7);
  )
: sl_algo === 2 ? (
   l.E.mulG(0.7); r.E.mulG(0.7);
   l.F.mulG(0.7); r.F.mulG(0.7);
  )
: sl_algo === 6 ? (
   l.C.mulG(0.7); r.C.mulG(0.7);
   l.D.mulG(0.7); r.D.mulG(0.7);
   l.F.mulG(0.7); r.F.mulG(0.7);
  )
: sl_algo === 7 ? (
   l.C.mulG(0.7); r.C.mulG(0.7);
   l.D.mulG(0.7); r.D.mulG(0.7);
   l.G.mulG(0.7); r.G.mulG(0.7);
  )
: sl_algo === 8 ? (
   l.G.mulG(0.7); r.G.mulG(0.7);
  )
: sl_algo === 9 ? (
   l.G.mulG(0.7); r.G.mulG(0.7);
  )
: sl_algo === 10 ? (
   l.B.mulG(-1); r.B.mulG(-1);
   l.D.mulG(-1); r.D.mulG(-1);
   l.F.mulG(-1); r.F.mulG(-1);
  )
;
// ___________________________________________________________________
@block
l.scp.SCP_sProc(0, 0.01);
r.scp.SCP_sProc(0, 0.01);
// Avoids/Limits clicks when changing presets or algo
asl_algo !== sl_algo || abs(sl_delay - asl_delay) > 10 ? (
  r.NAP_clear();
  l.NAP_clear();
  asl_algo = sl_algo;
  coefSmooth = 1;
):(coefSmooth = coefOnePole(4););
asl_delay = sl_delay;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// phase lock of quadrature lfos  A/B  C/D
l.B.d.p = l.A.d.p;  r.B.d.p = r.A.d.p;
l.D.d.p = l.C.d.p;  r.D.d.p = r.C.d.p;
// todo: place sample code here to avoid algo selection overhead

// ___________________________________________________________________
@sample
  k += 1;
  k >= KRATE ? (
    l.NAP_kProc();
    r.NAP_kProc();
    k = 0;
  );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// gain on input -> affects algos with saturation or self XMod
spl0 *= gain;
spl1 *= gain;
in0 = spl0;
in1 = spl1;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  sl_algo ===  0 ? ( spl0 =  l.NAP_alg1(spl0); spl1 =  r.NAP_alg1(spl1); )
: sl_algo ===  1 ? ( spl0 =  l.NAP_alg2(spl0); spl1 =  r.NAP_alg2(spl1); )
: sl_algo ===  2 ? ( spl0 =  l.NAP_alg3(spl0); spl1 =  r.NAP_alg3(spl1); )
: sl_algo ===  3 ? ( spl0 =  l.NAP_alg4(spl0); spl1 =  r.NAP_alg4(spl1); )
: sl_algo ===  4 ? ( spl0 =  l.NAP_alg5(spl0); spl1 =  r.NAP_alg5(spl1); )
: sl_algo ===  5 ? ( spl0 =  l.NAP_alg6(spl0); spl1 =  r.NAP_alg6(spl1); )
: sl_algo ===  6 ? ( spl0 =  l.NAP_alg7(spl0); spl1 =  r.NAP_alg7(spl1); )
: sl_algo ===  7 ? ( spl0 =  l.NAP_alg8(spl0); spl1 =  r.NAP_alg8(spl1); )
: sl_algo ===  8 ? ( spl0 =  l.NAP_alg9(spl0); spl1 =  r.NAP_alg9(spl1); )
: sl_algo ===  9 ? ( spl0 = l.NAP_alg10(spl0); spl1 = r.NAP_alg10(spl1); )
: sl_algo === 10 ? ( spl0 = l.NAP_alg11(spl0); spl1 = r.NAP_alg11(spl1); )
: sl_algo === 11 ? ( spl0 = l.NAP_alg12(spl0); spl1 = r.NAP_alg12(spl1); )
;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
//                                            soft clipping on output
spl0 = gWet * softSat(spl0) + gDry * in0;
spl1 = gWet * softSat(spl1) + gDry * in1;
l.scp.SCP_aProc(in0,spl0);
r.scp.SCP_aProc(in1,spl1);
// ___________________________________________________________________
@gfx
// todo: input/output scope (sync on input)
l.scp.SCP_gProc(0, 0, gfx_w, gfx_h*0.5);
r.scp.SCP_gProc(0, gfx_h*0.5, gfx_w, gfx_h*0.5);
/*
function draw()
local(x)(
  x = 0;
  loop(gfx_w,
    gfx_line(x,     gfx_h * (1 -  this.t[x]              ), 
             x + 1, gfx_h * (1 - (this.t[x] + this.dt[x])), 1);
    x += 1;
  );
);
gfx_r = 0; gfx_g = 0.7; gfx_b = 0;
lfo1.draw();
gfx_r = 1; gfx_g = 0; gfx_b = 0;
lfo2.draw();
gfx_r = 0; gfx_g = 0; gfx_b = 1;
lfo3.draw();
gfx_r = 0.7; gfx_g = 0.7; gfx_b = 0;
lfo4.draw();
*/

