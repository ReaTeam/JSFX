desc:ds.gfxlib.jsfx-inc

@init

selknob_nslider = 0;
selknob_min = 0;
selknob_max = 0;
selknob_is_log = 0;

wheelknob_nslider = 0;
wheelknob_min = 0;
wheelknob_max = 0;
wheelknob_is_log = 0;

doubleclk_nslider = 0;

function deg2rad (deg) (deg * $pi / 180;);
RAD130 = deg2rad(130);

function set_color(color) (
  gfx_r = (color & 0xFF0000) / 0xFF0000;
  gfx_g = (color & 0x00FF00) / 0x00FF00;
  gfx_b = (color & 0x0000FF) / 0x0000FF;
);

function log_scale (value, max, min) (
    minP = min;
    maxP = max;

    minV = log(min);
    maxV = log(max);

    scale = (maxV - minV) / (maxP - minP);
    exp(minV + scale * (value - minP));
);

function inverse_log_scale (lg, max, min) (
    minP = min;
    maxP = max;

    minV = log(min);
    maxV = log(max);

    scale = (maxV - minV) / (maxP - minP);
    (log(lg) - minV) / scale + minP;
);

function mouse_in_rect (x, y, w ,h) (
  mouse.x >= x && mouse.x <= x + w && mouse.y >= y && mouse.y <= y + h;
);

function draw_knob(x, y, nslider, label, default, _min, _max, is_log, is_sym, val_label) (
  set_color(0x282D32);
  gfx_arc(x+20, y+20, 20, -RAD130, RAD130, 1);
  gfx_arc(x+20, y+20, 19.5, -RAD130, RAD130, 1);
  gfx_arc(x+20, y+20, 19, -RAD130, RAD130, 1);
  gfx_arc(x+20, y+20, 18.5, -RAD130, RAD130, 1);

  slider_val = slider(nslider);
  is_log ? (
    slider_val = inverse_log_scale(slider_val, _max, _min);
  );

  // linear map value from min/max to -130deg +130deg
  scale = (130 - -130) / (_max-_min);
  _offset = (-_min * (130 - -130)) / (_max - _min) + -130;
  slider_deg = slider_val * scale + _offset;
  slider_rad = deg2rad(slider_deg);

  gfx_circle(x+20, y+20, 15, 1, 1);
  set_color(0x5DBEE4);
  gfx_circle(x+20-sin(-slider_rad)*10, y+20-cos(-slider_rad)*10, 3, 1);

  gfx_arc(x+20, y+20, 20, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 19.5, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 19, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 18.5, is_sym ? 0 : -RAD130, slider_rad, 1);

  set_color(0xFFFFFF);
  gfx_x = x - 20;
  gfx_y = y + 20 * 2 + 5;
  selknob_nslider == nslider ? (
    gfx_drawstr(val_label, 1, x+20+20*2, y+100);
  ) : (
    gfx_drawstr(label, 1, x+20+20*2, y+100);
  );

  mouse_in_rect(x, y, 40, 40) ? (
    mouse.double_click ? (
      slider(nslider) = default;
      doubleclk_nslider = nslider;
    );
    mouse.left_click ? (
      selknob_nslider = nslider;
      selknob_min = _min;
      selknob_max = _max;
      selknob_is_log = is_log;
    );
    mouse.wheel ? (
      wheelknob_nslider = nslider;
      wheelknob_min = _min;
      wheelknob_max = _max;
      wheelknob_is_log = is_log;
    );
  );
);

function draw_button (x, y, w, label, toggled) (
  set_color(0x5DBEE4);
  gfx_rect(x, y - 2, w, 10 + 2);
  gfx_x = x; gfx_y = y;
  !toggled ? (
    set_color(0x141618);
    gfx_rect(x+1, y+1-2, w-2, 10);
  );
  set_color(toggled ? 0xFFFFFF : 0x5DBEE4);
  gfx_drawstr(label, 1, x+w, y+10);
);

function draw_grey_button (x, y, w, label) (
  set_color(0x666666);
  gfx_rect(x, y - 2, w, 10 + 2);
  gfx_x = x; gfx_y = y;
  set_color(0x141618);
  gfx_drawstr(label, 1, x+w, y+10);
);

function draw_pad_button (x, y, w, h, label, toggled, note_on) (
  note_on ? (
    set_color(0x333333);
    gfx_rect(x, y, w, h);
  );
  toggled ? (
    set_color(note_on ? 0x1ea9df : 0x5DBEE4);
    gfx_rect(x, y, w, h);
  );
  set_color(toggled ? 0xFFFFFF : 0x666666);
  gfx_x = x;
  gfx_y = y;
  gfx_drawstr(label, 1|4, x+w, y+h);
);

function gfx_draw_help () (
  set_color(0x000000);
  gfx_a = 0.9;
  gfx_rect(700/2-200, 315 / 2 - 100, 400, 110);
  gfx_x = 700/2-200+10;
  gfx_y = 315/2-100+10;
  gfx_a = 1;
  set_color(0xfffffff);
  gfx_drawstr("JSDRUMSYNTH\n\n\n\n- Double click to reset knobs\n\n- Ctrl + mouse for fine adjustments\n\n- Right click pads for copy paste\n\n- Copy paste works across multiple FX instances", 1);
);
