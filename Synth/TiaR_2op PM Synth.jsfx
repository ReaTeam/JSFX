desc: 2op PM Synth
version: 1.0
author: T.Rochebois
changelog: Initial release
provides: TiaR_2op PM Synth/*
link: http://forum.cockos.com/showthread.php?p=1385314&posted=1#post1385314

//PMX - 2op PM synth with crazy feedback  (x3 with detune for fatness)
//_____________________________________________________________________
slider1:<0,11,1{Mono,Mono 8ct,Mono 5th,Stereo,Stereo 8ct,Stereo 5th,All Mono,All Mono 8ct,All Mono 5th,All Stereo,All Stereo 8ct,All Stereo 5th}>Mix Type

slider3:0<0.001,10>--1 A
slider4:0.3<0.001,10>--1 D
slider5:0.5<0,1>--1 S
slider6:0.7<0.001,10>--1 R

slider8:0<0,1>--Fb Type{Saw,Sqr}

slider9:0<0,5>--Carrier Fb  CTL
slider10:0<0,1.5>--V1 -> Carrier Fb
slider11:0<0,1.5>--V0 -> Carrier Fb

slider13:0<0,5>--Detune  CTL
slider14:0<0,100>--V1 -> Detune
slider15:0<0,100>--V0 -> Detune

slider17:0<0,5>--Index CTL
slider18:0<0,20>--V1 -> Index
slider19:0<0,20>--V0 -> Index

slider21:2<0,10>--Ratio
slider22:0<-10,10>--modWheel -> Ratio

slider24:0<0,5>--Modulator Fb CTL
slider25:0<0,1.5>--V1 -> Mod Fb
slider26:0<0,1.5>--V0 -> Mod Fb

slider28:<0,1000>--Delay(ms)
slider29:<0,0.99>--Delay recycle
slider30:0<0,5>--Delayed Fb CTL
slider31:0<0,1.5>--V0 -> Delayed Fb 
slider32:0<0,1.5>--V1 -> Delayed Fb

slider34:0<0,2>--2 A
slider35:0.3<0,5>--2 D
slider36:0.5<0,1>--2 S
slider37:0.7<0,5>--2 R

slider39:8<0.25,32>--VLFO cycle(s)

slider41:0<0,5>--LFO Rate CTL
slider42:7<0,50>--V0 - LFO rate(Hz)
slider43:6<0,50>--V1 - LFO rate(Hz)

slider45:0<0,5>--Vibrato Depth
slider46:0<0,0.2>--V0 -> Vib Depth
slider47:0<0,0.2>--V1 -> Vib Depth

slider49:0<0,5>--Carrier Glide(s)
slider50:0<0,5>--Modulator Glide(s)

slider63:16<0,16,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,All}>Midi Channel

//_____________________________________________________________________
import TiaR_KBD.jsfx-inc
import TiaR_ADSR.jsfx-inc
import TiaR_PMX.jsfx-inc
import TiaR_HSL.jsfx-inc
import TiaR_LFO.jsfx-inc
import TiaR_PMXsliders.jsfx-inc
//_____________________________________________________________________
@init
function xFade(v0 v1 a) ( 
  v0 + a * (v1 - v0);
);
function interpSource(x) local(x0 a) (
  x >= 5 ? x = 4.99;
  x0 = floor(x);
  a = x - x0;
  xFade(tSources[x0], tSources[x0 + 1], a);
);//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                          Global init
ad = 0;     //base address for tables (increment it when allocating mem)
TUNING = 440.0;
KRATE = 16; // control every 16 samples
ONE_OVER_KRATE = 1.0 / KRATE;
k = KRATE; // control rate counter
//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                           Class init
HSL();
KBD();
PMX();
ADSR();
LFO();
dpMod = 1;
//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                         Objects init
osc1.PMX_init(60, 1, 0, 0, 0);
osc2.PMX_init(60, 1, 0, 0, 0);
osc3.PMX_init(60, 1, 0, 0, 0);

lfo.LFO_setF(6);
vlfo.LFO_setF(0.125);

PMX_initWidgets();
//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                       Control Source
// 0 ModWheel
// 1 Env (ADSR1 with expression and velocity)
// 2 LFO
// 3 VLFO
// 4 ADSR2
// 5 AfterTouch
tSources = ad; ad += 6;
//_____________________________________________________________________
@block
KBD_setChannel(slider63);
adsr1.ADSR_set(slider3,  slider4,  slider5,  slider6 );
adsr2.ADSR_set(slider34, slider35, slider36, slider37);
KBD_bProc();
PMX_slidersInBlock();

//_____________________________________________________________________
@slider
  slider1|=0;
  (slider1 % 3) === 0 ? (
    c1PitchOffset = 0;  c2PitchOffset = 0; c3PitchOffset = 0;
  ) : (slider1 % 3) === 1 ? (
    c1PitchOffset = 0;  c2PitchOffset = -12; c3PitchOffset = -12;
  ) : (
    c1PitchOffset = 7;  c2PitchOffset = 0; c3PitchOffset = 0;
  );
  stereo = (slider1/3) % 2;
  all = (slider1/6) % 2;

  PMX_HSL_setValues();

  PMX_copyASlider();

//_____________________________________________________________________
@sample
//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                         Control Rate
k >= KRATE ?
( k = 0;

  new_env = adsr1.ADSR_kProc(gate, trig);

  tSources[0] = modWheel;
  tSources[1] = new_env;
  tSources[2] = 0.5 + 0.5 * lfo.LFO_kProc();
  tSources[3] = 0.5 + 0.5 * vlfo.LFO_kProc();
  tsources[4] = adsr2.ADSR_kProc(gate, trig);
  tSources[5] = aftertouch;
  
  //                        V0         V1           Source
  modIndex  =        xFade(slider19, slider18, interpSource(slider17));
  detune    = 0.01 * xFade(slider15, slider14, interpSource(slider13));
  selfMod   =        xFade(slider26, slider25, interpSource(slider24));
  selfCar   =        xFade(slider11, slider10, interpSource(slider9));
  dFb       =        xFade(slider32, slider31, interpSource(slider30));
  lfo.LFO_setF(      xFade(slider43, slider42, interpSource(slider41)));
  vibDepth  =        xFade(slider47, slider46, interpSource(slider45));
  
  new_dpMod = 1 + lfo.sin * vibDepth;
  ddpMod = (new_dpMod - dpMod) * ONE_OVER_KRATE;

  ratio = slider21 + slider22 * modWheel;
  
  // attenuation en fonction du nb de sorties
  stereo ? new_env *= 0.5
  :        new_env *= 0.3333;
  all ?    new_env *= 0.5;
  
  denv = (new_env - env) * ONE_OVER_KRATE; 
  
  osc1.PMX_kProc(note + 12 * bend + c1PitchOffset,
                 ratio, 
                 modIndex, selfMod, selfCar, slider8, dFb);
  osc2.PMX_kProc(note + 12 * bend + detune + c2PitchOffset, 
                 ratio , 
                 modIndex, selfMod, selfCar, slider8, dFb);
  osc3.PMX_kProc(note + 12 * bend - detune + c3PitchOffset, 
                 ratio ,
                 modIndex, selfMod, selfCar, slider8, dFb);
  KBD_kProc();
);
k += 1;
//_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                           Audio Rate
env += denv; //linear interpolation of env
dpMod += ddpMod;

c1 = osc1.PMX_aProc(dpMod);
c2 = osc2.PMX_aProc(dpMod);
c3 = osc3.PMX_aProc(dpMod);

all ? (
  c1 += osc1.out1;
  c2 += osc2.out1; 
  c3 += osc3.out1;
);

stereo ? (
  spl0 += (c1 + c2) * env;
  spl1 += (c1 + c3) * env;
) : (
  out = (c1 + c2 + c3) * env;
  spl0 += out;
  spl1 += out;
);
//_____________________________________________________________________
@gfx 600 400

PMX_graphics();















