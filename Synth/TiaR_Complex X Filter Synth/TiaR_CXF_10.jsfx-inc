desc:Complex X Filter lib rev05
/*
 Copyright 2014, Thierry Rochebois
 All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:
  Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

  The name of Thierry Rochebois may not be used to endorse or promote
  products derived from this software without specific prior written
  permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
    - Four point controls (diamond angle)
      - Forward pitch modulation
      - FedBack pitch modulation
      - Forward res modulation
    - internal LPF on total pitch
    - complex input (should be analytic)
    - output normalisation
    
    rev03
      Delta tables CXF_tWD CXF_tSinPD CXF_tCosPD -> faster interpolation
      double diamond interpolator CXF_diamAngleInterp4x2
      corrected CXF_w limitation (128*16 instead of 128)
    rev05
      presets
*/
@init

//______________________________________________________________________
function CXF()
local(p p16 w ) (
  sr === 0 ? sr = srate;
  ad === 0 ? ad = 1;
  CXF_tW     = ad; ad += 128 * 16+1;  //pulsation (pitch*16)
  CXF_tSinP  = ad; ad += 128 * 16+1;
  CXF_tCosP  = ad; ad += 128 * 16+1;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
  //Delta tables (for faster interpolation)
  CXF_tWD    = ad; ad += 128 * 16+1;  //pulsation (pitch*16)
  CXF_tSinPD = ad; ad += 128 * 16+1;
  CXF_tCosPD = ad; ad += 128 * 16+1;
  p = 0;
  p16 = 0;
  loop(128*16+1,
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
    w = (2*$pi*440/sr) * 2 ^((p       -69)*(1/12));
    CXF_tW[p16]    =     w;
    CXF_tSinP[p16] = sin(w);
    CXF_tCosP[p16] = cos(w);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
    //Delta tables (for faster interpolation)
    w = (2*$pi*440/sr) * 2 ^((p+(1/16)-69)*(1/12));
    CXF_tWD[p16]    =     w  - CXF_tW[p16];
    CXF_tSinPD[p16] = sin(w) - CXF_tSinP[p16];
    CXF_tCosPD[p16] = cos(w) - CXF_tCosP[p16];
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _     
    p16 += 1;
    p += 1/16;    
  );

// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _     
  CXF_nbP = 16;
  CXF_tPf0 = ad;  ad += CXF_nbP;
  CXF_tPf1 = ad;  ad += CXF_nbP;
  CXF_tPf2 = ad;  ad += CXF_nbP;
  CXF_tPf3 = ad;  ad += CXF_nbP;
  
  CXF_tPb0 = ad;  ad += CXF_nbP;
  CXF_tPb1 = ad;  ad += CXF_nbP;
  CXF_tPb2 = ad;  ad += CXF_nbP;
  CXF_tPb3 = ad;  ad += CXF_nbP;
  CXF_tNoise = ad;  ad += CXF_nbP;
  
  CXF_tNoiseGen = ad; ad += 1024;
  p = 0;
  loop(1024,
    CXF_tNoiseGen[p] = rand(2)-1;
    p += 1;
  );
);
function CXF_rand() (
  CXF_randC1 += 1;
  CXF_randC1 %= 710;  
  CXF_randC2 += 2;
  CXF_randC2 %= 2023;  
  CXF_randC3 += 1;
  CXF_randC3 %= 5737;
  CXF_tNoiseGen[CXF_randC1] + CXF_tNoiseGen[CXF_randC2>>2] + CXF_tNoiseGen[CXF_randC3>>3];
);
//______________________________________________________________________
function CXF_defPreset(n pf0 pf1 pf2 pf3 pb0 pb1 pb2 pb3 noise) (
  CXF_tPf0[n] = 16 * pf0;  CXF_tPf1[n] = 16 * pf1;
  CXF_tPf2[n] = 16 * pf2;  CXF_tPf3[n] = 16 * pf3;
  
  CXF_tPb0[n] = 16 * pb0;  CXF_tPb1[n] = 16 * pb1;
  CXF_tPb2[n] = 16 * pb2;  CXF_tPb3[n] = 16 * pb3;
  
  CXF_tNoise[n] = 16 * noise;
);
//______________________________________________________________________

function CXF_defPresets() (
  CXF_defPreset( 0,  0,  0,  0,  0,      0,  0,  0,  0,  0); //zero
  CXF_defPreset( 1, -3, -5,  7,  0,     -4, -2,  24,-2,  0); //typical
  CXF_defPreset( 2,-15, 35,-15,-15,      0,  0,  0,  0,  0); //classic reso
  CXF_defPreset( 3, 27, 27, 27,-33,      0,  0,  0,  0,  0); //super reso
  CXF_defPreset( 4, 26,  0, 42,-40,      0,  0,  0,  0,  0); //multi reso

  CXF_defPreset( 5,  0,  0,  0,  0,     -6, -6, -6, 40,  0); //pulse reso
  CXF_defPreset( 6,  0,  0,  0,  0,     40, -6, 40, -6,  0); //sqr reso
  CXF_defPreset( 7,  0,  0,  0,  0,     30, 32,-28, 32,  0); //super plse
  
  CXF_defPreset( 8, 32, 32, 32, -6,     30,-35, 30,-35,  0); //dirty sqr
  CXF_defPreset( 9, 15,-20,-20, 11,     30,  1, 16,-40,  0); //sync lead
  CXF_defPreset(10,-25, 26, 22,-22,      9, 36,-28, 20,  0); //soft sync
  CXF_defPreset(11, 30,  3, 13, -9,    -20, 15,  0, 34,  1); //disto

  CXF_defPreset(12, 30,  3, 13, -9,    -30,  0,-48,  0, 15); //Noisy I
  CXF_defPreset(13,  0, 36,  5,  9,     24,-48,  0,-48, 18); //Noisy II

  CXF_defPreset(14, 18, 18, -8, 29,      0,-20, 15, 15, 30); //Noisy III
  CXF_defPreset(15, 17, 35, 21, 21,      0,  8,-26, 24, 40); //Noisy IV
);
//______________________________________________________________________
function CXF_preset(n) (
  this.pf0 = CXF_tPf0[n];  this.pf1 = CXF_tPf1[n];
  this.pf2 = CXF_tPf2[n];  this.pf3 = CXF_tPf3[n];

  this.pb0 = CXF_tPb0[n];  this.pb1 = CXF_tPb1[n];
  this.pb2 = CXF_tPb2[n];  this.pb3 = CXF_tPb3[n];
  
  this.noise = CXF_tNoise[n];
);
//______________________________________________________________________
function CXF_presetMorph(nA nB a) (
  this.pf0 = CXF_tPf0[nA] + a * (CXF_tPf0[nB] - CXF_tPf0[nA]);
  this.pf1 = CXF_tPf1[nA] + a * (CXF_tPf1[nB] - CXF_tPf1[nA]);
  this.pf2 = CXF_tPf2[nA] + a * (CXF_tPf2[nB] - CXF_tPf2[nA]);
  this.pf3 = CXF_tPf3[nA] + a * (CXF_tPf3[nB] - CXF_tPf3[nA]);

  this.pb0 = CXF_tPb0[nA] + a * (CXF_tPb0[nB] - CXF_tPb0[nA]);
  this.pb1 = CXF_tPb1[nA] + a * (CXF_tPb1[nB] - CXF_tPb1[nA]);
  this.pb2 = CXF_tPb2[nA] + a * (CXF_tPb2[nB] - CXF_tPb2[nA]);
  this.pb3 = CXF_tPb3[nA] + a * (CXF_tPb3[nB] - CXF_tPb3[nA]);
  this.noise = CXF_tNoise[nA]+ a * (CXF_tNoise[nB] - CXF_tNoise[nA]);
);

//______________________________________________________________________
// pitch * 16
function CXF_sinCos(v* p16 maxi) 
local (p0 a)(
  p16 = min(maxi,max(0,p16));
  p0 = p16|0;
  a = p16 - p0;
  v.i = CXF_tSinP[p0] + a * CXF_tSinPD[p0];
  v.r = CXF_tCosP[p0] + a * CXF_tCosPD[p0];
);
//______________________________________________________________________
function CXF_w(p16) 
local (p0 a)(
  p16 = min(128*16, max(0, p16));
  p0 = p16|0;
  a = p16 - p0;
  CXF_tW[p0] + a * CXF_tWD[p0];
);
//______________________________________________________________________
// complex multiplication
function CXF_mul(a* b*)
  local(tmp)(
  tmp = a.r*b.r - a.i*b.i;
  a.i = a.i*b.r + a.r*b.i;
  a.r = tmp;
);
//______________________________________________________________________
//diamond angle 0..4
function CXF_diamAngle(x y) (
  y >= 0 ? (
    x >= 0 ?     y / (x + y) : 1 + x / (x - y);
  ) : (
    x < 0  ? 2 + y / (x + y) : 3 + x / (x - y); 
  );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// Interpolate between 4 values according to diamond angle
function CXF_diamAngleInterp4(x y v0 v1 v2 v3) (
  y >= 0 ? (
    x >= 0 ? v0 + (v1 - v0) * (y / (x + y))    
           : v1 + (v2 - v1) * (x / (x - y));
  ) : (
    x < 0  ? v2 + (v3 - v2) * (y / (x + y))
           : v3 + (v0 - v3) * (x / (x - y)); 
  );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// Double Interpolate between 4 values according to diamond angle
// results in v.a and v.b
function CXF_diamAngleInterp4x2(x y 
                                v0a v1a v2a v3a 
                                v0b v1b v2b v3b 
                                v*)
local(d)(
  y >= 0 ? (
    x >= 0 ? ( d = y / (x + y);
               v.a = v0a + (v1a - v0a) * d;
               v.b = v0b + (v1b - v0b) * d;
             )
           : ( d = x / (x - y);
               v.a = v1a + (v2a - v1a) * d;
               v.b = v1b + (v2b - v1b) * d;
             );
  ) : (
    x < 0  ? ( d = y / (x + y);
               v.a = v2a + (v3a - v2a) * d;
               v.b = v2b + (v3b - v2b) * d;
             )
           : ( d = x / (x - y);
               v.a = v3a + (v0a - v3a) * d;
               v.b = v3b + (v0b - v3b) * d;
             ); 
  );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// Interpolate table according to diamond angle
// x,y   coord
// v     table
// l     table length
// l_4   0.25 * table length
function CXF_diamAngleInterp(x y t len len_4) 
 local(i i0 v0)(
  i = len_4 * CXF_diamAngle(x, y);
  i0 = i|0;
  v0 = t[i0];
  v0 + (i - i0) * (t[(i0 + 1) % len] - v0); 
);
//______________________________________________________________________
function CXF_oscInit() (
  this.v.r = 1;
  this.v.i = 0;
  this.p16 = 69*16;
  CXF_sinCos(this.rot, this.p16, 128*16-1);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function CXF_oscKProc(p16) (
  this.p16 = p16;
  CXF_sinCos(this.rot, this.p16, 128*16-1);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function CXF_oscAProc() (
  CXF_mul(this.v, this.rot);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function CXF_oscBProc() instance(v) local(_n)(
  _n = invsqrt(v.r*v.r + v.i*v.i);
  v.r *= _n;
  v.i *= _n;
);
//______________________________________________________________________
function CXF_init()(
  this.p = 69*16;
  this.ftp = 69*16; //filtered pitch
  this.ftp2 = 69*16; //filtered pitch
  this.c.r = 1;
  this.c.i = 0;
  this.softNormCoef = 0.05;
  this.pitchMax = 111*16;
);
//______________________________________________________________________
function CXF_bProc()(
1;
);
//______________________________________________________________________
// a single "filter" with complex valued input
function CXF_aProc(v*)
instance(rot c p n
         pf0 pf1 pf2 pf3
         pb0 pb1 pb2 pb3 
         resCoefSync resCoef) 
local(tp coef) (
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
//                     total pitch = pitch + forward mod + backward mod
  tp = p + CXF_diamAngleInterp4(v.r, v.i, pf0, pf1, pf2, pf3)
         + CXF_diamAngleInterp4(c.r, c.i, pb0+this.noise*CXF_rand(), pb1, pb2, pb3);

  // pitch low pass filtering (limits internal aliasing/hunting)
  //this.ftp  += 0.5 * (     min(tp,111*16)  - this.ftp);
  //this.ftp2 += 0.05 * (this.ftp - this.ftp2);
 
 // not good => delay...  
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
  // max pitch set to 123 -> 10kHz  (Fs/4  at 44100Hz)
  CXF_sinCos(rot, tp, this.pitchMax);
  //apply rot to c
  CXF_mul(c, rot);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
  //input
  c.r += resCoef * (v.r - c.r);
  c.i += resCoef * (v.i - c.i);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
//                                                                  out  
//                                                        normalisation
  this.out.i = c.i;
  this.out.r = c.r;
  //this.out may be used to chain complex valued operators
);
//______________________________________________________________________
// complex normalisation
function CXF_normalise(v*)
local(n) (
  n = invsqrt(v.r*v.r + v.i*v.i);
  v.i = v.i * n;
  v.r = v.r * n;
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
// smoothed and limited complex normalisation
function CXF_softNorm(c*) local(_n) instance (a2)(
  a2 = c.r * c.r + c.i * c.i;
  a2 = max(0.05*0.05, a2);
  a2 > this.sa2 ?
    this.sa2 = a2
  : this.sa2 += this.softNormCoef * (a2 - this.sa2);
  invsqrt(this.sa2);
);
  
