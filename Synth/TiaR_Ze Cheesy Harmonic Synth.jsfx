desc: Ze Cheesy Harmonic Synth
version: 0.2
author: T.Rochebois
changelog:
  + improved keyboard (priority to last or highest note)
  + added    tremolo
  + added    ModWheel/Aftertouch vibrato depth
  + added    Pitch bend +- 1 octave
  + modified Seq gains can be negative (opposite phase)
  + modified Seq. init to fundamental seq
about: An additive synth based on Walsh functions

slider1:1<-1,1,0.001>Seq. 1
slider2:0<-1,1,0.001>Seq. 2
slider3:0<-1,1,0.001>Seq. 3
slider4:0<-1,1,0.001>Seq. 4
slider5:0<-1,1,0.001>Seq. 5
slider6:0<-1,1,0.001>Seq. 6
slider7:0<-1,1,0.001>Seq. 7
slider8:0<-1,1,0.001>Seq. 8
slider9:0<-1,1,0.001>Seq. 9
slider10:0<-1,1,0.001>Seq. 10
slider11:0<-1,1,0.001>Seq. 11
slider12:0<-1,1,0.001>Seq. 12
slider13:0<-1,1,0.001>Seq. 13
slider14:0<-1,1,0.001>Seq. 14
slider15:0<-1,1,0.001>Seq. 15
slider16:0<-1,1,0.001>Seq. 16

slider20:0<-24,24,0.0001>Detune (semitones)
slider21:5.5<1,20>Vibrato rate
slider22:0.4<0,1,0.0001>Vibrato depth
slider23:1<0,1,0.0001>Glide rate
slider24:0<0,1>Tremolo depth

slider31:-3<-3,1,0.0001>Attack
slider32:0<-3,1,0.0001>Decay
slider33:1<0,1,0.0001>Sustain
slider34:-2<-3,1,0.0001>Release

slider41:0.5<0,1,0.0001>Pan
slider42:0<-24,12>Gain (dB)
// ___________________________________________________________________
@init
//_____________________________________________________________________
function ADSR_setP10(A D S R) (
   // decay coefs        ref         time(s)
  this.A =    1 - exp(log(0.33) / ((10^A) * (srate/KRATE)));
  this.A = min(this.A, 1);
  this.D =    1 - exp(log(0.10) / ((10^D) * (srate/KRATE)));
  this.D = min(this.D, 1); 
  this.S = S;
  this.R =    1 - exp(log(0.10) / ((10^R) * (srate/KRATE)));
  this.R = min(this.R, 1);
);
//_____________________________________________________________________
//                                              Control rate processing
function ADSR_kProc(gate trig)
  local() (
  gate === 0 ? this.AttackSeg = 0;
  trig ? this.AttackSeg = 1;
  this.ASR < gate ?
    this.ASR += this.A * (gate - this.ASR)
  : this.ASR += this.R * (gate + 0.00000001 - this.ASR);
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
  this.AttackSeg === 1 ? (
    this.ADSR += this.A * (1.5 - this.ADSR);
    this.ADSR >= 1 ? 
    ( this.ADSR = 1.0;
      this.AttackSeg = 0;
    );
  );
  this.AttackSeg === 0 ? (
    gate != 0 ? (
      this.ADSR += this.D * (this.S - this.ADSR);
    ) : ( 
      this.ADSR += this.R * (0.00000001 - this.ADSR);
    );
  );
  this.ASR * this.ADSR;
);
// ____________________________________________________________________
function WSH_init()
  instance(sal) local(seq x x0 x1 x2 x3 x4)(
  sal  = ad; ad += 32*16;
  x = 0; loop(32,
    x0 =  (x& 1)    ?1:-1;
    x1 = ((x& 2)>>1)?1:-1;
    x2 = ((x& 4)>>2)?1:-1;
    x3 = ((x& 8)>>3)?1:-1;
    x4 = ((x&16)>>4)?1:-1;
    sal[x + 32 *  0] =             x4;
    sal[x + 32 *  1] =          x3   ;
    sal[x + 32 *  2] =       x2*x3*x4;
    sal[x + 32 *  3] =       x2      ;
    sal[x + 32 *  4] =    x1*x2*   x4;
    sal[x + 32 *  5] =    x1*x2*x3   ;
    sal[x + 32 *  6] =    x1   *x3*x4;
    sal[x + 32 *  7] =    x1         ;
    sal[x + 32 *  8] = x0*x1      *x4;
    sal[x + 32 *  9] = x0*x1   *x3   ;
    sal[x + 32 * 10] = x0*x1*x2*x3*x4;
    sal[x + 32 * 11] = x0*x1*x2      ;
    sal[x + 32 * 12] = x0   *x2   *x4;
    sal[x + 32 * 13] = x0   *x2*x3   ;
    sal[x + 32 * 14] = x0      *x3*x4;
    sal[x + 32 * 15] = x0            ;
    x += 1;
  );
);
function PIWT_init(nMax) instance(n x y z w dp _dp _dp3) (
  this.nMax = nMax;
  n = nMax;
  x = ad; ad += n;
  y = ad; ad += n;
  z = ad; ad += n;
  w = ad; ad += n;
  dp = n*440/srate;
  _dp = 1 / dp; 
  _dp3 = _dp * _dp * _dp;
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
function PIWT_dcRemove(t n) local(i m)(
  m = 0;  i = 0; loop(n, m += t[i]; i += 1; );
  m /= n; i = 0; loop(n, t[i] -= m; i += 1; );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
function PIWT_norm(t n) local(i m)(
  m = 0;  i = 0; loop(n, m = max(t[i], abs(m)); i += 1; );
  m = 1.1/(m+0.1); i = 0; loop(n, t[i] *= m; i += 1; );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _   
function PIWT_integ()
  instance(x n y z w z y x)
  local(i)(
  PIWT_dcRemove(x, n);
  i = 0; loop(n-1, y[i+1] = y[i] + x[i];                i += 1;  );
  PIWT_dcRemove(y, n);
  i = 0; loop(n-1, z[i+1] = z[i] + y[i] + (1/2) * x[i]; i += 1;  );
  PIWT_dcRemove(z, n);
  i = 0; loop(n,
    y[i] *= 1/2;
    x[i] *= 1/6;
    i < n-1 ? w[i+1] = w[i] + z[i] + y[i] + x[i];
    i += 1;
  );
  PIWT_dcRemove(w, n);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
// Call before aProc if there is a discontinuity of dp _dp
function PIWT_disc() 
  instance(n dp _dp _dp3 p out w z y x w0 w1 w2) local(p0 a)(
  p -= 2*dp; p += n * (p < 0); p -= n * (p >= n); p0 = p|0; a = p - p0; 
  w0 = w[p0] + a * (z[p0] + a * (y[p0] + a * x[p0]));
  
  p += dp; p -= n*(p>=n); p0 = p|0; a = p-p0;
  w1 = w[p0] + a * (z[p0] + a * (y[p0] + a * x[p0]));
  
  p += dp; p -= n*(p>=n); p0 = p|0; a = p-p0;
  w2 = w[p0] + a * (z[p0] + a * (y[p0] + a * x[p0]));
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
function PIWT_aProc()
  instance(n dp _dp _dp3 p out w z y x w0 w1 w2 w3) local(p0 a)(
  p += dp; p -= n*(p>=n); p0 = p|0; a = p-p0;
  w3 = w[p0] + a * (z[p0] + a * (y[p0] + a * x[p0]));
  out = (w3 - w0 + 3 * (w1 - w2)) * _dp3;
  w0 = w1; w1 = w2; w2 = w3;
  out;
);
// ___________________________________________________________________
// Init the wave table
_srate = 1 / srate;
KRATE = 8; _KRATE = 1/KRATE;
piwt.PIWT_init(32);
wsh.WSH_init();
kbNotes = ad; ad += 128;
bendFactor = bendFactorF = 1;
// ___________________________________________________________________
@slider
gain = 2^((1/6)*slider42);
gLeft  = gain * cos(0.5*$pi*slider41);
gRight = gain * sin(0.5*$pi*slider41);
dpLfo = 2*$pi*slider21*32*_srate;
vibMin = slider22*0.05;
vibMax = 0.025 + 2 * vibMin;
adsr.ADSR_setP10(slider31, slider32, slider33, slider34);
glideCoef = 32 * _srate * (0.1 + 100 * slider23 * slider23);
x = 0; loop(32,
  piwt.x[x] = slider1 * wsh.sal[x + 32 * 0];
  seq = 1;loop(15,
    piwt.x[x] += slider(seq + 1) * wsh.sal[x + 32 * seq];
    seq += 1;
  );
  x += 1;
);
PIWT_dcRemove(piwt.x,32);
PIWT_norm(piwt.x,32);
piwt.PIWT_integ();
piwt.PIWT_disc();
// ___________________________________________________________________
@block
while (midirecv(offset, msg1, msg23)) (
  msg2 = msg23 & 0x7F; msg3 = msg23 >> 8; status = msg1 & $xF0;
  status == $x80 ? ( status = $x90; msg3 = 0; )  // note off
: status == $x90 ? (                              // note on
    msg3 == 0 ? (
      kbNotes[msg2] = 0;
      gate = 0; i=0; loop(128, kbNotes[i] !== 0 ? (gate = kBNotes[i]; note=i;); i+=1;);
      gate ? dpc = (piwt.n*440*_srate) * 2 ^ ((note + slider20 - 69) * (1/12)); 
    ) : ( 
      gate == 0 ? trig = 1;
      kbNotes[msg2] = gate = sqrt(msg3 * (1/127));
      note = msg2;
      dpc = (piwt.n*440*_srate) * 2 ^ ((note + slider20 - 69) * (1/12));
      trig ? (dpg = dpc;); 
    );
  )
: status == $xB0 ? (     
    msg2 == 1    ? modWhl = msg3 * (1/127);

    // All notes off
    msg2 == 123 ? (trig = gate = 0;i=0; loop(128, kBNotes[i] = 0; note=i;); i+=1;);
  )
: status == $xD0 ? (aftertouch = msg2 * (1/127);)
: status === 14 * 16 ? (
  bend = (msg3 << 7 | msg2) - 8192;
  bend <= 0 ? bend *= 1 / 8192 : bend *= 1 / 8191;
  bendFactor = 2^bend;
  
);
  co_vib = vibMin + modWhl * (vibMax - vibMin); 
  co_vibA = max(co_vib, vibMin + aftertouch * (vibMax - vibMin)); 

  midisend(offset, msg1, msg23);
);
// ___________________________________________________________________
@sample
k2 <= 0 ? (
  k2 = KRATE;
  dEnv = (adsr.ADSR_kProc(gate, trig) - env)*_KRATE;
  trig = 0;
);
k2 -= 1;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
k <= 0 ? (
  k = 32;
  bendFactorF += 0.05 * (bendFactor - bendFactorF);
  slider23 >=1 ? dpg = bendFactorF * dpc
               : dpg  += glideCoef * (bendFactorF * dpc - dpg);
  pLfo += dpLfo; pLfo -= 2*$pi*(pLfo>0);
  lfo = sin(pLfo);
  dTrem = (1/32)*(  1 + slider24 * (0.5*lfo+0.5 - 1) - trem);
  co_vibAf += 0.05 * (co_vibA - co_vibAf);
  piwt.dp = dpg * (1 + co_vibAf * lfo);
  piwt._dp = 1 / piwt.dp;
  piwt._dp3 = piwt._dp * piwt._dp * piwt._dp;
  piwt.PIWT_disc();
);
k -= 1;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
env += dEnv;
trem += dTrem;
out =  min(10,max(-10,trem*env*piwt.PIWT_aProc()));
spl0 += gLeft * out;
spl1 += gRight * out;
// ___________________________________________________________________
@gfx 0 64
function col(r g b a) (gfx_r = r; gfx_g = g; gfx_b = b; gfx_a = a;);

col(0.0,0,0.5,1);
gfx_rect(0,0,32*12+16, 64);

col(1.0,1.0,1.0,1);

gi = 0; loop(32,
  gx = gi*12+8;
  gi>0?
  gfx_line(gx, 32-144*piwt.x[gi-1], gx, 32-144*piwt.x[gi])
  :
  gfx_line(gx, 32, gx, 32-144*piwt.x[gi]);
  gfx_line(gx, 32-144*piwt.x[gi], gx+12, 32-144*piwt.x[gi]);
  gi+=1;
);
gx = gi*12+8;
gfx_line(gx, 32-144*piwt.x[31], gx, 32);

