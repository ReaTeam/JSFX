desc:Slider library
@init
/*
Todo
  Sliders horizontaux
  Sliders liste combos
*/
//_____________________________________________________________________
function SLD() (
  ad === 0 ? ad = 1;
  
  SLD_BAR = 0;  SLD_CURSOR = 1;   // Graphic type
  SLD_LIN = 0;  SLD_LOG = 1;      // scaleType
  SLD_VAL = 3;
 
  SLD_C_X = 10;   SLD_C_Y = 10;
  SLD_C_H = 14;   SLD_C_W = 150;
  SLD_C_R = 0.8;  SLD_C_G = 0.5;  SLD_C_B = 0.3;
  SLD_C_BR = 0.5; SLD_C_BG = 0.5; SLD_C_BB = 0.5;
  SLD_C_CURTYPE = SLD_BAR;
  SLD_C_TX = 2;   SLD_C_TY = 2;
  SLD_C_TR = 0;   SLD_C_TG = 0; SLD_C_TB = 0;
  
  SLD_NMAX = 64;
  SLD_tX  = ad; ad += SLD_NMAX;
  SLD_tY  = ad; ad += SLD_NMAX;
  SLD_tW  = ad; ad += SLD_NMAX;
  SLD_tH  = ad; ad += SLD_NMAX;
  SLD_tType  = ad; ad += SLD_NMAX;
  SLD_tR  = ad; ad += SLD_NMAX;
  SLD_tG  = ad; ad += SLD_NMAX;
  SLD_tB  = ad; ad += SLD_NMAX;
  
  SLD_tBR  = ad; ad += SLD_NMAX;
  SLD_tBG  = ad; ad += SLD_NMAX;
  SLD_tBB  = ad; ad += SLD_NMAX;

  SLD_tTX  = ad; ad += SLD_NMAX;
  SLD_tTY  = ad; ad += SLD_NMAX;
  
  SLD_tTR  = ad; ad += SLD_NMAX;
  SLD_tTG  = ad; ad += SLD_NMAX;
  SLD_tTB  = ad; ad += SLD_NMAX;

  SLD_tSlider  = ad; ad += SLD_NMAX;
  
  SLD_tVMin   = ad; ad += SLD_NMAX;
  SLD_tVMax   = ad; ad += SLD_NMAX;
  SLD_tScaleType = ad; ad += SLD_NMAX;
  
  SLD_tValue  = ad; ad += SLD_NMAX;
  SLD_tCursor  = ad; ad += SLD_NMAX;
  
  //Set to one if modified
  //Must be set to zero when taken account of
  SLD_tModified = ad; ad += SLD_NMAX;
  
  SLD_tFormat  = strAd; strAd += SLD_NMAX;
  
  
);

//_____________________________________________________________________
function SLD_cursorToValue(i)
local (a v) (
  a = (SLD_tCursor[i] - SLD_tX[i]) / SLD_tW[i];
  SLD_tScaleType[i] !== SLD_LOG ?
            v = SLD_tVMin[i]  + a * (    SLD_tVMax[i]  -     SLD_tVMin[i] ) //lin
  : v = exp(log(SLD_tVMin[i]) + a * (log(SLD_tVMax[i]) - log(SLD_tVMin[i]))); //log
  max(SLD_tVMin[i],min(SLD_tVMax[i],v));
);
//_____________________________________________________________________
function SLD_valueToCursor(i)
local (v a) (
  SLD_tScaleType[i] != SLD_LOG ? (
    a = (    SLD_tValue[i]  -     SLD_tVMin[i])  / (     SLD_tVMax[i]  -     SLD_tVMin[i] );
  ) : (
    a = (log(SLD_tValue[i]) - log(SLD_tVMin[i])) / ((log(SLD_tVMax[i]) - log(SLD_tVMin[i])));
  );
  SLD_tX[i] + SLD_tW[i] * a;
);

//_____________________________________________________________________
function SLD_setValue(i value)
local() (
  SLD_tValue[i] = value;
  SLD_tCursor[i] = SLD_valueToCursor(i);
);
//_____________________________________________________________________
//type 0 : bar
//type 1 : cursor
function SLD_init(i, value, vMin, vMax, scaleType, format, sliderNum)
local() (
  SLD_tVMin[i] = vMin; SLD_tVMax[i] = vMax; 
  SLD_tScaleType[i] = scaleType;
  
  SLD_tX[i] = SLD_C_X + 1; SLD_tY[i] = SLD_C_Y + 1; 
  SLD_tW[i] = SLD_C_W - 2; SLD_tH[i] = SLD_C_H - 2; 
  SLD_tType[i] = SLD_C_CURTYPE;
  
  SLD_tR[i] = SLD_C_R;   SLD_tG[i] = SLD_C_G;   SLD_tB[i] = SLD_C_B;
  SLD_tBR[i] = SLD_C_BR; SLD_tBG[i] = SLD_C_BG; SLD_tBB[i] = SLD_C_BB;
  
  SLD_tTX[i] = SLD_C_TX; SLD_tTY[i] = SLD_C_TY;
  SLD_tTR[i] = SLD_C_TR; SLD_tTG[i] = SLD_C_TG; SLD_tTB[i] = SLD_C_TB;
  strcpy(SLD_tFormat + i, format);
  //#SLD_tFormat[i] = format;
  SLD_setValue(i, value);
  SLD_tSlider[i] = sliderNum;
  SLD_C_Y += SLD_C_H;
);

function SLD_strStart(str)
local(i) (
  i = 0;
  while(i < strlen(str) && str_getchar(str, i) != ',')(
    i += 1;
  );
  strcpy_substr(#out,str,0,i);
);
function SLD_strStart(n str)
local() (
  ac = 0;
  ai = 0;
  while(
    aj = ai;
    while(ai < strlen(str) && str_getchar(str, ai) != ',')(
      ai += 1;
    );
    ai += 1;
    ac += 1;
    ac < n && ai < strlen(str)
  );
  strcpy_substr(#out, str, aj, ai-aj-1);
);
//_____________________________________________________________________
function SLD_draw(i)
local(str form) (
  //Background
  gfx_r = SLD_tBR[i]; gfx_g = SLD_tBG[i]; gfx_b = SLD_tBB[i];
  gfx_x = SLD_tX[i]-1;          gfx_y = SLD_tY[i]-1;
  gfx_rectto(SLD_tX[i] + SLD_tW[i]+2, SLD_tY[i] + SLD_tH[i]+1);

  SLD_tType[i] === SLD_BAR ? (
    gfx_r = SLD_tR[i]; gfx_g = SLD_tG[i]; gfx_b = SLD_tB[i];
    gfx_x = SLD_tX[i];          gfx_y = SLD_tY[i];
    gfx_rectto(SLD_tCursor[i] + 1, SLD_tY[i] + SLD_tH[i]);
  );
  //negative tx to avoid drawing
  SLD_tTX[i] !== -999 ? (
    gfx_r = SLD_tTR[i]; gfx_g = SLD_tTG[i]; gfx_b = SLD_tTB[i];
    gfx_x = SLD_tX[i] + SLD_tTX[i]; gfx_y = SLD_tY[i] + SLD_tTY[i];
    //sprintf(str, ##(SLD_tFormat[i]), SLD_tValue[i]);
    SLD_tScaleType[i] === SLD_VAL ? (
      SLD_tValue[i] = (SLD_tValue[i] + 0.5) | 0;
      #str = SLD_strStart(SLD_tFormat + i);
      #str += SLD_strStart(SLD_tValue[i] + 2, SLD_tFormat + i);
      gfx_printf(#str);
    ) : (
      sprintf(#str,  SLD_tFormat + i, SLD_tValue[i]);
      gfx_printf(#str);
    );
  );
  SLD_tType[i] === SLD_CURSOR ? (
    gfx_r = SLD_tR[i]; gfx_g = SLD_tG[i]; gfx_b = SLD_tB[i];
    gfx_x = SLD_tSlider[i] - 2; gfx_y = SLD_tY[i];  
    gfx_rectto(SLD_tSlider[i] + 2, SLD_tY[i] + SLD_tH[i]);
  );
  
);
//_____________________________________________________________________
//two pixel tolerance on both sides
function SLD_mouseIn(i) (
     mouse_x >= SLD_tX[i] - 2 && mouse_x <= SLD_tX[i] + SLD_tW[i] + 2 
  && mouse_y >= SLD_tY[i] && mouse_y <= SLD_tY[i] + SLD_tH[i];
);
//_____________________________________________________________________
function SLD_gProc(i)(
  SLD_mouseIn(i) ? (
    mouse_cap == 1 ? (
      SLD_tCursor[i] = max(SLD_tX[i],min( SLD_tX[i] + SLD_tW[i], mouse_x));
      SLD_tValue[i] = SLD_cursorToValue(i);
      SLD_tModified[i] = 1;
    ) : (
      mouse_wheel != 0 ? (
        SLD_tScaleType[i] !== SLD_VAL ? (
          //mouse_wheel incs by 120
          SLD_tCursor[i] += mouse_wheel/1200; //10th of pix
          SLD_tCursor[i] = max(min(SLD_tCursor[i], SLD_tX[i] + SLD_tW[i]), SLD_tX[i]);
          mouse_wheel = 0;
          SLD_tValue[i] = SLD_cursorToValue(i);
        ):(
          SLD_tValue[i] +=  sign(mouse_wheel);
          SLD_tValue[i] = max(min(SLD_tValue[i], SLD_tVMax[i]), SLD_tVMin[i]);
          SLD_tCursor[i] = SLD_valueToCursor(i);
          mouse_wheel = 0;
        );
        SLD_tModified[i] = 1;
      );
    );
  );
  SLD_draw(i);
);
//_____________________________________________________________________
function SLD_gProc()
local(i) (
  i = 0;
  loop(SLD_NMAX,
    SLD_tW[i] !== 0 ?
      SLD_gProc(i);
    i += 1;
  );
);
//_____________________________________________________________________
function SLD_updateSlider(i, v)(
  slider(i) = v;
  i<30 ? slider_automate(1<<(i-1))
: i === 30 ? ( slider_automate(slider30);)
: i === 31 ? ( slider_automate(slider31);)
: i === 32 ? ( slider_automate(slider32);)
: i === 33 ? ( slider_automate(slider33);)
: i === 34 ? ( slider_automate(slider34);)
: i === 35 ? ( slider_automate(slider35);)
: i === 36 ? ( slider_automate(slider36);)
: i === 37 ? ( slider_automate(slider37);)
: i === 38 ? ( slider_automate(slider38);)
: i === 39 ? ( slider_automate(slider39);)

: i === 40 ? ( slider_automate(slider40);)
: i === 41 ? ( slider_automate(slider41);)
: i === 42 ? ( slider_automate(slider42);)
: i === 43 ? ( slider_automate(slider43);)
: i === 44 ? ( slider_automate(slider44);)
: i === 45 ? ( slider_automate(slider45);)
: i === 46 ? ( slider_automate(slider46);)
: i === 47 ? ( slider_automate(slider47);)
: i === 48 ? ( slider_automate(slider48);)
: i === 49 ? ( slider_automate(slider49);)

: i === 50 ? ( slider_automate(slider50);)
: i === 51 ? ( slider_automate(slider51);)
: i === 52 ? ( slider_automate(slider52);)
: i === 53 ? ( slider_automate(slider53);)
: i === 54 ? ( slider_automate(slider54);)
: i === 55 ? ( slider_automate(slider55);)
: i === 56 ? ( slider_automate(slider56);)
: i === 57 ? ( slider_automate(slider57);)
: i === 58 ? ( slider_automate(slider58);)
: i === 59 ? ( slider_automate(slider59);)

: i === 60 ? ( slider_automate(slider60);)
: i === 61 ? ( slider_automate(slider61);)
: i === 62 ? ( slider_automate(slider62);)
: i === 63 ? ( slider_automate(slider63);)
: i === 64 ? ( slider_automate(slider64);)
;    
);
//_____________________________________________________________________
function SLD_getSlider(i)(
 slider(i);
);
//_____________________________________________________________________
function SLD_bProc()(
  i = 0;
  loop(SLD_NMAX,
    SLD_tW[i] > 0 ? (
  //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    
      SLD_tSlider[i] > 0 ? (               // takes account of JS Sliders
      // Updated => update slider
        SLD_tModified[i] === 1 ?
        (
          SLD_updateSlider(SLD_tSlider[i], SLD_tValue[i]);
          
        );
      // Slider != Value => update value
        SLD_getSlider(SLD_tSlider[i]) != SLD_tValue[i] ?
        (
          SLD_setValue(i, SLD_getSlider(SLD_tSlider[i]));
          SLD_tModified[i] = 1;
        );
      ); //SLD_tSlider[i]>0
  //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    );  
    i += 1;
  );
);
