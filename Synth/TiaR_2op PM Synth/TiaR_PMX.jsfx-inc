desc:Two operator oscillator library
/*
  S1  ---->  S0  ---->
 Ratio  ^  Pitch
        |
      Index

PMX()      
PMX_init(pitch ratio index)
PMX_kProc(pitch ratio index)
PMX_aProc()
*/
//_____________________________________________________________________
import TiaR_SCH.jsfx-inc
@init
//_____________________________________________________________________
//                     Static ressources & tables for all PMX "objects"
function PMX()
  local(i) (
  SCH();
  PMXTL = 8192;
  PMXTL128 = 128 * PMXTL;
  PMXTL_2pi = PMXTL/(2*$pi);
  PMX_tSin8192 = ad; ad += PMXTL;
  i = 0;
  loop(PMXTL,
    PMX_tSin8192[i] = cos(2*$pi * i / PMXTL);
    i += 1;
  );
  PMX_COEF_TUNING = (PMXTL * TUNING / srate);
  
  PMX_tPitch = ad; ad += 129;
  i = 0;
  loop(129,
    PMX_tPitch[i] = PMX_COEF_TUNING * 2 ^ ( (i - 69)*(1/12) );
    i += 1;
  );
);
function PMX_calcDP(pitch)
local(p0 a) (
  pitch = min(128, max(0, pitch));
  p0 = pitch|0;
  a = pitch - p0;
  PMX_tPitch[p0] + a * (PMX_tPitch[p0 + 1] - PMX_tPitch[p0]);
);
//_____________________________________________________________________
//                                               Init of a PMX instance
function PMX_init(pitch ratio index self selfc) (
  this.sch.SCH_init(44100);
  this.glide0 = 1;
  this.glide1 = 1;
  this.glideC = 1;
  this.glideM = 1;
  this.dp0 = PMX_calcDP(pitch);
  this.dp1 = this.dp0 * ratio;
  this.p0 = PMXTL128;  //offset to avoid modulo of negative numbers
  this.p1 = PMXTL128;  //offset to avoid modulo of negative numbers  
  this.new_dp0 = this.dp0;
  this.new_dp1 = this.dp1;
  this.out1 = 0;
  this.index = index * PMXTL_2pi;
  this.self = self * PMXTL_2pi;
  this.selfc = selfc * PMXTL_2pi;
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//                                                     no interpolation
  this.dindex = 0;
  this.dself  = 0;
  this.dselfc = 0;
  this.ddFb   = 0;
);
//_____________________________________________________________________
//                                                  Glide for Carrier 0
function PMX_setGlideC(glideC) (
  glideC *= 1/3;
  glideC<0.1 ?
    this.glideC = 1 :
  this.glideC = 1.0 / (1.0 + (glideC * srate));
);
//_____________________________________________________________________
//                                                Glide for Modulator 1
function PMX_setGlideM(glideM) (
  glideM *= 1/3;
  glideM < 0.1 ?
    this.glideM = 1 :
  this.glideM = 1.0 / (1.0 + (glideM * srate));
);
//_____________________________________________________________________
//                                              Control rate processing
function PMX_kProc(pitch ratio index self selfc fbType dFb)
  local(new_dp0 new_dp1 new_index) (
  this.fbType = fbType;
  this.fbType1 = 1 - fbType;
  
  trig ? (
    this.glide0 = 1;
    this.glide1 = 1;
  ):(
    this.glide0 = this.glideC;
    this.glide1 = this.glideM;
  );
  pitch !== this.pitch ? (
    this.pitch = pitch;
    this.new_dp0 = PMX_calcDP(pitch);
    this.new_dp1 = this.new_dp0 * ratio;
  ) :
  ratio !== this.ratio ? (
    this.new_dp1 = this.new_dp0 * ratio;
  );
  
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//            Prepare for linear interpolation in the aProc (audio rate)
  self  *= PMXTL_2pi;
  this.dself  = (self  - this.self ) * ONE_OVER_KRATE;
  
  selfc *= PMXTL_2pi;
  this.dselfc = (selfc - this.selfc) * ONE_OVER_KRATE;
  
  dFb   *= PMXTL_2pi;
  this.ddFb   = (dFb   - this.dFb  ) * ONE_OVER_KRATE;

  index *= PMXTL_2pi;
  this.dindex = (index - this.index) * ONE_OVER_KRATE;

);
//_____________________________________________________________________
//                                                Audio rate processing
function PMX_aProc(dpMod)
  local() (  
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//                          interpolation of k rate internal parameters
  this.index += this.dindex;
  this.self  += this.dself;
  this.selfc += this.dselfc;
  this.dFb   += this.ddFb;
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//                                                  phase accumulations
  this.dp0 += this.glide0 * (this.new_dp0 - this.dp0);
  this.dp1 += this.glide1 * (this.new_dp1 - this.dp1);
  this.p0 += this.dp0 * dpMod;
  this.p1 += this.dp1 * dpMod;
  //offset to avoid modulo of negative numbers when adding modulation
  // to phase.
  // p0 and p1 run between 127.0 and 128.0 * size of table (PMXTL)
  // when the modulo is added it runs between [0 PMXTL[
  this.p0 > PMXTL128 ? this.p0 -= PMXTL;
  this.p1 > PMXTL128 ? this.p1 -= PMXTL;
//  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
//                                                               output

  this.delayed = this.sch.SCH_aProc(this.out0);
  
  // anti hunting filter in the feedback loop:
  // mod1 += 0.5 * (new mod1 - mod1)
  this.mod1 += 0.5 * (
                  this.self * this.out1 
                     * (this.fbType1 + this.fbType*this.out1) //Saw/Sqr
               - this.mod1);
               
  this.out1 = PMX_tSin8192[(this.p1 + this.mod1) % PMXTL]; 
  // anti hunting filter in the feedback loop:
  this.mod0 += 0.5 * (
                  this.dFb * this.delayed
                + this.selfc * this.out0
                     * (this.fbType1 + this.fbType*this.out0) //Saw/Sqr
                + this.index * this.out1
              - this.mod0);
               
  this.out0 = PMX_tSin8192[(this.p0 + this.mod0) % PMXTL];
);

