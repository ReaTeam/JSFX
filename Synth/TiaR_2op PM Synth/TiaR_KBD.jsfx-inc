desc: MIDI KBD library
//______________________________________________________________________
//                                                              Features
// Monophonic
// high note priority
// note       [0 127] integer
// gate       [0  1]    velocity
// trig       1       on transients
// bend       [-1 1[
// modWheel   [ 0 1[
// expression [ 0 1]
//______________________________________________________________________
//                                                                 USAGE

//______________________________________________________________________
//                                                                 TO DO
//  Aftertouch
//  control rate time accuracy (currently block rate accurate)
//______________________________________________________________________
//                                                                 Ideas



//______________________________________________________________________
@init
//______________________________________________________________________
//                                                            ressources
function KBD()
  local() ( 
  KBD_tV   = ad; ad += 256;  // MIDI notes velocities table
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  gate = 0;     // gate * latest velocity (0 -> 1)
  trig = 0;
  expression = 1;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  note = 60;
  bend = 0;
  channel = 16;
);
  
//______________________________________________________________________
//                                                         Use in @block
function KBD_bProc()
  local(ofs msg1 msg23 status dataL dataH vel activeNote n) (
while (
  midirecv(ofs, msg1, msg23) ? (
    status = msg1 & 240;
    (channel === 16 || channel === (msg1 & 15)) ? (
      dataL = msg23 & 127;
      dataH = (msg23/256)|0;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                           Note on/off
      (status === 9 * 16 || status === 8 * 16) ? (      
        status === 8 * 16 ? vel = 0 : vel = dataH;
        KBD_tV[dataL] = vel;     
        //the latest vel!=0 sets the amplitude
        vel !== 0 ? (
          gate === 0 ? trig = 1;     //if not legato
          gate = vel * (1 / 127.0);
        );     
        //the highest note sets the pitch
        activeNote = -1;
        n = 0;
        loop(128,
          KBD_tV[n] > 0 ? activeNote = n;
          n += 1;
        );
      
        //if there is no active note, we set gate to 0
        activeNote >= 0 ? (
          note = activeNote;
        ) : (
          gate = 0;
        );
      );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                                    CC
      status === 11 * 16 ? (     
        dataL ===  1      ? KBD_modWheelH = dataH;
        dataL ===  1 + 32 ? KBD_modWheelL = dataH;
        dataL === 11      ? expression = dataH/127;
        KBD_modWheel = (KBD_modWheelH + KBD_modWheelL / 128 ) / 128;
        dataL === 123 ? ( // all notes off
          gate = 0;
          n = 0; loop(128, KBD_tV[n] = 0; n += 1; );
          expression = 0;
          bend = 0;
          KBD_modWheelL = 0; KBD_modWheelH = 0; KBD_modWheel = 0;
        );
      );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                            aftertouch
      status === 13 * 16 ? (
        aftertouch = dataL*(1/127);
      );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
//                                                            pitch bend
      status === 14 * 16 ? (
        bend = dataH * 128 + dataL;
        bend = (bend - 8192) * (1.0 / 8192);
      );
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    );
    midisend(ofs, msg1, msg23);
  ); // midirecv
); // while
);

//______________________________________________________________________
//                                               use in @init or @slider
//                                      0 -> 15 mdi channel    16 -> all
function KBD_setChannel(newChannel)
  local(n) (
  channel !== (newChannel|0) ? (
    //All notes off if we change the receive channel
    gate = 0;
    n = 0; loop(128, KBD_tV[n] = 0; n += 1; );
    expression = 0;
    bend = 0;
    KBD_modWheelL = 0; KBD_modWheelH = 0; modWheel = 0;
    channel = newChannel|0;
  );
);
//______________________________________________________________________
//              must be called at the end of the k subsection in @sample
function KBD_kProc()
  local() (
  // smoothing to avoid clics.
  modWheel += 0.05 * (KBD_modWheel - modWheel);
  trig = 0;
);






