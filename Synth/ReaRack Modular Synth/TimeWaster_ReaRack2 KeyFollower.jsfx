version: 2.0.1
desc:ReaRack2 - Key Follower
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           License: LGPL - http://www.gnu.org/licenses/lgpl.html
           
about:     Key follower module for the ReaRack modular JSFX synth system.
           
changelog: Version 2.0.1 (10/02/2018) Some output CC values were > 127, fixed.
           Version 2.0.0 (10/12/2016) Initial version 2 release.

slider1:sccout=22<0,63,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Output
slider2:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Output Channel
slider4:slowlev=0.25<0,1,0.001>Low End
slider5:shilev=1<0,1,0.001>High End
slider6:smidlev=1<0,1,0.001>Mid Point
slider7:smidpos=100<0,127,1>Mid Point Position
slider9:sclass=0<0,3,1{None,Master,Slave}>Class
slider10:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

in_pin:none
out_pin:none

options:gmem=ReaRack

@init

fxn = 240;

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+7];

slidermove == 1 ?
(
ccoutmsb = sccout <= 31 ? sccout:sccout + 32;
ccoutlsb = ccoutmsb+32;
chanout = schanout-1;

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+1] = slowlev;
  gmem[group+fxn+2] = shilev;
  gmem[group+fxn+3] = smidlev;
  gmem[group+fxn+4] = smidpos;
  gmem[group+fxn+5] = sccout;
  gmem[group+fxn+6] = schanout;
  gmem[group+fxn+7] = slidermove;
);

// Retrieve slider values
sclass == 2 ? (
  slowlev  = gmem[group+fxn+1];
  shilev   = gmem[group+fxn+2];
  smidlev  = gmem[group+fxn+3];
  smidpos  = gmem[group+fxn+4];
  sccout   = gmem[group+fxn+5];
  schanout = gmem[group+fxn+6];
);

lowlev = slowlev;
hilev = shilev;
midlev = smidlev;
midpos = smidpos/127;
count = 1;

slidermove = 0;
); // end if slidermove
 
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;
    
    // Is it a note on event?
    status == $x90 ?
    (
      // Get note
       note = msg2/127;
    );
  //Pass through
  midisend(offset, msg1, msg2, msg3);  
);
           
@sample

note <= midpos ?  ccval = (lowlev +((midlev - lowlev)*(note/midpos))):
                  ccval = (midlev +((hilev - midlev)*(note/(1-midpos))));
                  ccval *= 127.9921875;

//Send CC messages
ccvalmsb = floor(ccval);
ccvallsb = floor((ccval-ccvalmsb)+128);

chanout == -1 ?
  (
   n = 0;
   loop(16,
   preccvalmsb != ccvalmsb ? midisend(count,$xB0+n,ccoutmsb,ccvalmsb); // Only send messages if values have changed
   preccvallsb != ccvallsb ? midisend(count,$xB0+n,ccoutlsb,ccvallsb);
   n += 1;
  );
):(
   preccvalmsb != ccvalmsb ? midisend(count,$xB0+chanout,ccoutmsb,ccvalmsb);
   preccvallsb != ccvallsb ? midisend(count,$xB0+chanout,ccoutlsb,ccvallsb);
);
 /////////////// Store previous values ////////////     
preccvalmsb = ccvalmsb;
preccvallsb = ccvallsb;
count += 1;

@gfx 450 175

xscl = 3;

gfx_a = 0.5;
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_x = 25;
gfx_y = 25;
gfx_lineto(25+127*xscl,25);
gfx_x = 25;
gfx_y = 25+127;
gfx_lineto(25+127*xscl,25+127);
gfx_a = 1;
gfx_x = 13;
gfx_y = 22;
gfx_drawstr("1");
gfx_x = 13;
gfx_y = 22+127;
gfx_drawstr("0");

gfx_r = 0;
gfx_g = 1;

gfx_x = 25;
gfx_y = 25+127-(lowlev*128);
gfx_lineto(25+(midpos*128)*xscl,25+127-(midlev*128));
gfx_lineto(25+127*xscl,25+127-(hilev*128));

gfx_a = 0.5;
gfx_x = 25+(((note*128)-0.5)*xscl);
gfx_y = 25+127;
gfx_lineto(25+(((note*128)-0.5)*xscl),25);
gfx_lineto(25+(((note*128)+0.5)*xscl),25);
gfx_lineto(25+(((note*128)+0.5)*xscl),25+127);
gfx_lineto(25+(((note*128)-0.5)*xscl),25+127);

