version: 2.0.1
desc:ReaRack2 - Trigger
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2016 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
         
license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Trigger module for the ReaRack modular JSFX synth system. Use to covert CC messages to note on messages.

changelog: Version 2.0.1 (10/02/2018) Improved accuracy for CC input values.
                                      Fixed missing channel 16 for output.
           Version 2.0.0 (15/10/2017) Initial version 2 release.

slider1:sccin=20<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input
slider2:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Output Channel
slider5:sedge=0<0,1,1{Rising Edge,Falling Edge}>Trigger on:
slider6:ssnap=0<0,7,1{None,1/4,1/8,1/12,1/16,1/32,1/64,1/128}>Trigger Value Snap Divisor
slider7:strigval=0<0,1,0.0001>Trigger Value
slider9:snoteval=69<0,127,1>Output Note
slider10:snotevel=127<0,127,1>Velocity
slider11:sholdsec=0.025<0.025,10,0.001>Trigger Hold (seconds)
slider13:sclass=0<0,3,1{None,Master,Slave}>Class
slider14:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

in_pin:none
out_pin:none

options:gmem=ReaRack

@init
fxn = 220;
rsent = 0;
fsent = 0;
holdon = 0;
preccval = 0;
note[1] = "C";
note[2] = "C#";
note[3] = "D";
note[4] = "D#";
note[5] = "E";
note[6] = "F";
note[7] = "F#";
note[8] = "G";
note[9] = "G#";
note[10] = "A";
note[11] = "A#";
note[12] = "B";

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+8];

slidermove == 1 ?
(
ccinmsb = sccin <= 31 ? sccin:sccin+32;
ccinlsb = ccinmsb+32;
outChan = schanout-1;

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = sedge;
  gmem[group+fxn+1] = ssnap;
  gmem[group+fxn+2] = strigval;
  gmem[group+fxn+3] = snoteval;
  gmem[group+fxn+4] = snotevel;
  gmem[group+fxn+5] = sholdsec;
  gmem[group+fxn+6] = sccin;
  gmem[group+fxn+7] = schanout;
  gmem[group+fxn+8] = slidermove;
);

// Retrieve slider values
sclass == 2 ? ( 
  sedge    = gmem[group+fxn+0];
  ssnap    = gmem[group+fxn+1];
  strigval = gmem[group+fxn+2];
  snoteval = gmem[group+fxn+3];
  snotevel = gmem[group+fxn+4];
  sholdsec = gmem[group+fxn+5];
  sccin    = gmem[group+fxn+6];
  schanout = gmem[group+fxn+7];
);  

edge = sedge;
snap = (ssnap == 0 ? 1:
        ssnap <= 2 ? 2^(ssnap+1):
        ssnap == 3 ? 12:
        ssnap >= 4 ? 2^ssnap;
        );
trignum = (snap == 1 ? strigval:
           floor((strigval*snap)+0.5);
           );
trigval = trignum/snap;
noteval = snoteval;
notevel = snotevel;
holdsec = sholdsec;
gnoteval = noteval % 12;
gnote = note[gnoteval+1];
goctave = (noteval - gnoteval)/12;
hold = holdsec*(srate/samplesblock);

slidermove = 0;
); // end if slidermove

while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;    
  // Is it a controller event?
  status == $xB0 ?
  (
    // Is it the right CC?
    msg2 == ccinmsb || msg2 == ccinlsb ?
      (
      msg2 == ccinmsb ? ccvalmsb = msg3;
      msg2 == ccinlsb ? ccvallsb = msg3;
      ccval = (ccvalmsb/127.9921875)+(ccvallsb/16384);
      );
  );
  // Pass thru
  midisend(offset, msg1, msg2, msg3); 
);
preccval < ccval ? rise = 1;
preccval > ccval ? rise = 0;

sign(prerise - rise) == 1 ? rsent = 0;
sign(prerise - rise) == -1 ? fsent = 0;

edge == 0 ?
  (
   ccval >= trigval && rise == 1 && rsent == 0 ?
   (
    outChan == -1 ?
     (
      n = 0;
      loop(16,
        midisend(offset,$x90+n,noteval,notevel);
        n += 1;
        );
      ) : (
      midisend(offset,$x90+outChan,noteval,notevel);
      );
      rsent = 1;
      holdon = 1;
      blockcount = 0;
    );
  );
   
edge == 1 ?
  (
   ccval <= trigval && rise == 0 && fsent == 0 ?
   (
    outChan == -1 ?
     (
      n = 0;
      loop(16,
        midisend(offset,$x90+n,noteval,notevel);
        n += 1;
        )
      ) : (
      midisend(offset,$x90+outChan,noteval,notevel);
;
      );
      fsent = 1;
      holdon = 1;
      blockcount = 0;
    );
  );  
preccval = ccval;
prerise = rise;
blockcount >= hold ?
  (
   holdon == 1 ?
   (
    chanout == -1 ?
     (
      n = 0;
      loop(16,
        midisend(offset+n,$x80+n,noteval);
        n += 1;
        )  
      ) : (
      midisend(offset,$x80&outChan,noteval);
      );
      holdon = 0;
    );
  );
blockcount += 1;
blockcount > 2*hold ? blockcount = 0;

@gfx 400 150
gccval = ccval;

gfx_x = 225;
gfx_y = 17;
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 1;

holdon == 1 ?
  (
   gfx_rectto(238,30);
   ):(
   gfx_lineto(238,17);
   gfx_lineto(238,30);
   gfx_lineto(225,30);
   gfx_lineto(225,17);
   );

gfx_x = 243;
gfx_y = 20;
gfx_r = 1;
gfx_g = 1;
gfx_b = 1;
gfx_a = 0.7;

gfx_drawstr("Note: ");
gfx_printf(gnote);
//gfx_drawnumber(goctave,0);
gfx_drawnumber(goctave-1,0);
//gfx_drawnumber(goctave-2,0);

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;

gfx_x=50;
gfx_y=25+127;
gfx_lineto(50,(25+127)-(gccval*127));
gfx_lineto(60,(25+127)-(gccval*127));
gfx_lineto(60,(25+127));

gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = 30;
gfx_y = 25;
gfx_lineto(30+(50),25);
gfx_x = 30;
gfx_y = 25+127;
gfx_lineto(30+(50),25+127);
gfx_a =1;
gfx_x = 30;
gfx_y = 25+127-(trigval*127);
gfx_lineto(30+(50),25+127-(trigval*127));


gfx_x = 5;
gfx_y = 20;
gfx_drawstr("1");
gfx_x = 18;
gfx_y = 20+127;
gfx_drawstr("0");
gfx_r = 1;
gfx_g = 1;
gfx_b = 1;
gfx_a = 0.7;
gfx_x =30+55;
gfx_y = 20+127-(trigval*127);
gfx_drawstr("Trigger: ");
snap == 1 ? gfx_drawnumber(trigval,3):
(
gfx_drawnumber(trignum,0);
gfx_drawstr("/");
gfx_drawnumber(snap,0);
);
