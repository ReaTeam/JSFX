version: 2.0.0
desc:ReaRack2 - Note Scope
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           
License:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Scope module for the ReaRack modular JSFX synth system.
           Use for visualising a composite waveform. Place somewher after a chain of oscillatorrs
           
changelog: Version 2.0.0 (10/12/2017) Initial version 2 release.


// Pitch control - Choose your preferred note naming convention:
//slider6:0<0,128,1{MIDI note,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Pitch
slider6:spitch=0<0,128,1{MIDI note,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Pitch
//slider6:0<0,128,1{MIDI note,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Pitch
slider7:sharm=0<1,16,1{1 (fundamental),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Lowest Harmonic
slider8:soct=0<-4,4,1>Tune (octave)
slider9:ssemi=0<-12,12,1>Tune (semitone)
slider10:scent=0<-100,100,1>Fine Tune (cents)
slider32:sclass=0<0,3,1{None,Master,Slave}>Class
slider33:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group


options:gmem=ReaRack

@init
fxn = 290;
tau = $pi*2;
freq = 440;
inc = tau*freq/srate;

@slider



@block


//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+5]  = sharm;
  gmem[group+fxn+6]  = soct;
  gmem[group+fxn+7]  = ssemi;
  gmem[group+fxn+8]  = scent;
  gmem[group+fxn+23] = spitch;
);

// Retrieve slider values
sclass == 2 ? ( 
  sharm        = gmem[group+fxn+5];
  soct         = gmem[group+fxn+6];
  ssemi        = gmem[group+fxn+7];
  scent        = gmem[group+fxn+8];
  spitch       = gmem[group+fxn+23];
);  

pitch        = spitch-1;
harm         = sharm+1;
detune       = 2^(soct + ssemi/12 + scent/1200);


/////////////////////////Get MIDI inputs/////////////////
// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
  (  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90  && pitch == -1 ?
      (
       // Get note value
       note = msg2 & $x7F;
       // Calculate frequency and phase position increment
       freq = 2^((note-69)/12)*440*harm*detune;
       inc = tau*freq/srate;
      );

  //Pass through all
   midisend(offset, msg1, msg2, msg3); 
);

/////////////////////////Slider pitch control//////////////
pitch > -1 ? (
  freq = 2^((pitch-69)/12)*440*harm*detune;
  inc = tau*freq/srate;
);


@sample

spl0 = spl0;
spl1 = spl1;

//////////Buffer results for graphics////////
looplen = srate/8;
bufflen = floor(looplen);
  bpos<=bufflen ? (
    bpos[0] = x;
    (bpos+bufflen)[0] = (spl0+spl1)/2;
    );
  
buffcount+=1;
buffcount > looplen ? (
  buffcount-=looplen;
  );
bpos=floor(buffcount);

////////Increment phase position///////////
x += inc;
x >= tau ? x-= tau;

/////////////////////////////////graphics//////////////////////////////////////
@gfx 500 200

xmin = 25;
xrng = 150;
xscl = xrng/tau;
xmax = xmin+xrng;
ymin = 25;
yrng = 100;
yscl = yrng/2;
ymax = ymin+yrng;
mxmin = xmax+160;
mxrng = 100;
myrng = 6;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1; 

//Draw waveform
gx = 1;
while (gx <= bufflen)(
  gfx_x = xmin+xscl*gx[0];
  gfx_y = ymin+yscl-yscl*(gx+bufflen)[0];
  gfx_y <= ymax && gfx_y >= ymin ? gfx_setpixel(0,1,0);
  gx+=1;
);

// Text
gfx_r=1;
gfx_b=1;
gfx_g=1;
gfx_a=0.7;
gfx_x=67;
gfx_y=8;
gfx_drawstr("Waveform");

gfx_x=25;
gfx_y=ymax+10;
gfx_drawstr("Sync Frequency  = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");

// Linework
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmin+(xscl*tau),ymin);
gfx_x = xmin;
gfx_y = ymin+yscl;
gfx_lineto(xmin+(xscl*tau),ymin+yscl);
gfx_x = xmin;
gfx_y = ymin+yscl+yscl;
gfx_lineto(xmin+(xscl*tau),ymin+yscl+yscl);
gfx_a =1;
gfx_x = xmin-12;
gfx_y = ymin-5;
gfx_drawstr("1");
gfx_x = xmin-12;
gfx_y = ymin-5+yscl;
gfx_drawstr("0");
gfx_x = xmin-20;
gfx_y = ymin-5+yscl+yscl;
gfx_drawstr("-1");


