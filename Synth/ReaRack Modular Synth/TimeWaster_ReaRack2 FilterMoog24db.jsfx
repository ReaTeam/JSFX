version: 2.0.2
desc: ReaRack2 - Filter Moog 24 db
noindex: true
author:    ReaRack modulation code - Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           Moog filter code (C) 2008-2009, Lubomir I. Ivanov
           NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
           WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
           ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
           OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
           MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
           TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
           USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE THIS PLUG-IN IS A  THIRD
           PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
           ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
           PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
           ENTRUST SOMEBODY ELSE WITH DOING SO.
           
license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Multimode filter for the ReaRack2 modular JSFX synth system.
           ******************************************************************************
           References:
           Moog filter appromixation
           by CSound source code, Stilson/Smith CCRMA paper
           Distortion by Bram de Jong
           ******************************************************************************

changelog: Version 2.0.2 (11/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.1 (17/01/2018) Added cutoff slider smoothing.
           Version 2.0.0 (9/01/2018) Initial version 2 release.
slider1:smodp=0<0,1,1{Cutoff level,Resonance}>Modulation Target
slider2:sccIn=0<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider3:mrange=1<0,1,0.001>Modulation Range
slider5:smon=0<0,1,1{Stereo,Mono}>Processing
slider6:sftype=0<0,2,1{LP,HP,BP}>Filter Type
slider7:ssx=1<0,1,0.001>Cutoff (Scale)
slider8:sres=0<0,0.85,0.001>Resonance
slider9:sdrive=0<0,100,0.05>Drive (%)
slider10:soutgain=0<-25,25,0.05>Output (dB)
slider11:slimiter=0<0,1,1{On,Off}>Limiter
slider12:sos=0<0,1,1{Off,On}>Oversample (x2)
slider14:sclass=0<0,3,1{None,Master,Slave}>Class
slider15:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group
// Hidden sliders
slider41:ccIn1msb=-1<-1,63,1>-
slider42:ccIn2msb=-1<-1,63,1>-
slider47:cutm=1<0,1,0.001>-
slider48:resm=1<0,1,0.001>-

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

options:gmem=ReaRack

@init
fxn = 300;
ccIn1lsb = ccIn1msb+32;
ccIn2lsb = ccIn2msb+32;

modlevel = 1; 

cDenorm = 10^-30;
mv=2^(-0.2/6);
fs = srate;

//fir restoration
c1 = 1;
c2 = -0.75;
c3 = 0.17;
fgain = 5;

//fir bandlimit
bl_c1 = 0.52;
bl_c2 = 0.54;
bl_c3 = -0.02;

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+11];

slidermove == 1 ?
(
// Update modulation input sliders to previously set values on target selection.
smodp == 0 && ccInnum != 0 ? (         //Cutoff
sccIn = ccIn1msb <= 31 ? ccIn1msb+1:ccIn1msb - 31; 
mrange = cutrange;
);
smodp == 1 && ccInnum != 1 ? (         //Resonance
sccIn = ccIn2msb <= 31 ? ccIn2msb+1:ccIn2msb - 31; 
mrange = resrange;
);

//Get slider values
smodp == 0 ? (         //Cutoff
ccIn1msb = sccIn <= 32 ? sccIn-1:sccIn+31;
ccIn1lsb = ccIn1msb+32;
cutrange = mrange;
ccInnum = 0;
);
smodp == 1 ? (         //Resonance
ccIn2msb = sccIn <= 32 ? sccIn-1:sccIn+31;
ccIn2lsb = ccIn2msb+32;
resrange = mrange;
ccInnum = 1;
);

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = smodp;
  gmem[group+fxn+1] = sccIn;
  gmem[group+fxn+2] = mrange;
  gmem[group+fxn+3] = smon;
  gmem[group+fxn+4] = sftype;
  gmem[group+fxn+5] = ssx;
  gmem[group+fxn+6] = sres;
  gmem[group+fxn+7] = sdrive;
  gmem[group+fxn+8] = soutgain;
  gmem[group+fxn+9] = slimiter;
  gmem[group+fxn+10] = sos;
  gmem[group+fxn+11] = slidermove;
);

// Retrieve slider values
sclass == 2 ? (
  smodp     = gmem[group+fxn+0];
  sccIn     = gmem[group+fxn+1];
  mrange    = gmem[group+fxn+2];
  smon      = gmem[group+fxn+3];
  sftype    = gmem[group+fxn+4];
  ssx       = gmem[group+fxn+5];
  sres      = gmem[group+fxn+6];
  sdrive    = gmem[group+fxn+7];
  soutgain  = gmem[group+fxn+8];
  slimiter  = gmem[group+fxn+9];
  sos       = gmem[group+fxn+10];
);

os = sos;
mono = smon;
ftype = sftype;
res = sres;
drive = 1+sdrive/100;
drvc = 1.2;
outgain = 10^(soutgain/20);
limiter = slimiter;
ssxinc = (ssx-pressx)/samplesblock;
pressx = ssx;
slidermove = 0;
); // end if slidermove

while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;
  channel = msg1 & $x0F;
   
  // Is it a controller event?
  status == $xB0 ? 
  (
    // Is it the right CC for cutoff modulation?
      msg2 == ccIn1msb || msg2 == ccIn1lsb ?
       (
       msg2 == ccIn1msb ? cutmodmsb = msg3;
       msg2 == ccIn1lsb ? cutmodlsb = msg3;
       cutmodval = (cutmodmsb/127.9921875)+(cutmodlsb/16384);   
       );
    // Is it the right CC for resonance modulation?
      msg2 == ccIn2msb || msg2 == ccIn2lsb ?
       (
       msg2 == ccIn2msb ? resmodmsb = msg3;
       msg2 == ccIn2lsb ? resmodlsb = msg3;
       resmodval = (resmodmsb/127.9921875)+(resmodlsb/16384);   
    );
  );
  // Pass through
  midisend(offset, msg1, msg2, msg3);
);

@sample
ccIn1msb == -1 ? cutmodval = 0;
ccIn2msb == -1 ? resmodval = 0;

ssxspl != ssx ? ssxspl += ssxinc;

msx = ssxspl-((ssxspl-cutrange)*cutmodval);
mres = res-((res-resrange)*resmodval);

msx != premsx || mres != premres?
(
sx = 16+(100*msx)*1.20103;
cutoff = exp(sx*log(1.059))*8.17742;

f = 2 * cutoff / fs;
tk = 3.6*f-1.6*f*f-1;
tp = (tk+1)*0.5;
scale = 2.718281828459045^((1-tp)*1.386249);
tr = mres*scale;

premsx = msx;
premres = mres;
);

//stereo
mono == 0 ? (

//distortion
drive > 1 ? (

inl = spl0;
inr = spl1;

os == 1 ? (
//power series in
ps_out1l = 0.5*(inl+ps_out2l);
ps_out2l = 0.5*ps_out1l;
ps_out1r = 0.5*(inr+ps_out2r);
ps_out2r = 0.5*ps_out1r;

//drive
o_in1l  = ps_out1l*(abs(ps_out1l) + drive)/(ps_out1l^2 + (drive-1)*abs(ps_out1l) + 1)*(drive/drvc);
o_in2l  = ps_out2l*(abs(ps_out2l) + drive)/(ps_out2l^2 + (drive-1)*abs(ps_out2l) + 1)*(drive/drvc);
o_in1r  = ps_out1r*(abs(ps_out1r) + drive)/(ps_out1r^2 + (drive-1)*abs(ps_out1r) + 1)*(drive/drvc);
o_in2r  = ps_out2r*(abs(ps_out2r) + drive)/(ps_out2r^2 + (drive-1)*abs(ps_out2r) + 1)*(drive/drvc);

//---------------------------
//bandlimit
bl3_l1 = bl2_l1;
bl3_r1 = bl2_r1;
bl3_l2 = bl2_l2;
bl3_r2 = bl2_r2;

bl2_l1 = bl1_l1;
bl2_r1 = bl1_r1;
bl2_l2 = bl1_l2;
bl2_r2 = bl1_r2;

bl1_l1 = o_in1l;
bl1_r1 = o_in1r;
bl1_l2 = o_in2l;
bl1_r2 = o_in2r;

bl_out1l = (bl1_l1*bl_c1 + bl2_l1*bl_c2 + bl3_l1*bl_c3);
bl_out1r = (bl1_r1*bl_c1 + bl2_r1*bl_c2 + bl3_r1*bl_c3);
bl_out2l = (bl1_l2*bl_c1 + bl2_l2*bl_c2 + bl3_l2*bl_c3);
bl_out2r = (bl1_r2*bl_c1 + bl2_r2*bl_c2 + bl3_r2*bl_c3);

//power series out
o_out1l = 0.5*(bl_out1l+o_out2l);
o_out2l = 0.5*(bl_out2l+o_out1l);
o_out1r = 0.5*(bl_out1r+o_out2r);
o_out2r = 0.5*(bl_out2r+o_out1r);

//fir restoration
s3l = s2l;
s3r = s2r;
s2l = s1l;
s2r = s1r;
s1l = o_out1l;
s1r = o_out1r;

inputl = (s1l*c1+s2l*c2+s3l*c3)*fgain;
inputr = (s1r*c1+s2r*c2+s3r*c3)*fgain;

) : (
inputl = inl*(abs(inl) + drive)/(inl^2 + (drive-1)*abs(inl) + 1)*(drive/drvc);
inputr = inr*(abs(inr) + drive)/(inr^2 + (drive-1)*abs(inr) + 1)*(drive/drvc);
);

) : (
inputl = spl0;
inputr = spl1;
);

//filter
xl = inputl-tr*y4l;
xr = inputr-tr*y4r;

y1l=xl*tp+oldxl*tp-tk*y1l;
y1r=xr*tp+oldxr*tp-tk*y1r;
y2l=y1l*tp+oldy1l*tp-tk*y2l;
y2r=y1r*tp+oldy1r*tp-tk*y2r;
y3l=y2l*tp+oldy2l*tp-tk*y3l;
y3r=y2r*tp+oldy2r*tp-tk*y3r;
y4l=y3l*tp+oldy3l*tp-tk*y4l;
y4r=y3r*tp+oldy3r*tp-tk*y4r;

oldxl = xl;
oldxr = xr;
oldy1l = y1l;
oldy1r = y1r;
oldy2l = y2l;
oldy2r = y2r;
oldy3l = y3l;
oldy3r = y3r;

ftype == 0 ? (
  outl = y4l;
  outr = y4r;   
);
ftype == 1 ? (  
  outl = inputl-y4l;
  outr = inputr-y4r;  
);
ftype == 2 ? (  
  outl = 6*(y3l-y4l);
  outr = 6*(y3r-y4r);  
);

outl = outl*outgain;
outr = outr*outgain;

//limiter
limiter == 0 ? (
  spl0 = min(max((outl+cDenorm),-mv),mv);
  spl1 = min(max((outr+cDenorm),-mv),mv);
) : (
  spl0 = outl;
  spl1 = outr;
);

//mono
) : (

in = (spl0+spl1)/2;

//distortion
drive > 1 ? (

os == 1 ? (

//power series in
ps_out1l = 0.5*(in+ps_out2l);
ps_out2l = 0.5*ps_out1l;

//drive
o_in1l  = ps_out1l*(abs(ps_out1l) + drive)/(ps_out1l^2 + (drive-1)*abs(ps_out1l) + 1)*(drive/drvc);
o_in2l  = ps_out2l*(abs(ps_out2l) + drive)/(ps_out2l^2 + (drive-1)*abs(ps_out2l) + 1)*(drive/drvc);

//---------------------------
//bandlimit
bl3_1 = bl2_1;
bl3_2 = bl2_2;

bl2_1 = bl1_1;
bl2_2 = bl1_2;

bl1_1 = o_in1l;
bl1_2 = o_in12;

bl_out1 = (bl1_1*bl_c1 + bl2_1*bl_c2 + bl3_1*bl_c3);
bl_out2 = (bl1_2*bl_c1 + bl2_2*bl_c2 + bl3_2*bl_c3);

//power series out
o_out1l = 0.5*(bl_out1+o_out2l);
o_out2l = 0.5*(bl_out2+o_out1l);

//fir restoration
s3l = s2l;
s2l = s1l;
s1l = o_out1l;

input = (s1l*c1+s2l*c2+s3l*c3)*fgain;

) : (

input = in*(abs(in) + drive)/(in^2 + (drive-1)*abs(in) + 1)*(drive/drvc);

);

) : (
input = in;
);

//filter
x = input-tr*y4;

y1=x*tp+oldx*tp-tk*y1;
y2=y1*tp+oldy1*tp-tk*y2;
y3=y2*tp+oldy2*tp-tk*y3;
y4=y3*tp+oldy3*tp-tk*y4;

oldx = x;
oldy1 = y1;
oldy2 = y2;
oldy3 = y3;

ftype == 0 ? (  
  out = y4;  
);
ftype == 1 ? (  
  out = input-y4;  
);
ftype == 2 ? (  
  out = 6*(y3-y4);  
);

out = out*outgain;

//limiter
limiter == 0 ? (
  spl0 = min(max((out+cDenorm),-mv),mv);
  spl1 = min(max((out+cDenorm),-mv),mv);
) : (
  spl0 = out;
  spl1 = out;
);

);

@gfx 400 140
xmin = 45;
xrng = 300;
xrng2 = xrng/2;
xmax = xmin+xrng;
ymin = 30;
yrng = 60;
yrng2 = yrng/2;
yrng4 = yrng/4;
ymid = ymin+(yrng/2);
ymax = ymin+yrng;
mxmin = xmax+100;

gfx_r=1;
gfx_g=1;
gfx_b=1;
gfx_a=0.7;
gfx_x=100;
gfx_y=8;
ftype == 0 ? gfx_drawstr("Lowpass Filter");
ftype == 1 ? gfx_drawstr("Highpass Filter");
ftype == 2 ? gfx_drawstr("Bandpass Filter");
gfx_x=mxmin-110;
gfx_y=8;
gfx_drawstr("   Modulation");
gfx_x=mxmin-110;
gfx_y=23;
gfx_drawstr("   Target  CC");
gfx_x=25;
gfx_y=ymax+15;
gfx_drawstr("Cutoff Frequency = ");
gfx_drawnumber(cutoff,0);
gfx_drawstr(" Hz");

gfx_r=0;
gfx_b=0;
gfx_a=1;

ftype == 0 ? (
  gfx_a = 0.5;
  gfx_x = 25;
  gfx_y = ymid;
  gfx_lineto(xmin+(ssx*xrng2-res*yrng4),ymid);
  gfx_lineto(xmin+(ssx*xrng2),ymid-res*yrng2);
  gfx_lineto(xmin+(ssx*xrng2)+yrng4+res*yrng4,ymax);
  gfx_lineto(xrng,ymax);
  gfx_a = 1;
  gfx_x = 25;
  gfx_y = ymid;
  gfx_lineto(xmin+(msx*xrng2-mres*yrng4),ymid);
  gfx_lineto(xmin+(msx*xrng2),ymid-mres*yrng2);
  gfx_lineto(xmin+(msx*xrng2)+yrng4+mres*yrng4,ymax);
  gfx_lineto(xrng,ymax);
);

ftype == 1 ? (
  gfx_a = 0.5;
  gfx_x = 25;
  gfx_y = ymax;
  gfx_lineto(xmin-res*yrng4-yrng4+(ssx*xrng2),ymax);
  gfx_lineto(xmin+(ssx*xrng2),ymid-res*yrng2);
  gfx_lineto(xmin+(ssx*xrng2+res*yrng4),ymid);
  gfx_lineto(xrng,ymid);
  gfx_a = 1;
  gfx_x = 25;
  gfx_y = ymax;
  gfx_lineto(xmin-mres*yrng4-yrng4+(msx*xrng2),ymax);
  gfx_lineto(xmin+(msx*xrng2),ymid-mres*yrng2);
  gfx_lineto(xmin+(msx*xrng2+mres*yrng4),ymid);
  gfx_lineto(xrng,ymid);
);

ftype == 2 ? (
  gfx_a = 0.5;
  gfx_x = 25;
  gfx_y = ymax;
  gfx_lineto(xmin-res*yrng4-yrng4+(ssx*xrng2),ymax);
  gfx_lineto(xmin+(ssx*xrng2),ymid-res*yrng2);
  gfx_lineto(xmin+(ssx*xrng2)+yrng4+res*yrng4,ymax);
  gfx_lineto(xrng,ymax);
  gfx_a = 1;
  gfx_x = 25;
  gfx_y = ymax;
  gfx_lineto(xmin-mres*yrng4-yrng4+(msx*xrng2),ymax);
  gfx_lineto(xmin+(msx*xrng2),ymid-mres*yrng2);
  gfx_lineto(xmin+(msx*xrng2)+yrng4+mres*yrng4,ymax);
  gfx_lineto(xrng,ymax);
);

// Modulation Indicators
gfx_r = 1;
gfx_g = 0;
// Frequency
smodp == 0 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = 40;
gfx_drawstr("   Cutoff  ");
ccIn1msb <  0 ? gfx_drawstr("--"):
ccIn1msb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(ccIn1msb,0)):
gfx_drawnumber(ccIn1msb,0);
// Pulse width
smodp == 1 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = 55;
gfx_drawstr("Resonance  ");
ccIn2msb <  0 ? gfx_drawstr("--"):
ccIn2msb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(ccIn2msb,0)):
gfx_drawnumber(ccIn2msb,0);
