version: 0.4.1
desc:ReaRack2 - Nonlinearizer
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2018 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           License: LGPL - http://www.gnu.org/licenses/lgpl.html

changelog: Version 0.4.1 (9/05/2018) fxn  number updated.
           Version 0.4.0 (9/02/2018) Improved output CC values.
           Version 0.3.0 (8/02/2018) Fixed a bug which output incorrect CC values.
           Version 0.2.0 (8/02/2018) Added code to prevent multiple sends of unchanged CC values.
                                     Fixed a bug preventing messages being passed through when not processed.
           Version 0.1.0 (7/02/2018) Beta release.
           
slider1:sinput=0<0,64,1{Velocity,Pitch,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>Input
slider2:soutput=21<0,63,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Output
slider3:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Output Channel
slider5:scurve=0<0,1,1{Bezier curve,Step}>Curve type
slider7:sp0=0<0,1,0.001>-Range Limit 1
slider8:sp2=1<0,1,0.001>-Range Limit 2
slider10:sp1x=0.5<0,1>-Control X
slider11:sp1y=0.5<0,1>-Control Y
slider13:ends=0<0,3,1{Off,Hold upper and lower values,Hold upper value only,Hold lower value only}>-End Conditions
slider16:sclass=0<0,3,1{None,Master,Slave}>Class
slider17:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Class Group

options:gmem=ReaRack

in_pin:none
out_pin:none

@init
function mousetarget(mx,my,xrange,yrange)
(
  mouse_x >= mx - xrange/2 && mouse_x <= mx + xrange/2 && mouse_y >= my - yrange/2 && mouse_y <= my + yrange/2 ? 1:0;
);

fxn = 320;
prepx = 1;
pts = 500;
sp0x = sp0;
sp1xx = sp1x;
sp1yy = sp1y;
sp2x = sp2;

@slider

slidermove = 1;

@block

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = sinput;
  gmem[group+fxn+1] = soutput;
  gmem[group+fxn+2] = schanout;
  gmem[group+fxn+3] = scurve;
  gmem[group+fxn+4] = sp0;
  gmem[group+fxn+5] = sp2;
  gmem[group+fxn+6] = sp1x;
  gmem[group+fxn+7] = sp1y;
  gmem[group+fxn+8] = ends;
  gmem[group+fxn+9] = slidermove;
);

//Retrieve slider values (slave mode)
sclass == 2 ? ( 
  sinput  = gmem[group+fxn+0];
  soutput = gmem[group+fxn+1];
  schanout= gmem[group+fxn+2];
  scurve  = gmem[group+fxn+3];
  sp0     = gmem[group+fxn+4];
  sp2     = gmem[group+fxn+5];
  sp1x    = gmem[group+fxn+6];
  sp1y    = gmem[group+fxn+7];
  ends    = gmem[group+fxn+8];
);

sclass == 2 ? slidermove  = gmem[group+fxn+9];

slidermove == 1 ?
(
ccIn1msb = sinput <= 32 ? sinput-2:sinput+30;
ccIn1lsb = ccIn1msb + 32;
ccoutmsb = soutput <= 31 ? soutput:soutput+32;
ccoutlsb = ccoutmsb+32;
chanout  = schanout-1;

sp0 > sp2 ?
(p0 = sp2;p2 = sp0;):
(p0 = sp0;p2 = sp2;);

pt  = 0;
p1x = p0+sp1x*(p2-p0);
p1y = p0+sp1y*(p2-p0);

// Calculate Bezier curve and store points.
while(pt <= pts)
(
ptr = pt/pts;
pt[0]   = ((1-ptr)^2*p0)+(2*ptr*(1-ptr)*p1x)+(ptr^2*p2); //ptx
pt[pts+1] = ((1-ptr)^2*p0)+(2*ptr*(1-ptr)*p1y)+(ptr^2*p2); //pty
pt += 1;
);

slidermove = 0;
); // End if slidermove

while (midirecv(offsetin, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;
  // Pass through if message procesing not required.
  sinput <  2 && status == $xB0 ? midisend(offsetin, msg1, msg2, msg3);
  sinput >= 2 && status != $xB0 ? midisend(offsetin, msg1, msg2, msg3);
  // Is it a note on event?
  status == $x90 ?
  (
  // Get note
  sinput == 1 ?
    (
    x = msg2/127;
    );
  // Get velocity
  sinput == 0 ?
    (
    x = msg3/127;
    );
  );
  
  // Is it a note off event?
  status == $x80 ?
  (
  // Get note
  sinput == 1 ?
    (
    // Get note
    x = msg2/127;
    );
  );
  
  // Is it a controller event?
  status == $xB0 && sinput > 1 ?
  (
  // Is it the right CC for input 1?
   msg2 == ccIn1msb || msg2 == ccIn1lsb ?
    (
    msg2 == ccIn1msb ? ccvalmsb = msg3;
    msg2 == ccIn1lsb ? ccvallsb = msg3;
    x = (ccvalmsb/127.9921875)+(ccvallsb/16384);
    );
  // Pass through if directing remapped output to another CC.
  ccin1msb !=  ccoutmsb? midisend(offsetin, msg1, msg2, msg3);
  );

x <= p0 ?
  (
  ends == 1 || ends == 3 ? y = p0:y = x;
  ):
x <= p2 ?
(
scurve == 0 ?// Start Bezier Curve option loop.
  (
  // Interploate between bezier points.
  px = prepx;
  px < 1 ? px = 1;
  px > pts ? px = pts-1;
  px2v = px[0];
  px1v = (px-1)[0];
  x >= px2v ?
  (
  while(px2v <= x)
    (
    px += 1;
    px2v = px[0];
    );
  px1v = (px-1)[0];
  );
  x < px1v ?
  (
  while(px1v > x)
    (
    px -= 1;
    px1v = (px-1)[0];
    );
  px2v = px[0];
  );
  
  py1v = (px-1)[pts+1];
  py2v = px[pts+1];

  rx = (x-px1v)/(px2v-px1v);
  y = py1v+(rx*(py2v-py1v)); 
  prepx = px;
  ): // End Bezier Curve option
  (
  x < p1x? y = p0 : y = p2;
  );
):
x <= 1 ?
  (
  ends == 1 || ends == 2 ? y = p2:y = x;
  );
//);// End Clculate Y

// Send out remapped data
// Remapped CC
status == $xB0 && sinput >= 2 && msg2 == ccIn1msb || msg2 == ccIn1lsb ?
(
  ccnval = y * 127.9921875; 
  ccnvalmsb = floor(ccnval);
  ccnvallsb = floor((ccnval-ccnvalmsb)*128);
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      pre_ccnvalmsb != ccnvalmsb ? midisend(offsetout,$xB0+n,ccoutmsb,ccnvalmsb);
      pre_ccnvallsb != ccnvallsb ? midisend(offsetout,$xB0+n,ccoutlsb,ccnvallsb);
      n += 1;
      );
    ):
  pre_ccnvalmsb != ccnvalmsb ? midisend(offsetout,$xB0+chanout,ccoutmsb,ccnvalmsb);
  pre_ccnvallsb != ccnvallsb ? midisend(offsetout,$xB0+chanout,ccoutlsb,ccnvallsb);
  pre_ccnvalmsb = ccnvalmsb;
  pre_ccnvallsb = ccnvallsb;
);
// Remapped Velocity, note-on
status == $x90 && sinput == 0 ?
(
  nval = floor(y * 127 + 0.01); 
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      midisend(offsetout,$x90+n,msg2,nval);
      n += 1;
      );
    ):
  midisend(offsetout,$x90+chanout,msg2,nval);
);
// Remapped Velocity, note-off
status == $x80 && sinput == 0 ?
(
  nval = floor(y * 127 + 0.01); 
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      midisend(offsetout,$x90+n,msg2,msg3);
      n += 1;
      );
    ):
  midisend(offsetout,$x90+chanout,msg2,msg3);
);
// Remapped Note
status == $x80 || status == $x90  && sinput == 1 ?
(
  nval = floor(y * 127 + 0.01); 
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      midisend(offsetout,$x90+n,nval,msg3);
      n += 1;
      );
    ):
  midisend(offsetout,$x90+chanout,nval,msg3);
);
// End output loop
);

@gfx 400 400
xscl = 300;
xmin = 50;
xmax = xmin+xscl;
yscl = 300;
ymin = 50;
ymax = ymin+yscl;
pdx = (mouse_x-mouse_x_pre)/xscl;
pdy = (mouse_y-mouse_y_pre)/yscl;

align = gfx_getchar(97);

// Calculate control and end point positions.
gp1x = xmin + (p0*xscl)+(sp1x*(p2-p0)*xscl);
gp1y = ymax - (p0*yscl)-(sp1y*(p2-p0)*yscl);
gp0x = xmin + (p0*xscl);
gp0y = ymax - (p0*xscl);
gp2x = xmin + (p2*xscl);
gp2y = ymax - (p2*xscl);
gx = xmin + (x*xscl);
gy = ymax - (y*yscl);

// Get user input.

// Is the mouse in the p1 target area and is the mouse button down?
mousetarget(gp1x,gp1y,20,20) == 1 && mouse_cap == 1 && p0_on == 0 && p1_on == 0 && p2_on == 0?
(
p1_on = 1;
p1_time1 = p1_time2;
time_precise(p1_time2);
);

// Test for double click.
p1_time2 - p1_time1 > samplesblock/srate && p1_time2 - p1_time1 < 0.3 && p1_on == 1 && dclick == 0 ?
// If double click, reset the control point.
(
sp1x = sp1xx = 0.5;
sp1y = sp1yy = 0.5;
slidermove = 1;
p1_on = 0;
p1x_pre = sp1x;
p1y_pre = sp1y;
);

// If not a double click, move the control point.
p1_on == 1?
(
sp1xx += pdx;
sp1yy -= pdy;
align == 1 ?
(
dp1xx = sp1xx - p1x_pre;
dp1yy = sp1yy - p1y_pre;
abs(dp1xx) < abs(dp1yy) ? sp1xx = p1x_pre:sp1yy = p1y_pre;
);

sp1xx < 0 ? sp1xx = 0;
sp1xx > 1 ? sp1xx = 1;
sp1yy < 0 ? sp1yy = 0;
sp1yy > 1 ? sp1yy = 1;

sinput > 1 ?
(
sp1x = (floor(100*sp1xx))/100;
sp1y = (floor(100*sp1yy))/100;
):
(
sp1x = (floor(127*sp1xx))/127;
sp1y = (floor(127*sp1yy))/127;
);

slidermove = 1;
mouse_cap != 1 ?
  (
  p1_on = 0;
  p1x_pre = sp1x;
  p1y_pre = sp1y;
  );
);

// Is the mouse in the p0 target area and is the mouse button down?
mousetarget(gp0x,gp0y,20,20) == 1 && mouse_cap == 1 && p0_on == 0 && p1_on == 0 && p2_on == 0 ?
(
p0_on = 1;
p0_time1 = p0_time2;
time_precise(p0_time2);
);

// Test for double click.
p0_time2 - p0_time1 > samplesblock/srate && p0_time2 - p0_time1 < 0.3 && p0_on == 1 && dclick == 0 ?
// If double click, toggle the end state.
(
ends == 0 ? ends = 3:
ends == 1 ? ends = 2:
ends == 2 ? ends = 1:
ends == 3 ? ends = 0;
slidermove = 1;
dclick = 1;
p0_on = 0;
);

// If not a double-click, move limit point 0.
p0_on == 1 ?
(
sp0x += pdx;
sp0x < 0 ? sp0x = 0;
sp0x > 1 ? sp0x = 1;
sp0 = sp0x;
slidermove = 1;
mouse_cap != 1 ?
  (
  p0_on = 0;
  );
);

// Is the mouse in the p2 target area and is the mouse button down?
mousetarget(gp2x,gp2y,20,20) == 1 && mouse_cap == 1 && p0_on == 0 && p1_on == 0 && p2_on == 0 ?
(
p2_on = 1;
p2_time1 = p2_time2;
time_precise(p2_time2);
);

// Test for double click.
p2_time2 - p2_time1 > samplesblock/srate && p2_time2 - p2_time1 < 0.3 && p2_on == 1 && dclick == 0 ?
// If double click, toggle the end state.
(
ends == 0 ? ends = 2:
ends == 1 ? ends = 3:
ends == 2 ? ends = 0:
ends == 3 ? ends = 1;
slidermove = 1;
dclick = 1;
p2_on = 0;
);

// If not a double-click, move limit point 2.
p2_on == 1?
(
sp2x += pdx;
sp2x < 0 ? sp2x = 0;
sp2x > 1 ? sp2x = 1;
sp2 = sp2x;
slidermove = 1;
mouse_cap != 1 ?
  (
  p2_on = 0;
  );
);
mouse_cap != 1 ? dclick = 0;
// End get user input.

// Draw graphics.

// Dynamic input/output lines.
gfx_r = 0.5;
gfx_g = 0.5;
gfx_b = 0.5;
gfx_x = gx;
gfx_y = ymin-25;
gfx_lineto(gx,ymin-13);
gfx_lineto(gx+3,ymin-13);
gfx_lineto(gx,ymin);
gfx_lineto(gx-3,ymin-13);
gfx_lineto(gx,ymin-13);
gfx_x = gx;
gfx_y = ymin;
gfx_lineto(gx,gy);
gfx_lineto(xmax+12,gy);
gfx_lineto(xmax+12,gy-3);
gfx_lineto(xmax+25,gy);
gfx_lineto(xmax+12,gy+3);
gfx_lineto(xmax+12,gy);

// Boundary
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmin,ymax);
gfx_lineto(xmax,ymax);
gfx_lineto(xmax,ymin);
gfx_lineto(xmin,ymin);

// Orthogonal alignment lines
align == 1 ?
(
gfx_x = xmin + (p0*xscl)+(p1x_pre*(p2-p0)*xscl);
gfx_y = ymax;
gfx_lineto(gfx_x,ymin);
gfx_x = xmin;
gfx_y = ymax - (p0*yscl)-(p1y_pre*(p2-p0)*yscl);
gfx_lineto(xmax,gfx_y);
);

// Axis labels
gfx_x = xmin+(xscl/2)-20;
//gfx_x = gx - 8;
gfx_y = ymin-35;
gfx_drawstr("Input"); // Input label
gfx_x = xmax+26;
gfx_y = ymin+(yscl/2)+2;
//gfx_y = gy - 3;
gfx_drawstr("Output"); // Output label

// Lower end
gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
ends == 0 || ends == 2 ?
(
gfx_x = xmin;
gfx_y = ymax;
):
(
gfx_x = xmin;
gfx_y = gp0y;
);
gfx_lineto(gp0x,gp0y);
// Bezier curve
scurve == 0 ?
(
  gpt = 0;
  while (gpt <= pts)
  (
  gfx_lineto(xmin+gpt[0]*xscl,ymax-gpt[pts+1]*yscl);
  gpt += 1;
  );
  // Bezier frame lines.
  gfx_r = 0.5;
  gfx_g = 0.5;
  gfx_b = 0.5;
  gfx_x = gp0x;
  gfx_y = gp0y;
  gfx_lineto(gp1x,gp1y);
  gfx_lineto(gp2x,gp2y);
):
(
gfx_lineto(gp1x,gp0y);
gfx_lineto(gp1x,gp2y);
gfx_lineto(gp2x,gp2y);
);
gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
// Upper end
ends == 0 || ends == 3 ?
gfx_lineto(xmax,ymin):
gfx_lineto(xmax,gp2y);

// Bezier frame mid control point
gfx_circle(gp1x,gp1y,4,1,1);

// Bezier frame end control points
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_circle(gp0x,gp0y,4,1,1);
gfx_circle(gp2x,gp2y,4,1,1);

sinput > 1 ?
(
gfx_x = gp0x-40;
gfx_y = gp0y-10;
gfx_drawnumber(p0,2); // x value of p0 - CC
gfx_x = gp2x+10;
gfx_y = gp2y+4;
gfx_drawnumber(p2,2); // x value of p2 - CC
p1x < p1y ?
  (
  gfx_x = gp1x-40;
  gfx_y = gp1y-10;
  gfx_drawnumber(p1x,2); // x value of p1 above line - CC
  ):
  (
  gfx_x = gp1x+10;
  gfx_y = gp1y+4;
  gfx_drawnumber(p1x,2); // x value of p1 below line - CC
  );
):
(
gfx_x = gp0x-30;
gfx_y = gp0y-10;
gfx_drawnumber(p0*127,0); // x value of p0 - Note
gfx_x = gp2x+10;
gfx_y = gp2y+4;
gfx_drawnumber(p2*127,0); // x value of p2 - Note

p1x < p1y ?
  (
  gfx_x = gp1x-30;
  gfx_y = gp1y-10;
  gfx_drawnumber(p1x*127,0); // x value of p1 above line - Note
  ):
  (
  gfx_x = gp1x+10;
  gfx_y = gp1y+4;
  gfx_drawnumber(p1x*127,0); // x value of p1 below line - Note
  );
);
gfx_x = xmin-10;
gfx_y = ymax+4;
gfx_drawnumber(0,0); // Origin point
sinput > 1 ?
(
gfx_x = xmax+4;
gfx_y = ymin-10;
gfx_drawnumber(1,0); // Output max - CC
):
(
gfx_x = xmax+4;
gfx_y = ymin-10;
gfx_drawnumber(127,0); // Output max - Note
);
// Record base point for point adjustment
mouse_x_pre = mouse_x;
mouse_y_pre = mouse_y;
