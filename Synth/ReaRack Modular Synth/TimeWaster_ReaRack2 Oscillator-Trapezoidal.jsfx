version: 2.0.5
desc:ReaRack2 - Oscillator-Trapezoidal
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           License: LGPL - http://www.gnu.org/licenses/lgpl.html
         
about:     Audio oscillator module for the ReaRack modular JSFX synth system.
           Waveform defined by moving line segments to form variable trapezoid.
           rudimentary band limiting is achieved by limiting the maximum slope
           of vertical line segements and the minimum length of horizontal line segments,
           dependant on frequency.

changelog: Version 2.0.5 (08/03/2019) Fixed FM function.
           Version 2.0.4 (18/02/2018) Added pitch bend input for pitch change.
                                      Added pitch modulation depth slider.
           Version 2.0.3 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.2 (10/12/2017) Initial version 2 release.

slider1:smodp=0<0,3,1{Pitch,Shape,Width,Rake}>Modulation Target
slider2:sccIn=0<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider3:mrange=1<0,1,0.001>Modulation Range
// Choose your preferred note naming convention:
//slider5:0<0,128,1{MIDI note,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Pitch
slider5:spitch=0<0,128,1{MIDI note,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Pitch
//slider5:0<0,128,1{MIDI note,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Pitch
slider6:sharm=0<1,16,1{1 (fundamental),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Harmonic
slider7:soct=0<-4,4,1>Tune (octave)
slider8:ssemi=0<-12,12,1>Tune (semitone)
slider9:scent=0<-100,100,1>Fine Tune (cents)
slider10:sportaval=0<0,3>Portamento (sec)
slider11:spmod=0<-1,1,0.001>Pitch Modulation Centre
slider12:sprange=1<0,4,0.01>Master Pitch Mod. Range (octaves)
slider14:sshape1=0.5<0,1,0.001>SHAPE
slider15:swidth1=0.5<0,1,0.001>WIDTH
slider16:srake1=0.5<0,1,0.001>RAKE
slider18:smodaudio=0<0,3,1{Off,Frequency Modulation,Ring Modulation,Amplitude Modulation}>Audio Modulation
slider20:svol=0<-60,0,1>Output Level (dB)
slider22:sclass=0<0,3,1{None,Master,Slave}>Class
slider23:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group
// Hidden sliders
slider31:pitchccmsb=-1<-1,128,1>-
slider32:shapeccmsb=-1<-1,128,1>-
slider33:widthccmsb=-1<-1,128,1>-
slider34:rakeccmsb=-1<-1,128,1>-
slider35:pitchm=1<0,1,0.001>-
slider36:shapem=1<0,1,0.001>-
slider37:widthm=1<0,1,0.001>-
slider38:rakem=1<0,1,0.001>-

options:gmem=ReaRack

@init
fxn = 0;
pitchcclsb = pitchccmsb+32;
shapecclsb = shapeccmsb+32;
widthcclsb = widthccmsb+32;
rakecclsb = rakeccmsb+32;

tau = $pi*2.0;
adj = tau*440/srate;
pitchmadj = 1;
pitchbadj = 1;
blkadj = tau*440/srate;
volcount = ceil(srate/100);
freq = 440;

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+22];

slidermove == 1 ?
(
// Update modulation input slider to previously set input CC value on target selection.
smodp == 0 && ccInnum != 0 ? (         //Pitch
sccIn = pitchccmsb <= 31 ? pitchccmsb+1:pitchccmsb - 31; 
mrange = pitchm;
);
smodp == 1 && ccInnum != 1 ? (         //Shape
sccIn = shapeccmsb <= 31 ? shapeccmsb+1:shapeccmsb - 31; 
mrange = shapem;
);
smodp == 2 && ccInnum != 2 ? (         //Width
sccIn = widthccmsb <= 31 ? widthccmsb+1:widthccmsb - 31; 
mrange = widthm;
);
smodp == 3 && ccInnum != 3 ? (         //Rake
sccIn = rakeccmsb <= 31 ? rakeccmsb+1:rakeccmsb - 31; 
mrange = rakem;
);
/////////////////////////Get slider values//////////////////////////
smodp == 0 ? (         //Pitch
pitchccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
pitchcclsb = pitchccmsb+32;
pitchm = mrange;
ccInnum = 0;
);
smodp == 1 ? (         //Shape
shapeccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
shapecclsb = shapeccmsb+32;
shapem = mrange;
ccInnum = 1;
);
smodp == 2 ? (          //Width
widthccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
widthcclsb = widthccmsb+32;
widthm = mrange;
ccInnum = 2;
);
smodp == 3 ? (         //Rake
rakeccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
rakecclsb = rakeccmsb+32;
rakem = mrange;
ccInnum = 3;
);

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = svol;
  gmem[group+fxn+1] = sshape1;
  gmem[group+fxn+2] = sshapemodr;
  gmem[group+fxn+3] = swidth1;
  gmem[group+fxn+4] = swidthmodr;
  gmem[group+fxn+5] = srake1;
  gmem[group+fxn+6] = srakemodr;
  gmem[group+fxn+7] = sharm;
  gmem[group+fxn+8] = soct;
  gmem[group+fxn+9] = ssemi;
  gmem[group+fxn+10] = scent;
  gmem[group+fxn+11] = sportaval;
  gmem[group+fxn+12] = spmod;
  gmem[group+fxn+13] = spmodr;
  gmem[group+fxn+14] = smodaudio;
  gmem[group+fxn+15] = pitchm;
  gmem[group+fxn+16] = shapem;
  gmem[group+fxn+17] = widthm;
  gmem[group+fxn+18] = rakem;
  gmem[group+fxn+19] = smodp;
  gmem[group+fxn+20] = sccIn;
  gmem[group+fxn+21] = mrange;
  gmem[group+fxn+22] = slidermove;
  gmem[group+fxn+23] = spitch;
  gmem[group+fxn+24] = sprange;
);

// Retrieve slider values
sclass == 2 ? ( 
  svol       = gmem[group+fxn+0];
  sshape1    = gmem[group+fxn+1];
  sshapemodr = gmem[group+fxn+2];
  swidth1    = gmem[group+fxn+3];
  swidthmodr = gmem[group+fxn+4];
  srake1     = gmem[group+fxn+5];
  srakemodr  = gmem[group+fxn+6];
  sharm      = gmem[group+fxn+7];
  soct       = gmem[group+fxn+8];
  ssemi      = gmem[group+fxn+9];
  scent      = gmem[group+fxn+10];
  sportaval  = gmem[group+fxn+11];
  spmod      = gmem[group+fxn+12];
  spmodr     = gmem[group+fxn+13];
  smodaudio  = gmem[group+fxn+14];
  pitchm     = gmem[group+fxn+15];
  shapem     = gmem[group+fxn+16];
  widthm     = gmem[group+fxn+17];
  rakem      = gmem[group+fxn+18];
  smodp      = gmem[group+fxn+19];
  sccIn      = gmem[group+fxn+20];
  mrange     = gmem[group+fxn+21];
  spitch     = gmem[group+fxn+23];
  sprange    = gmem[group+fxn+24];
);  

pitch = spitch-1;
voltarget = 2^(svol/6);
gvol = (1+(svol/60));
shape1 = sshape1/4;
shapemodr = shapem/4;
width1 = ((2*swidth1)-1)/4;
widthmodr = ((2*widthm)-1)/4;
rake1 = ((2*srake1)-1)/4;
rakemodr = ((2*rakem)-1)/4;
harm = sharm+1;
detune = 2^(soct + ssemi/12 + scent/1200);
portaval = sportaval;
modetune = 2^(spmod/127);
modcentre = spmod;
modlev = pitchm;
modaudio = smodaudio;
volstep = (voltarget-prevol)/volcount;
volstepcount = volcount;
shape = shape1 * (1-abs(4*width));
/////////////////////////Portamento/////////////////////////
portastep = floor(max(1,((srate/samplesblock)*portaval)));

slidermove = 0;
); // end if slidermove

/////////////////////////Get MIDI inputs/////////////////
// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90 && pitch == -1 ?
      (
       // Get note and velocity
       note = msg2 & $x7F;
       //velocity = msg3;
       // Note on
       freq = 2^((note-69)/12)*440*harm*detune;
       blkadjtarget = freq/srate;
      //End of Get note and velocity
      );
////////////////////////Get modulation CC messages//////// 
  // Extract message type and channel
     status == $xB0 ?
      (
      // Pitch Modulation
      // Is it the right CC?
        msg2 == pitchccmsb || msg == pitchcclsb ?
         (
          msg2 == pitchccmsb ? modvalmsb = msg3;
          msg2 == pitchcclsb ? modvallsb = msg3;
          modval = ((modvalmsb/(127.9921875/2))+(modvallsb/8192)) - (1+modcentre);
          modlevel = (modval * modlev);
          pitchmadj = 2^(modlevel*sprange);
          );
        // Shape Modulation
        // Is it the right CC?
        msg2 == shapeccmsb || msg == shapecclsb ?
         (
          msg2 == shapeccmsb ? shapevalmsb = msg3;
          msg2 == shapecclsb ? shapevallsb = msg3;
          shapeval = (shapevalmsb/127.9921875)+(shapevallsb/16384);
          shapemod = shapeval * (shapemodr - shape1);
          );
        // Width Modulation
        // Is it the right CC?
        msg2 == widthccmsb || msg == widthcclsb ?
         (
          msg2 == widthccmsb ? widthvalmsb = msg3;
          msg2 == widthcclsb ? widthvallsb = msg3;
          widthval = (widthvalmsb/127.9921875)+(widthvallsb/16384);
          widthmod = widthval * (widthmodr - width1);
          );
        // Rake Modulation
        // Is it the right CC?
        msg2 == rakeccmsb || msg == rakecclsb ?
         (
          msg2 == rakeccmsb ? rakevalmsb = msg3;
          msg2 == rakecclsb ? rakevallsb = msg3;
          rakeval = (rakevalmsb/127.9921875)+(rakevallsb/16384);
          rakemod = rakeval * (rakemodr - rake1);
          );
      );
      
      status == $xE0 ?
      (
       // Pitch Bend
       pitchbend_val = (msg2/8192)+(msg3/(64))-1;
       pitchbadj = 2^(pitchbend_val*sprange);
      );
      
    // Pass through
    midisend(offset, msg1, msg2, msg3);
);
// Adjust for portamento if required
adjstep = (blkadjtarget - blkadj)/portastep;
blkadj != blkadjtarget ? ( blkadj += adjstep);
/////////////////////////Slider pitch control//////////////
pitch > -1 ? (
  freq = 2^((pitch-69)/12)*440*harm*detune;
  blkadj = freq/srate;
);
/////////Zero modulation values if no input//////////////
pitchccmsb == -1 ?
  (
  pitchmadj = 1;
  modlevel = 0;
  );
shapeccmsb == -1 ? shapemod = 0;
widthccmsb == -1 ? widthmod = 0;
rakeccmsb == -1 ? rakemod = 0;

@sample
adj = blkadj;
////////Update modulated input values///////////////////
shape2 = shape1 + shapemod;
rake2 = rake1 + rakemod;
width2 = width1 + widthmod;

////////Calclate trapezoidal wave points////////////////
nratio = (freq+freq)/srate;
//nratio = freq/20000;
widthmin = (nratio/2);
0.25-abs(width2) < widthmin ? width = sign(width2)*(0.25-widthmin):
width = width2;
shapemin = nratio/3;
shapemax = max(shapemin,0.25-abs(width)-shapemin);
shape2 < shapemin ? shape = shapemin:
shape2 > shapemax ? shape = shapemax:
shape = shape2;
rakemax = max(0,shape-shapemin);
abs(rake2) > rakemax ? rake = -sign(rake2)*rakemax:
rake = -rake2;

////////////////////// Draw waveform //////////////////////////
px1 = width;
px2 = (shape + rake);
px3 = (shape - rake);
p1 = 0 - px1;    // y = 0
p0 = p1 - px2;   // y = -1
p2 = p1 + px2;   // y = 1
p4 = 0.5 + px1;  // y = 0
p3 = p4 - px3;   // y = 1
p5 = p4 + px3;   // y = -1
p7 = 1 - px1;    // y = 0
p6 = p7 - px2;   // y = -1
p8 = p7 + px2;   // y = 1

/////////////////////////Volume change smoothing////////////////
vol != voltarget ?
(
  volstepcount >=0 ?
   (
    vol += volstep;
    volstepcount -= 1;
    ):(
    vol = voltarget; // Just to be sure!
    );
);

/////////////////////////////FM/////////////////////////////////
modaudio == 1 ? (
  inlev = (spl0+spl1)/2;
  adj *= (1+inlev)*10;
  );
  
////////////////////////////Define waveforms////////////////////
pos <= p0 ? sample = -1:
pos <= p2 ? sample = (pos - p1)/(p2-p1):
pos <= p3 ? sample = 1:
pos <= p5 ? sample = (p4 - pos)/(p5-p4):
pos <= p6 ? sample = -1:
pos <= p8 ? sample = (pos - p7)/(p8-p7):
pos >  p8 ? sample = 1;

/////////////////////////Audio output//////////////////////////////
freq < (srate/2.1) ? (
sample *= vol;
  modaudio == 0 ? (          //Unmodulated waveform
     spl0 = sample+spl0;
     spl1 = sample+spl1;
     )
     :
     (
    modaudio == 2 ? (        //Ring Modulation
     spl0 = (sample*spl0);
     spl1 = (sample*spl1);
        )
        :
        (
         modaudio == 3 ? (   //Amplitude Modulation
         spl0 = ((0.5+(sample/2))*spl0);
         spl1 = ((0.5+(sample/2))*spl1);           
          )
          :
          (                  //Frequency Modulation    
          spl0 = sample;
          spl1 = sample;
         );
      );
   );      
) : ( 
spl0 = spl0;
spl1 = spl1;
);

//////////Buffer results for graphics////////////////////////////
looplen = srate/8;
bufflen = floor(looplen);
  bpos<=bufflen ? (
    bpos[0] = pos;
    modaudio == 0 ? (bpos+bufflen)[0] = sample:(bpos+bufflen)[0] = (spl0+spl1)/2;
    (bpos+bufflen+bufflen)[0] = vol;
    );
  
buffcount+=1;
buffcount > looplen ? (
  buffcount-=looplen;
  );
bpos=floor(buffcount);

////////Increment phase position///////////
pos += (adj*pitchmadj*pitchbadj);
pos >= 1 ? pos -= 1;
prevol = vol;

/////////////////////////////////graphics//////////////////////////////////////
@gfx 400 200
//gfx_setfont(1,"Arial",14,'b');
xmin = 25;
xrng = 150;
xmax = xmin+xrng;
ymin = 25;
yrng = 100;
ymax = ymin+yrng;
ymid = ymin+yrng/2;
mxmin = xmax+130;
mxrng = 100;
myrng = 6;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;

gpos = 1;
gfx_x = xmin;
gfx_y = ymid;
while (gpos <= bufflen)(
  gfx_x = xmin+xrng*gpos[0];
  gfx_y = ymid+(yrng/2)*(gvol/(gpos+bufflen+bufflen)[0])*(gpos+bufflen)[0];
  gfx_setpixel(0,1,0);
  gpos+=1;
);
// Text
gfx_r=1;
gfx_b=1;
gfx_g=1;
gfx_a=0.7;
gfx_x=67;
gfx_y=8;
gfx_drawstr("Waveform");
gfx_x=mxmin-40;
gfx_y=8;
gfx_drawstr("Modulation");
gfx_x=mxmin-98;
gfx_y=23;
gfx_drawstr("Target  CC      Level");
gfx_x=5;
gfx_y=ymax+10;
gfx_drawstr("Base Frequency  = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");
pitchccmsb > -1 || pitchbadj != 1 ?
(
gfx_x=5;
gfx_y=ymax+25;
gfx_lineto(gfx_x, gfx_y,0);
gfx_drawstr("Modulated Freq. = ");
gfx_drawnumber(freq*pitchmadj*pitchbadj,0);
gfx_drawstr(" Hz");
);
// Linework
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmax,ymin);
gfx_x = xmin;
gfx_y = ymid;
gfx_lineto(xmax,ymid);
gfx_x = xmin;
gfx_y = ymax;
gfx_lineto(xmax,ymax);
gfx_a =1;
gfx_x = xmin-12;
gfx_y = ymin-5;
gfx_drawstr("1");
gfx_x = xmin-12;
gfx_y = ymid-5;
gfx_drawstr("0");
gfx_x = xmin-20;
gfx_y = ymax-5;
gfx_drawstr("-1");

// Modulation Indicators
// Pitch
smodp == 0 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-90;
gfx_y = ymin+15;
gfx_drawstr("Pitch  ");
pitchccmsb <  0 ? gfx_drawstr("--"):
pitchccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(pitchccmsb,0)):
gfx_drawnumber(pitchccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+15;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+(1+modcentre)*(mxrng/2);
gfx_y = ymin+15+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(gfx_x+(modlevel*(mxrng/2)),gfx_y+4);
// Shape
gfx_r = 1;
gfx_g = 0;
smodp == 1 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-90;
gfx_y = ymin+35;
gfx_drawstr("Shape  ");
shapeccmsb <  0 ? gfx_drawstr("--"):
shapeccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(shapeccmsb,0)):
gfx_drawnumber(shapeccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+35;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+4*shape1*mxrng;
gfx_y = ymin+35+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(gfx_x+4*shapemod*mxrng,gfx_y+4);
// Width
gfx_r = 1;
gfx_g = 0;
smodp == 2 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-90;
gfx_y = ymin+55;
gfx_drawstr("Width  ");
widthccmsb <  0 ? gfx_drawstr("--"):
widthccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(widthccmsb,0)):
gfx_drawnumber(widthccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+55;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+2*(0.25+width1)*mxrng;
gfx_y = ymin+55+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(gfx_x+2*(widthmod)*mxrng,gfx_y+4);
// Rake
gfx_r = 1;
gfx_g = 0;
smodp == 3 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-90;
gfx_y = ymin+75;
gfx_drawstr(" Rake  ");
rakeccmsb <  0 ? gfx_drawstr("--"):
rakeccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(rakeccmsb,0)):
gfx_drawnumber(rakeccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+75;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+2*(0.25+rake1)*mxrng;
gfx_y = ymin+75+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(gfx_x+2*(rakemod)*mxrng,gfx_y+4);

