version: 2.0.1
desc:ReaRack2 - Sample and Hold
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           License: LGPL - http://www.gnu.org/licenses/lgpl.html
        
about:  MIDI CC sample and hold, triggered by a MIDI note on event.

changelog: Version 2.0.1 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.0 (15/12/2016) Initial release as a ReaRack2 module.
      

slider1:sccin=25<0,63,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider2:sccout=25<0,63,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Output
slider3:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Ouput Channel
// Choose your preferred note naming convention:
//slider5:stnote=0<0,128,1{All,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Trigger on Note:
slider5:stnote=0<0,128,1{All,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Trigger on Note:
//slider5:stnote=0<0,128,1{All,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Trigger on Note:
slider6:stvel=0<0,2,1{All,less than,greater than,equal to}>Trigger on Velocity:
slider7:stvelval=127<0,127,1>Velocity Filter Value
slider9:sclass=0<0,3,1{None,Master,Slave}>Class
slider10:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

options:gmem=ReaRack

in_pin:none
out_pin:none

@init

fxn = 230;

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+6];

slidermove == 1 ?
(
ccinmsb = sccin <= 31 ? sccin:sccin + 32;
ccinlsb = ccinmsb+32;
ccoutmsb = sccout <= 31 ? sccout:sccout + 32;
ccoutlsb = ccoutmsb+32;
chanout = schanout;

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = stnote;
  gmem[group+fxn+1] = stvel;
  gmem[group+fxn+2] = stvelval;
  gmem[group+fxn+3] = sccIn;
  gmem[group+fxn+4] = sccout;
  gmem[group+fxn+5] = schanout;
  gmem[group+fxn+6] = slidermove;
);

// Retrieve slider values
sclass == 2 ? ( 
  stnote   = gmem[group+fxn+0];
  stvel    = gmem[group+fxn+1];
  stvelval = gmem[group+fxn+2];
  sccIn    = gmem[group+fxn+3];
  sccout   = gmem[group+fxn+4];
  schanout = gmem[group+fxn+5];
);

tnote = stnote-1;
tvel = stvel;
tvelval = stvelval;

modstatus = $xB0|chanout;

slidermove = 0;
); // end if slidermove

while (midirecv(offset, msg1, msg2, msg3))
(  
// Extract message type and channel
status = msg1 & $xF0;

status != $x90 && status != $xB0 ?
(
// Pass through
  midisend(offset, msg1, msg2, msg3);
):
  
 // Is it a CC event?
    status == $xB0 ?
    msg2 != ccinmsb ? midisend(offset, msg1, msg2, msg3);
    (
    // Is it the right CC?
    msg2 == ccinmsb ?
      (
      ccvalmsb = msg3;
      ccoutmsb != ccinmsb ? midisend(offset, msg1, msg2, msg3);
      );
    msg2 == ccinlsb ?
      (
      ccvallsb = msg3;
      ccoutlsb != ccinlsb ? midisend(offset, msg1, msg2, msg3);
      );
    ccval = ((ccvalmsb/127.9921875)+(ccvallsb/16384));
    ); 
  
  
  // Is it a note on event?
  status == $x90 ?
    (
    // Pass through
    midisend(offset, msg1, msg2, msg3);
    tvel == 0 ?
      (
      tnote > -1 ?
        (
        tnote == msg2 ? trig = 1;
        ):trig = 1;
      ):
      tvel == 1 ?
        (
        msg3 < tvelval ?
          (
          tnote > -1 ?
            (
            tnote == msg2 ? trig = 1;
            ):trig = 1;
          );
        ):
      tvel == 2 ?
        (
        msg3 > tvelval ?
          (
          tnote > -1 ?
            (
            tnote == msg2 ? trig = 1;
            ):trig = 1;
          );
        ):
      tvel == 3 ?
        (
        msg3 == tvelval ?
          (
          tnote > -1 ?
            (
            tnote == msg2 ? trig = 1;
            ):trig = 1;
          );
        );
        
    trig == 1 ?
      (
      midisend(offset, modstatus, ccoutmsb, ccvalmsb);
      midisend(offset, modstatus, ccoutlsb, ccvallsb);
      ccsent = ccval;
      trig = 0;
      );      
  );
// Pass through
//midisend(offsetin, msg1, msg2, msg3);
);
            
@gfx 400 180
gccval = ccval;
gccsent = ccsent;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;
////////////////////input meter///////////////////
gfx_x=50;
gfx_y=25+127;
gfx_lineto(50,(25+127)-gccval*127);
gfx_lineto(60,(25+127)-gccval*127);
gfx_lineto(60,(25+127));
////////////////////output meter///////////////////
gfx_x=150;
gfx_y=25+127;
gfx_lineto(150,(25+127)-gccsent*127);
gfx_lineto(160,(25+127)-gccsent*127);
gfx_lineto(160,(25+127));
////////////////////////level lines/////////////////
gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = 25;
gfx_y = 25;
gfx_lineto(25+(150),25);
gfx_x = 25;
gfx_y = 25+127;
gfx_lineto(25+(150),25+127);
////////////////////////text////////////////////////
gfx_a =1;
gfx_x = 25+155;
gfx_y = 20;
gfx_drawstr("1");
gfx_x = 25+155;
gfx_y = 20+127;
gfx_drawstr("0");
gfx_r = 1;
gfx_g = 1;
gfx_b = 1;
gfx_a = 0.7;
gfx_x = 35;
gfx_y = 30+127;
gfx_drawstr("Input       Output");

