version: 2.0.1
desc:ReaRack2 - Audio<-->MIDI
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Audio <> MIDI CC converter.

changelog: Version 2.0.1 (11/02/2018) Improved accuracy of CC encoding/decoding.
           Version 2.0.0 (10/12/2017) Initial version 2 release.

slider1:sccin=0<0,64,1{Audio,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>Audio or CC Input
slider3:sccout=21<0,63,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Output
slider4:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Ouput Channel
slider6:atype=0<0,1,1{Audio Envelope,Audio Waveform}>CC Signal Shape
slider7:gate=0<0,1,0.001>Gate Threshold
slider8:swin=50<0,50,1>Window Size (milliseconds)
slider10:gain=1<0,10,0.001>Gain
slider12:sclass=0<0,3,1{None,Master,Slave}>Class
slider13:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

@init
fxn = 280;
gmaxcount = ceil(srate/300);
xrng = 300;
y = 0;

@slider
ccinmsb = sccin <= 32 ? sccin-1:sccin + 31;
ccinlsb = ccinmsb + 32;

ccoutmsb = sccout <= 31 ? sccout:sccout + 32;
ccoutlsb = ccoutmsb + 32;

chanout = schanout-1;

win = ceil(max(1,(srate*(swin/1000))));

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+7];

slidermove == 1 ?
(
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = sccin;
  gmem[group+fxn+1] = sccout;
  gmem[group+fxn+2] = schanout;
  gmem[group+fxn+3] = atype;
  gmem[group+fxn+4] = gate;
  gmem[group+fxn+5] = swin;
  gmem[group+fxn+6] = gain;
  gmem[group+fxn+7] = slidermove;
);

// Retrieve slider values
sclass == 2 ? ( 
  sccin    = gmem[group+fxn+0];
  sccout   = gmem[group+fxn+1];
  schanout = gmem[group+fxn+2];
  atype    = gmem[group+fxn+3];
  gate     = gmem[group+fxn+4];
  swin     = gmem[group+fxn+5];
  gain     = gmem[group+fxn+6];
);

slidermove = 0;
); // end if slidermove

// Clear MIDI message buffer
m = 0;
loop(samplesblock,
m[0] = -1;
m[samplesblock] = -1;
m += 1;
);

////////////////////////Get modulation CC messages////////
while (midirecv(offsetin, msg1, msg2, msg3))
( 
  // Extract message type and channel
  status = msg1 & $xF0;
  // Extract message type and channel
     status == $xB0 ?
      (
      msg2 == ccinmsb ? offsetin[0] = msg3;
      msg2 == ccinlsb ? offsetin[samplesblock] = msg3;
      );
    // Pass through
    midisend(offsetin, msg1, msg2, msg3);
); 
offsetout = 0;

@sample

//Audio in, MIDI out
sccin == 0 ?
(
sy = min((spl0+spl1)/2,1);
sy = max(sy,-1);
sy ==  -0 ? sy = 0;
//say = abs(sy);
atype == 0 ?
  // Output Envelope
  (
  smax = max(sy,premax);
  smin = min(sy,premin);
  premax = smax;
  premin = smin;
  wincount += 1;
  wincount >= win2 ?
  (
  y1 = (smax+abs(smin))/2;
  win2 = win;
  wincount = 0;
  smax = 0;
  smin = 0;
  premax = 0;
  premin = 0;
  ystep = (y1 - py1)/win;
  py1 = y1;
  );
  y2 += ystep;
  
  ):
  //Output Waveform
  y2 = ((1+sy)/2)*gain;
  
  //Final output
  y = y2*gain;
  
  // Buffer values for graphics
  gcount += 1;
  gcount > gmaxcount ?
  (
  gcount = 0;
  sgcount[samplesblock+samplesblock] = y;
  sgcount+= 1;
  sgcount > xrng ? sgcount = 0;
  );
  
  //Send CC message
  ccval = 127.9921875 * y;
  ccvalmsb = floor(ccval);
  ccvallsb = floor(128*(ccval-ccvalmsb));
    
  chanout == -1 ?
  (
  n = 0;
  loop(16,
  preccvalmsb != ccvalmsb ? midisend(offsetout,$xB0+n,ccoutmsb,ccvalmsb); // Only send messages if values have changed
  preccvallsb != ccvallsb ? midisend(offsetout,$xB0+n,ccoutlsb,ccvallsb);
  n += 1;
  );
  ):(
  preccvalmsb != ccvalmsb ? midisend(offsetout,$xB0+chanout,ccoutmsb,ccvalmsb);
  preccvallsb != ccvallsb ? midisend(offsetout,$xB0+chanout,ccoutlsb,ccvallsb);
  );
   /////////////// Store previous values ////////////    
  preccvalmsb = ccvalmsb;
  preccvallsb = ccvallsb;
  
  spl0=spl0;
  spl1=spl1;
  
):
//MIDI in, audio out
(
ymsb = offsetout[0] > -1 ? offsetout[0]:ymsb;
ylsb = offsetout[samplesblock] > -1 ? offsetout[samplesblock]:ylsb;
ya = ((ymsb/(127.9921875/2))+(ylsb/8192))-1;

spl0=ya*gain;
spl1=spl0;

  // Buffer values for graphics
  gcount += 1;
  gcount > gmaxcount ?
  (
  gcount = 0;
  sgcount[samplesblock+samplesblock] = ya;
  sgcount+= 1;
  sgcount > xrng ? sgcount = 0;
  );
);

offsetout +=1;

@gfx

xmin = 25;
xmax = xmin + xrng;
ymin = 25;
yrng = 80;
ymax = ymin + yrng;

gspl = sgcount;
gx = 0;
while (gx <= xrng)
  (
  gfx_x = xmin + gx;
  gfx_y = ymax - (yrng * gspl[samplesblock+samplesblock]);
  gfx_setpixel(0,1,0);
  gx += 1;
  gspl += 1;
  gspl > xrng ? gspl = 0;
  );
// Level lines
gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmax,ymin);
gfx_x = xmin;
gfx_y = ymax;
gfx_lineto(xmax,ymax);
sccin > 0 ?
(
gfx_x = xmin;
gfx_y = ymax+yrng;
gfx_lineto(xmax,ymax+yrng);
);

// Text
// Frame
gfx_a = 1;
gfx_x = xmin-12;
gfx_y = ymin-5;
gfx_drawstr("1");
gfx_x = xmin-12;
gfx_y = ymax-5;
gfx_drawstr("0");
sccin > 0 ?
(
gfx_x = xmin-20;
gfx_y = ymax+yrng-5;
gfx_drawstr("-1");
);



