version: 1.0.3
desc:ReaRack - Oscillator-Trapezoidal
noindex: true
author: Malcolm Smith
about: Audio oscillator module for the ReaRack modular JSFX synth system.
       Waveform defined by moving line segments to form variable trapezoid.
       rudimentary band limiting is achieved by limiting the maximum slope
       of vertical line segements and the minimum length of horizontal line segments,
       dependant on frequency.
changelog: Fixed a bug in the shape modulation function.
/*Version 1.0.0 (1/7/2017) Initial release.
  Version 1.0.1 (11/7/2017) Added modulation options. Fixed a bug with MIDI pass through.
  Version 1.0.2 (13/7/2017) Added modulation smoothing. Fixed a bug in master/slave mode.
  Version 1.0.3 (1/8/2017) Fixed a bug in the shape modulation function.

// Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
// License: LGPL - http://www.gnu.org/licenses/lgpl.html

slider1:0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Pitch Modulaton)
slider2:0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Shape Modulaton)
slider3:0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Width Modulaton)
slider4:0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Rake Modulaton)
// Choose your preferred note naming convention:
//slider5:0<0,128,1{MIDI note,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Pitch
slider5:0<0,128,1{MIDI note,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Pitch
//slider5:0<0,128,1{MIDI note,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Pitch
slider6:-12<-60,0,1>Output Level (dB)*
slider7:0<0,1,0.001>SHAPE*
slider8:0<0,1,0.001>Shape Modulation Range*
slider9:0<-1,1,0.001>WIDTH*
slider10:0<-1,1,0.001>Width Modulation Range*
slider11:0<-1,1,0.001>RAKE*
slider12:0<-1,1,0.001>Rake Modulation Range*
slider13:0<1,16,1{1 (fundamental),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Harmonic*
slider14:0<-4,4,1>Tune (octave)*
slider15:0<-12,12,1>Tune (semitone)*
slider16:0<-100,100,1>Fine Tune (cents)*
slider17:0<0,3>Portamento (sec)*
slider18:0<-1,1,0.001>Pitch Modulation Centre*
slider19:0<-1,1,0.001>Pitch Modulation Range*
slider20:0<0,3,1{Off,Frequency Modulation,Ring Modulation,Amplitude Modulation}>Audio Modulation*
slider21:0<0,3,1{None,Master,Slave}>*Class
slider22:0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Class Group

options:gmem=ReRackTrapOsc

@init
tau = $pi*2.0;
adj = tau*440/srate;
blkadj = tau*440/srate;
volcount = ceil(srate/100);
sliderbits = 2^6+2^7+2^8+2^9+2^10+2^11+2^12+2^13+2^14+2^15+2^16+2^17+2^18+2^19+2^20;
freq = 440;

@slider
////////////////////////////Store slider values/////////////////
group = slider22*20;

slider21 == 1 ? (
  gmem[group+6] = slider6;
  gmem[group+7] = slider7;
  gmem[group+8] = slider8;
  gmem[group+9] = slider9;
  gmem[group+10] = slider10;
  gmem[group+11] = slider11;
  gmem[group+12] = slider12;
  gmem[group+13] = slider13;
  gmem[group+14] = slider14;
  gmem[group+15] = slider15;
  gmem[group+16] = slider16;
  gmem[group+17] = slider17;
  gmem[group+18] = slider18;
  gmem[group+19] = slider19;
  gmem[group+20] = slider20;
  );
  
@block
///////////////////////set slider values (slave mode)/////////////////////
slider21 == 2 ? ( 
  slider6 = gmem[group+6];
  slider7 = gmem[group+7];
  slider8 = gmem[group+8];
  slider9 = gmem[group+9];
  slider10 = gmem[group+10];
  slider11 = gmem[group+11];
  slider12 = gmem[group+12];
  slider13 = gmem[group+13];
  slider14 = gmem[group+14];
  slider15 = gmem[group+15];
  slider16 = gmem[group+16];
  slider17 = gmem[group+17];
  slider18 = gmem[group+18];
  slider19 = gmem[group+19];
  slider20 = gmem[group+20];
  sliderchange(sliderbits);
);  

/////////////////////////Get slider values//////////////////////////
pitchcc = slider1-1;
shapecc = slider2-1;
widthcc = slider3-1;
rakecc = slider4-1;
pitch = slider5-1;
voltarget = 2^(slider6/6);
gvol = (1+(slider6/60));
shape1 = slider7/4;
shapemodr = slider8/4;
width1 = slider9/4;
widthmodr = slider10/4;
rake1 = slider11/4;
rakemodr = slider12/4;
harm = slider13+1;
detune = 2^(slider14 + slider15/12 + slider16/1200);
portaval = slider17;
modetune = 2^(slider18/127);
modcentre = slider18;
modlev = slider19;
modaudio = slider20;
volstep = (voltarget-prevol)/volcount;
volstepcount = volcount;
shape = shape1 * (1-abs(4*width));
/////////////////////////Portamento/////////////////////////
portastep = floor(max(1,((srate/samplesblock)*portaval)));

/////////////////////////Get MIDI inputs/////////////////
// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90 ?
      (
       // Get note and velocity
       note = msg2 & $x7F;
       //velocity = msg3;
       // Note on
       freq = 2^((note-69)/12)*440*harm*detune;
       blkadjtarget = freq/srate;
       // Adjust for portamento if required
       adjstep = (blkadjtarget - blkadj)/portastep;
       blkadj != blkadjtarget ? ( blkadj += adjstep);
      //End of Get note and velocity
      );
////////////////////////Get modulation CC messages//////// 
  // Extract message type and channel
     status == $xB0 ?
      (
      // Pitch Modulation
      // Is it the right CC?
          msg2 == pitchcc ?
         (
          modval = (msg3/63.5) - (1+modcentre);
          modlevel = modval * modlev;
          modadj = freq*modlevel/srate;
          );
          // Shape Modulation
          // Is it the right CC?
          msg2 == shapecc ?
          (
          shapeval = (msg3/127);
          shapemod = shapeval * (shapemodr - shape1);
          );
          // Width Modulation
          // Is it the right CC?
          msg2 == widthcc ?
          (
          widthval = (msg3/127);
          widthmod = widthval * (widthmodr - width1);
          );
          // Rake Modulation
          // Is it the right CC?
          msg2 == rakecc ?
          (
          rakeval = (msg3/127);
          rakemod = rakeval * (rakemodr - rake1);
          );
      );
    // Pass through
    midisend(offset, msg1, msg2, msg3); 
);
/////////////////////////Slider pitch control//////////////
pitch > -1 ? (
  freq = 2^((pitch-69)/12)*440*harm*detune;
  blkadj = freq/srate;
);
/////////Zero modulation values if no input//////////////
modcc == -1 ? modadj = 0;
shapecc == -1 ? shapemod = 0;
widthcc == -1 ? widthmod = 0;
rakecc == -1 ? rakemod = 0;

////////Update modulated input values///////////////////
shape1 += shapemod;
rake1 += rakemod;
width1 += widthmod;

////////Calclate trapezoidal wave points////////////////
nratio = (freq+freq)/srate;
//nratio = freq/20000;
widthmin = (nratio/2);
0.25-abs(width1) < widthmin ? width = sign(width1)*(0.25-widthmin):
width = width1;
shapemin = nratio/3;
shapemax = max(shapemin,0.25-abs(width)-shapemin);
shape1 < shapemin ? shape = shapemin:
shape1 > shapemax ? shape = shapemax:
shape = shape1;
rakemax = max(0,shape-shapemin);
abs(rake1) > rakemax ? rake = -sign(rake1)*rakemax:
rake = -rake1;

preshapespl = preshape;
shapeinc = (shape-preshape)/samplesblock;
preshape = shape;

prewidthspl = prewidth;
widthinc = (width-prewidth)/samplesblock;
prewidth = width;

prerakespl = prerake;
fakeinc = (rake-prerake)/samplesblock;
prerake = rake;

premodadjspl = premodadj;
modadjinc = (modadj-premodadj)/samplesblock;
premodadj = modadj;

counter = 1;
shape = preshapespl;
width = prewidthspl;
rake = prerakespl;
modadj = premodadjspl;

@sample
counter <= samplesblock ?
 (
  shape += shapeinc;
  width += widthinc;
  rake += rakeinc;
  modadj += modadjinc;
  );
counter +=1;
  
px1 = width;
px2 = (shape + rake);
px3 = (shape - rake);
p1 = 0 - px1;    // y = 0
p0 = p1 - px2;   // y = -1
p2 = p1 + px2;   // y = 1
p4 = 0.5 + px1;  // y = 0
p3 = p4 - px3;   // y = 1
p5 = p4 + px3;   // y = -1
p7 = 1 - px1;    // y = 0
p6 = p7 - px2;   // y = -1
p8 = p7 + px2;   // y = 1

/////////////////////////Volume change smoothing////////////////
vol != voltarget ?
(
  volstepcount >=0 ?
   (
    vol += volstep;
    volstepcount -= 1;
    ):(
    vol = voltarget; // Just to be sure!
    );
);

/////////////////////////////FM/////////////////////////////////
modaudio == 2 ? (
  inlev = (spl0+spl1)/2;
  adj = blkadj*(1+inlev)*10)
  : adj = blkadj;

////////////////////////////Define waveforms////////////////////
pos <= p0 ? sample = -1:
pos <= p2 ? sample = (pos - p1)/(p2-p1):
pos <= p3 ? sample = 1:
pos <= p5 ? sample = (p4 - pos)/(p5-p4):
pos <= p6 ? sample = -1:
pos <= p8 ? sample = (pos - p7)/(p8-p7):
pos >  p8 ? sample = 1;

/////////////////////////Audio output//////////////////////////////
freq < (srate/2.1) ? (
sample *= vol;
  modaudio == 0 ? (          //Unmodulated waveform
     spl0 = sample+spl0;
     spl1 = sample+spl1;
     )
     :
     (
    modaudio == 2 ? (        //Ring Modulation
     spl0 = (sample*spl0);
     spl1 = (sample*spl1);
        )
        :
        (
         modaudio == 3 ? (   //Amplitude Modulation
         spl0 = ((0.5+(sample/2))*spl0);
         spl1 = ((0.5+(sample/2))*spl1);           
          )
          :
          (                  //Frequency Modulation    
          spl0 = sample;
          spl1 = sample;
         );
      );
   );      
) : ( 
spl0 = spl0;
spl1 = spl1;
);

//////////Buffer results for graphics////////////////////////////
looplen = srate/8;
bufflen = floor(looplen);
  bpos<=bufflen ? (
    bpos[0] = pos;
    modaudio == 0 ? (bpos+bufflen)[0] = sample:(bpos+bufflen)[0] = (spl0+spl1)/2;
    (bpos+bufflen+bufflen)[0] = vol;
    );
  
buffcount+=1;
buffcount > looplen ? (
  buffcount-=looplen;
  );
bpos=floor(buffcount);

////////Increment phase position///////////
pos += (adj+modadj);
pos >= 1 ? pos -= 1;
prevol = vol;

/////////////////////////////////graphics//////////////////////////////////////
@gfx 400 140

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;

gpos = 1;
gfx_x = 25;
gfx_y = 80;
while (gpos <= bufflen)(
  gfx_x = 25+100*gpos[0];
  gfx_y = 80+40*(gvol/(gpos+bufflen+bufflen)[0])*(gpos+bufflen)[0];
  gfx_setpixel(0,1,0);
  gpos+=1;
);

gfx_x=gfx_y=5;
gfx_lineto(gfx_x, gfx_y,0);
gfx_r=gfx_b=0;
gfx_g=gfx_a=1;
gfx_drawstr("Base Frequency = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");

gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = 25;
gfx_y = 40;
gfx_lineto(25+(100),40);
gfx_x = 25;
gfx_y = 80;
gfx_lineto(25+(100),80);
gfx_x = 25;
gfx_y = 120;
gfx_lineto(25+(100),120);
gfx_a =1;
gfx_x = 13;
gfx_y = 35;
gfx_drawstr("1");
gfx_x = 13;
gfx_y = 75;
gfx_drawstr("0");
gfx_x = 5;
gfx_y = 115;
gfx_drawstr("-1");
