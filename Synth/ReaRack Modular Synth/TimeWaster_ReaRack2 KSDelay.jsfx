version: 2.1.0
desc:ReaRack2 - Karplus-Strong Delay
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           
license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Based on the pitched delay part of the Karplus-Strong plucked string physical modelling algorithm. Use with an audio input source (e.g white noise) and an envelope generator driving a lowpass filter, to get the complete plucked string sound 

changelog: Version 2.1.0 (18/02/2018) Added pitch bend input for pitch change.
           Version 2.0.1 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.0 (10/12/2017) Initial version 2 release.

slider1:spitchcc=0<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input (Pitch Modulaton)
slider2:modrs=0<-12,12,1>Pitch Modulation Range (semitones)
slider3:modrc=0<-100,100,1>Pitch Modulation Range (cents)
slider5:oct=0<-4,4,1>Tune (octave)
slider6:semi=0<-12,12,1>Tune (semitone)
slider7:cent=0<-100,100,1>Fine Tune (cents)
slider8:smodcentre=0<-1,1,0.001>Pitch Modulation Centre
slider10:svsence=1<0,1>Velocity Sensitivity
slider12:sclass=0<0,3,1{None,Master,Slave}>Class
slider13:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

options:gmem=ReaRack

@init
fxn = 130;
adj = 1;
pitchbadj = 1;
freq = 440;

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+8];

slidermove == 1 ?
(
pitchccmsb = spitchcc <= 32 ? spitchcc-1:spitchcc+31;
pitchcclsb = pitchccmsb+32;
modcentre = smodcentre;
modlev = (modrs/12)+(modrc/1200);
vsense = svsence;

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = spitchcc;
  gmem[group+fxn+1] = oct;
  gmem[group+fxn+2] = semi;
  gmem[group+fxn+3] = cent;
  gmem[group+fxn+4] = smodcentre;
  gmem[group+fxn+5] = modrs;
  gmem[group+fxn+6] = modrc;
  gmem[group+fxn+7] = svsence;
  gmem[group+fxn+8] = slidermove;
);

// Retrieve slider values
sclass == 2 ? ( 
  spitchcc   = gmem[group+fxn+0];
  oct        = gmem[group+fxn+1];
  semi       = gmem[group+fxn+2];
  cent       = gmem[group+fxn+3];
  smodcentre = gmem[group+fxn+4];
  modrs      = gmem[group+fxn+5];
  modrc      = gmem[group+fxn+6];
  svsence    = gmem[group+fxn+7];
);

detune = 2^(oct + semi/12 + cent/1200);

slidermove = 0;
); // end if slidermove

// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90 ?
      (
       // Get note and velocity
       note = msg2;// & $x7F;
       velocity = (1-vsense)+((msg3/127)*vsense);
       trig = 1;
       freq = (2^((note-69)/12)*440)*detune;
       looplen1=srate/freq;
       samplen=floor(looplen1);
       memset(0,0,samplen*2);
      count = 0;
      bpos = 0;
      );
      //Pitch Modulation
      status == $xB0 ?
      (
      // Is it the right CC?
          msg2 == pitchccmsb || msg == pitchcclsb ?
         (
          msg2 == pitchccmsb ? modvalmsb = msg3;
          msg2 == pitchcclsb ? modvallsb = msg3;
          modval = ((modvalmsb/(127.9921875))+(modvallsb/8192)) - (1+modcentre);
          modlevel = modval * modlev;
          adj = 1/2^(modlevel);
        );
      );
      
      status == $xE0 ?
      (
       // Pitch Bend
       pitchbend_val = (msg2/8192)+(msg3/(64))-1;
       pitchbadj = 1/2^(pitchbend_val*modlev);
      );
      
      // Pass through
      midisend(offset, msg1, msg2, msg3);
);
               
@sample
looplen = looplen1*adj*pitchbadj;
bufflen = floor(looplen);
trig == 1? (
  bpos<=bufflen ? (
    bpos[0]     = spl0;
    bpos[12000] = spl1;
    );
  );
  
spl0 = bpos[0]         * velocity;
spl1 = bpos[12000] * velocity;
count+=1;
count > looplen ? (
  count-=looplen;
  trig = 0;
  );
bpos=floor(count);

@gfx 400 140

xmin = 25;
xrng = 400;
ymin = 25;
yrng = 80;
ymid = ymin+yrng/2;
ymax = ymin+yrng;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;

gpos = 0;
ginc = 200/samplen;
gfx_x = xmin;
gfx_y = ymid+(0[0]*(yrng/2)*velocity);

while (gpos <= bufflen)(
  gfx_lineto(xmin+(gpos*ginc),ymid+(velocity*gpos[0]*(yrng/2)));
  gpos+=1;
 );
gpos = 0;
gfx_x = xmin;
gfx_y = ymid+(0[12000]*(yrng/2)*velocity);
 
while (gpos <= bufflen)(
  gfx_lineto(xmin+(gpos*ginc),ymid+(velocity*gpos[12000]*(yrng/2)));
  gpos+=1;
);
 
gfx_x=xmin+120;
gfx_y=8;
gfx_r=1;
gfx_b=1;
gfx_g=1;
gfx_a=0.7;
gfx_drawstr("Sampled Waveform");
gfx_x=xmin;
gfx_y=ymax+10;
gfx_drawstr("Base Frequency = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");
gfx_x=xmin;
gfx_y=ymax+25;
gfx_drawstr("Delay Time     = ");
gfx_drawnumber(srate/freq,1);
gfx_drawstr(" ms");


gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmin+xrng,ymin);
gfx_x = xmin;
gfx_y = ymid;
gfx_lineto(xmin+xrng,ymid);
gfx_x = xmin;
gfx_y = ymax;
gfx_lineto(xmin+xrng,ymax);
gfx_a =1;
gfx_x = xmin-12;
gfx_y = ymin-5;
gfx_drawstr("1");
gfx_x = xmin-12;
gfx_y = ymid-5;
gfx_drawstr("0");
gfx_x = xmin-20;
gfx_y = ymax-5;
gfx_drawstr("-1");
