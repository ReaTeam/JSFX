version: 2.0.1
desc: ReaRack2 - Filter
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           Filter code based on 'Reasonant Lowpass Filter' - Copyright (C) 2004 and later Cockos Incorporated

license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     HP/LP filter module for the ReaRack modular JSFX synth system.

changelog: Version 2.0.1 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.0 (10/12/2017) Initial version 2 release.

slider1:smodp=0<0,1,1{Cutoff level,Resonance}>Modulation Target
slider2:sccIn=0<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider3:mrange=1<0,1,0.001>Modulation Range
slider5:type=0<0,1,1{Lowpass,Highpass}>Filter Type
slider6:cutlev=1<0.1,1,0.001>Cutoff Level
slider7:reslev=0<0,1,0.001>Resonance
slider9:soutlev=0<-60,18>Output Level (dB)
slider11:sclass=0<0,3,1{None,Master,Slave}>Class
slider12:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group
// Hidden sliders
slider41:ccIn1msb=-1<-1,63,1>-
slider42:ccIn2msb=-1<-1,63,1>-
slider47:cutm=1<0,1,0.001>-
slider48:resm=1<0,1,0.001>-

options:gmem=ReaRack

@init
fxn = 100;
ccIn1lsb = ccIn1msb+32;
ccIn2lsb = ccIn2msb+32;

sliderbits = 2^3+2^4+2^5+2^6+2^7;
modlevel = 1

@slider

slidermove = 1;

@block

sclass == 2 ? slidermove  = gmem[group+fxn+7];

slidermove == 1 ?
(
// Update modulation input sliders to previously set values on target selection.
smodp == 0 && ccInnum != 0 ? (         //Cutoff
sccIn = ccIn1msb <= 31 ? ccIn1msb+1:ccIn1msb - 31; 
mrange = cutrange;
);
smodp == 1 && ccInnum != 1 ? (         //Resonance
sccIn = ccIn2msb <= 31 ? ccIn2msb+1:ccIn2msb - 31; 
mrange = resrange;
);

//Get slider values
smodp == 0 ? (         //Cutoff
ccIn1msb = sccIn <= 32 ? sccIn-1:sccIn+31;
ccIn1lsb = ccIn1msb+32;
cutrange = mrange;
ccInnum = 0;
);
smodp == 1 ? (         //Resonance
ccIn2msb = sccIn <= 32 ? sccIn-1:sccIn+31;
ccIn2lsb = ccIn2msb+32;
resrange = mrange;
ccInnum = 1;
);

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0] = type;
  gmem[group+fxn+1] = cutlev;
  gmem[group+fxn+2] = reslev;
  gmem[group+fxn+3] = soutlev;
  gmem[group+fxn+4] = smodp;
  gmem[group+fxn+5] = sccIn;
  gmem[group+fxn+6] = mrange;
  gmem[group+fxn+7] = slidermove;
);

// Retrieve slider values
sclass == 2 ? (
  type      = gmem[group+fxn+0];
  cutlev    = gmem[group+fxn+1];
  reslev    = gmem[group+fxn+2];
  soutlev   = gmem[group+fxn+3];
  smodp     = gmem[group+fxn+4];
  sccIn     = gmem[group+fxn+5];
  mrange    = gmem[group+fxn+6];
);

outlev = 2^(soutlev/6);
freq = (2^((cutlev^0.5)*14.28771));
fb=res+res/(1-cutbase);

slidermove = 0;
); // end if slidermove

while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;
  channel = msg1 & $x0F;
   
  // Is it a controller event?
  status == $xB0 ? 
  (
    // Is it the right CC for cutoff modulation?
      msg2 == ccIn1msb || msg2 == ccIn1lsb ?
       (
       msg2 == ccIn1msb ? cutmodmsb = msg3;
       msg2 == ccIn1lsb ? cutmodlsb = msg3;
       cutmodval = (cutmodmsb/127.9921875)+(cutmodlsb/16384);   
       );
    // Is it the right CC for cutoff modulation?
      msg2 == ccIn2msb || msg2 == ccIn2lsb ?
       (
       msg2 == ccIn2msb ? resmodmsb = msg3;
       msg2 == ccIn2lsb ? resmodlsb = msg3;
       resmodval = (resmodmsb/127.9921875)+(resmodlsb/16384);   
    );
  );
  // Pass through
  midisend(offset, msg1, msg2, msg3);
);

@sample
ccIn1msb == -1 ? cutmodval = 0;
ccIn2msb == -1 ? resmodval = 0;
modlevel = (cutrange-cutlev)*cutmodval;
freq = (2^(((cutlev+modlevel)^.5)*14.28771));
cut = min(((freq*2) / srate),0.99);
res = reslev -((reslev-resrange)*resmodval);
fb=res+res/(1-cut);

n3=n3+cut*(spl0-n3+fb*(n3-n4));
n4=n4+cut*(n3-n4);

rn3=rn3+cut*(spl1-rn3+fb*(rn3-rn4));
rn4=rn4+cut*(rn3-rn4);
type == 0 ? (
  spl0=n4;
  spl1=rn4;
  )
  :
  (  
  spl0=spl0-n4;
  spl1=spl1-rn4;
);
spl0 *= outlev;
spl1 *= outlev;

@gfx 100 140

xmin = 45;
xrng = 300;
xrng2 = xrng/2;
xmax = xmin+xrng;
ymin = 30;
yrng = 60;
yrng2 = yrng/2;
yrng4 = yrng/4;
ymid = ymin+(yrng/2);
ymax = ymin+yrng;
mxmin = xmax+100;

gfx_r=1;
gfx_g=1;
gfx_b=1;
gfx_a=0.7;
gfx_x=100;
gfx_y=8;
type == 0 ? gfx_drawstr("Lowpass Filter"):gfx_drawstr("Highpass Filter");
gfx_x=mxmin-110;
gfx_y=8;
gfx_drawstr("   Modulation");
gfx_x=mxmin-110;
gfx_y=23;
gfx_drawstr("   Target  CC");
gfx_x=25;
gfx_y=ymax+15;
gfx_drawstr("Cutoff Frequency = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");

gfx_r=0;
gfx_b=0;
gfx_a=1;

type == 0 ? (
  gfx_a = 0.5;
  gfx_x = 25;
  gfx_y = ymid;
  gfx_lineto(xmin+(cutlev*xrng2-reslev*yrng4),ymid);
  gfx_lineto(xmin+(cutlev*xrng2),ymid-reslev*yrng2);
  gfx_lineto(xmin+(cutlev*xrng2)+yrng4+reslev*yrng4,ymax);
  gfx_lineto(xrng,ymax);
  gfx_a = 1;
  gfx_x = 25;
  gfx_y = ymid;
  gfx_lineto(xmin+((cutlev+modlevel)*xrng2-res*yrng4),ymid);
  gfx_lineto(xmin+((cutlev+modlevel)*xrng2),ymid-res*yrng2);
  gfx_lineto(xmin+((cutlev+modlevel)*xrng2)+yrng4+res*yrng4,ymax);
  gfx_lineto(xrng,ymax);
  )
  :
  (
  type == 1 ? (
    gfx_a = 0.5;
    gfx_x = 25;
    gfx_y = ymax;
    gfx_lineto(xmin-reslev*yrng4-yrng4+(cutlev*xrng2),ymax);
    gfx_lineto(xmin+(cutlev*xrng2),ymid-reslev*yrng2);
    gfx_lineto(xmin+(cutlev*xrng2+reslev*yrng4),ymid);
    gfx_lineto(xrng,ymid);
    gfx_a = 1;
    gfx_x = 25;
    gfx_y = ymax;
    gfx_lineto(xmin-res*yrng4-yrng4+((cutlev+modlevel)*xrng2),ymax);
    gfx_lineto(xmin+((cutlev+modlevel)*xrng2),ymid-res*yrng2);
    gfx_lineto(xmin+((cutlev+modlevel)*xrng2+res*yrng4),ymid);
    gfx_lineto(xrng,ymid);
    );
);

// Modulation Indicators
gfx_r = 1;
gfx_g = 0;
// Frequency
smodp == 0 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = 40;
gfx_drawstr("   Cutoff  ");
ccIn1msb <  0 ? gfx_drawstr("--"):
ccIn1msb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(ccIn1msb,0)):
gfx_drawnumber(ccIn1msb,0);
// Pulse width
smodp == 1 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = 55;
gfx_drawstr("Resonance  ");
ccIn2msb <  0 ? gfx_drawstr("--"):
ccIn2msb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(ccIn2msb,0)):
gfx_drawnumber(ccIn2msb,0);
