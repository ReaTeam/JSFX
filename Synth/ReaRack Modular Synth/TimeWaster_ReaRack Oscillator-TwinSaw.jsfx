version: 1.0.1
desc:ReaRack - Oscillator-Twin-Saw
noindex: true
author: Malcolm Smith
about: Audio oscillator module for the ReaRack modular JSFX synth system.
       Uses an algorithm to approximate a pair of band limited sawtooth waveforms
       with a phase offset. One of the pair is subracted from the other to form a
       pulse waveform. The pair can be proportionally mixed and independently filtered
       to further modify the resultant waveform.
changelog: Fixed a bug which prevented note off messages being passed through.
/*Version 1.0.0 (14/6/2017) Initial release.
  Version 1.0.1 (3/07/2107) Fixed a bug which prevented note off messages being passed through.
*/
// Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
// License: LGPL - http://www.gnu.org/licenses/lgpl.html

slider1:smodcc=0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Pitch Modulaton)
slider4:spwcc=0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Phase Offset Modulaton)
slider2:sfilt1cc=0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Saw 1 LPF Modulaton)
slider3:sfilt2cc=0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Saw 2 LPF Modulaton)
slider5:sbalcc=0<0,128,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Saw 1/Saw 2 Mix Modulaton)
slider7:sf1type=0<0,2,1{Off,Fixed,Follow}>SAW 1 ------------- Saw 1 Lowpass Filter*
slider8:sn1=128<1,128,1>Saw 1 Filter Cutoff*
slider9:snr1=128<1,128,1>Saw 1 Filter Cutoff Modulation Range*
slider11:sf2type=3<0,3,1{Off,Fixed,Follow,= Saw 1 Lowpass Filter}>SAW 2 ------------- Saw 2 Lowpass Filter*
slider12:sn2=128<1,128,1>Saw 2 Filter Cutoff*
slider13:snr2=128<1,128,1>Saw 2 Filter Cutoff Modulation Range*
slider15:sbal=1.5<1,2,0.001>MIXING ------------------ Saw1/Saw2 Mix*
slider16:sbalr=1.5<1,2,0.001>Saw1/Saw2 Mix Modulation Range*
slider17:spw=0.5<0,1,0.001>Phase Offset*
slider18:spwr=0.5<0,1,0.01>Phase Offset Modulation Range*
// Choose your preferred note naming convention:
//slider6:0<0,128,1{MIDI note,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Pitch Settings ----------------------------  Pitch
slider20:spitch=0<0,128,1{MIDI note),C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Pitch Settings ---------------------------- Pitch
//slider6:0<0,128,1{MIDI note,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Pitch Settings ---------------------------- Pitch
slider21:sharm=0<1,16,1{1 (fundamental),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Lowest Harmonic*
slider22:soct=0<-4,4,1>Tune (octave)*
slider23:ssemi=0<-12,12,1>Tune (semitone)*
slider24:scent=0<-100,100,1>Fine Tune (cents)*
slider25:sport=0<0,3>Portamento (sec)*
slider26:spitchc=0<-1,1,0.001>Pitch Modulation Centre*
slider27:spitchr=0<-1,1,0.001>Pitch Modulation Range*
slider29:smodaudio=0<0,3,1{Off,Frequency Modulation,Ring Modulation,Amplitude Modulation}>Audio Modulation*
slider30:satt=1.0<0,2,0.001>Output Level*
slider32:sclass=0<0,3,1{None,Master,Slave}>Class
slider33:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Class Group

options:gmem=ReRackTwinSaw

@init

function sawtooth(x p q g n)
(
n <= 0 ? y = 0:
n <= 4 ? (
  y = 0;
  wn = 1;
     while(wn <= n)(
     ny = sin(wn*x)/wn;
     y += ny;
     wn +=1;
     );
  y*=0.541;
  ):
  (
  m=(
    x >= 0 && x < p ? 1 + q*sin(($pi*x)/(2*p)):
    x >= p && x < $pi ? 1.41-((q+1)-1.41)*sin(($pi/(2*($pi-p)))*((x-p)-($pi-p))):
    x >= $pi && x <= tau-p ? 1.41-((q+1)-1.41)*sin(($pi/(2*($pi-p)))*(((tau-x)-p)-($pi-p))):
    x >= tau-p && x <= tau ? 1 + q*sin(($pi*(tau-x))/(2*p));
    );
  
  h = 1-(($pi/2)-(atan(n+1)))*g;
  k1 = (n+1)*(h*(x-$pi)+$pi);
  k2 = (n+1)*(h*($pi-x)+$pi);
  k3 = 0.541*(($pi-x)/2);
  
  x <= $pi ? (
    y = (-1.15*sin(k1)/(k1*m))+ k3;
    ):(
    y = (1.15*sin(k2)/(k2*m))+ k3;
    );
  );
);


tau = $pi*2;
freq = 440;
inc = tau*freq/srate;
blkadj = tau*freq/srate;
volcount = ceil(srate/100);
sliderbits = 2^0+2^1+2^2+2^3+2^4+2^5+2^6+2^7+2^8+2^9+2^10+2^11+2^12+2^13+2^14+2^15+2^16+2^17+2^18+2^19+2^20+2^21+2^22+2^23+2^24;
cutoff = 1;
@slider
////////////////////////////Store slider values/////////////////
group = sgroup*35;

sclass == 1 ? (
  gmem[group+0]  = smodcc;
  gmem[group+1]  = spwcc;
  gmem[group+2]  = sfilt1cc;
  gmem[group+3]  = sfilt2cc;
  gmem[group+4]  = sbalcc;
  gmem[group+5]  = sf1type;
  gmem[group+6]  = sn1;
  gmem[group+7]  = snr1;
  gmem[group+8]  = sf2type;
  gmem[group+9]  = sn2;
  gmem[group+10] = snr2;
  gmem[group+11] = sbal;
  gmem[group+12] = sbalr;
  gmem[group+13] = spw;
  gmem[group+14] = spwr;
  gmem[group+15] = sharm;
  gmem[group+16] = soct;
  gmem[group+17] = ssemi;
  gmem[group+18] = scent;
  gmem[group+19] = sport;
  gmem[group+20] = spitchc;
  gmem[group+21] = spitchr;
  gmem[group+22] = smodaudio;
  gmem[group+23] = satt;
  );
  
@block
///////////////////////set slider values (slave mode)/////////////////////
sclass == 2 ? ( 
  smodcc       = gmem[group+0];
  spwcc        = gmem[group+1];
  sfilt1cc     = gmem[group+2];
  sfilt2cc     = gmem[group+3];
  sbalcc       = gmem[group+4];
  sf1type      = gmem[group+5];
  sn1          = gmem[group+6];
  snr1         = gmem[group+7];
  sf2type      = gmem[group+8];
  sn2          = gmem[group+9];
  snr2         = gmem[group+10];
  sbal         = gmem[group+11];
  sbalr        = gmem[group+12];
  spw          = gmem[group+13];
  spwr         = gmem[group+14];
  sharm        = gmem[group+15];
  soct         = gmem[group+16];
  ssemi        = gmem[group+17];
  scent        = gmem[group+18];
  sport        = gmem[group+19];
  spitchc      = gmem[group+20];
  spitchr      = gmem[group+21];
  smodaudio    = gmem[group+22];
  satt         = gmem[group+23];
  
  sliderchange(sliderbits);
);  

/////////////////////////Get slider values//////////////////////////
modcc = smodcc-1;
pwcc = spwcc-1;
filt1cc = sfilt1cc-1;
filt2cc = sfilt2cc-1;
pitch = spitch-1;
pwmodlev = spwr*$pi;
balcc = sbalcc-1;
ln1 = sn1;
ln2 = sn2;
f1type = sf1type;
f2type = sf2type;
tbal = (sbal-1.5)*2;
balr = (sbalr-1.5)*2;
pulsew = spw*$pi;
harm = sharm+1;
detune = 2^(soct + ssemi/12 + scent/1200);
portaval = sport;
modcentre = spitchc;
modlev = spitchr;
modaudio = smodaudio;
voltarget = satt;
volstep = (voltarget-prevol)/volcount;
volstepcount = volcount;

/////////////////////////portamento/////////////////////////
portastep = floor(max(1,((srate/samplesblock)*portaval)));

/////////////////////////Get MIDI inputs/////////////////
// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
  (  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90 ?
      (
       // Get note value
       note = msg2 & $x7F;
       // Calculate frequency and phase position increment
       freq = 2^((note-69)/12)*440*harm*detune;
       blkadjtarget = tau*freq/srate;
       // Adjust for portamento if required
       adjstep = (blkadjtarget - blkadj)/portastep;
       blkadj != blkadjtarget ? ( blkadj += adjstep);
      );
////////////////////////Get modulation CC messages//////// 
  // Extract message type and channel
     status == $xB0 ?
      (
          // Pitch Modulation
          msg2 == modcc ?
         (
          modval = (msg3/63.5) - (1+modcentre);
          modlevel = modval * modlev;
          modadj = tau*freq*modlevel/srate;
          );
          // Pulse Width Modulation
          msg2 == pwcc ?
          (
          pwval = (msg3/127);
          pw = pulsew+pwval*(pwmodlev-pulsew);
          );
          // Filter 1 Modulation
          msg2 == filt1cc ?
          (
          f1val = msg3;
          ln1 = floor(sn1+(f1val*((snr1-sn1)/128)));
          );
          // Filter 2 Modulation
          msg2 == filt2cc ?
          (
          f2val = msg3;
          ln2 = floor(sn2+(f2val*((snr2-sn2)/128)));
          );
          // Mix Modulation
          msg2 == balcc ?
          (
          balval = (msg3/127);
          bal = tbal+balval*(balr-tbal);
          );                 
      );
  //Pass through all
   midisend(offset, msg1, msg2, msg3); 
);

/////////////////////////Slider pitch control//////////////
pitch > -1 ? (
  freq = 2^((pitch-69)/12)*440*harm*detune;
  blkadj = tau*freq/srate;
);

//Set variables to slider values if no modulatuion is required//
modcc == -1 ? (
  modadj = 0;
  modlevel = 0;
  );
pwcc == -1 ? pw = pulsew;
f1type == -1 ? ln1 = sn1;
f2type == -1 ? ln2 = sn2;
balcc == -1 ? bal = tbal;

//@block outputs for modulation smoothing @sample///////////////
modstep = (modadj-premod)/samplesblock;
outmod = premod;
premod = modadj;

pwstep = ((pw-prepw)/samplesblock);
outpw = prepw;
prepw = pw;
modadjspl = modadj;

///////////////////////Cutoff Frequencies///////////////////
cutoff1 = 2^(sqrt(ln1)*1.26287);
cutoff2 = 2^(sqrt(ln2)*1.26287);
// n1 = the number of harmonics for saw 1.
f1type == 0 ? n1 = floor(20000/(freq+(freq*modlevel))); 
f1type == 1 ? n1 = floor(cutoff1/(freq+(freq*modlevel)));
f1type == 2 ? n1 = min(ln1,floor(20000/(freq+(freq*modlevel))));
// n2 = the number of harmonics for saw 2.
f2type == 0 ? n2 = floor(20000/(freq+(freq*modlevel))); 
f2type == 1 ? n2 = floor(cutoff2/(freq+(freq*modlevel)));
f2type == 2 ? n2 = min(ln2,floor(20000/(freq+(freq*modlevel))));
f2type == 3 ? n2 = n1;

g = 0.42;
p1 = tau/n1;
q1 = 1-2/n1;
p2 = tau/n2;
q2 = 1-2/n2;

/////////////////Set Counter/////////////////////////////////
count = 0;

@sample
/////////////////////////Modulation Smoothing////////////////
count > 0 ? (
  modadjspl += modstep;
  pws += pwstep;
  ):(
  modadjspl = outmod;
  pws = outpw;
  );
poffset = (pws/$pi)-0.5;
count += 1;

/////////////////////////Volume Change Smoothing//////////////
vol != voltarget ?
(
  volstepcount >=0 ?
   (
    vol += volstep;
    volstepcount -= 1;
    );
);

//////////////////Set Phase Increment/////////////////////////
modaudio != 1 ? inc = blkadj:( // if FM is selected:
                             inc = blkadj*(1+((spl0+spl1)/2))*10;
                             );

////////////////////////////Define waveform////////////////////
bal < 1 ? y1 = sawtooth(x1,p1,q1,g,n1);
bal > -1 ? y2 = sawtooth(x2,p2,q2,g,n2);
bal1 = bal < 0 ? 1 : 1-bal;
bal2 = bal > 0 ? 1 : 1+bal;
yy=((y1*bal1)-(y2*bal2)-poffset*1.697*min(bal1,bal2))*vol;

cutcount += 1;
cutcount > countlimit? cutcount = countlimit + 1;

//////////////////////Audio output/////////////////////////////
  modaudio == 0 ? (          //Unmodulated waveform
     spl0 = yy+spl0;
     spl1 = yy+spl1;
     )
     :
     (
    modaudio == 2 ? (        //Ring Modulation   
     spl0 = (yy*spl0);
     spl1 = (yy*spl1);
        )
        :
        (
         modaudio == 3 ? (   //Amplitude Modulation
         spl0 = ((0.5+(yy/2))*spl0);
         spl1 = ((0.5+(yy/2))*spl1);           
          )
          :
          (                  //Frequency Modulation
          spl0 = yy;
          spl1 = yy;
         );
      );
   );      

//////////Buffer results for graphics////////
looplen = srate/8;
bufflen = floor(looplen);
  bpos<=bufflen ? (
    bpos[0] = x;
    modaudio == 0 ? (bpos+bufflen)[0] = yy:(bpos+bufflen)[0] = (spl0+spl1)/2;
    );
  
buffcount+=1;
buffcount > looplen ? (
  buffcount-=looplen;
  );
bpos=floor(buffcount);

////////Increment phase position///////////
x += inc+modadjspl;
x >= tau ? x-= tau;
x1 = x - pws;
x1 < 0 ? x1+= tau;
x2 = x + pws;
x2 > tau ? x2-= tau;

prevol = vol;

/////////////////////////////////graphics//////////////////////////////////////
@gfx 500 200

xscl = 38;
yscl = 60;
ox = 25;
oy = 60;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1; 

//Draw waveform
gx = 1;
while (gx <= bufflen)(
  gfx_x = ox+xscl*gx[0];
  gfx_y = oy+yscl-yscl*(gx+bufflen)[0];
  gfx_setpixel(0,1,0);
  gx+=1;
);

//Draw linework and text
gfx_x=gfx_y=5;
gfx_lineto(gfx_x, gfx_y,0);
gfx_r=gfx_b=0;
gfx_g=gfx_a=1;
gfx_drawstr("Base Frequency = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");
gfx_x=5;
gfx_y=20;
gfx_drawstr("Saw 1 - No. of Harmonics = ");
gfx_drawnumber(n1,0);
gfx_x=5;
gfx_y=35;
gfx_drawstr("Saw 2 - No. of Harmonics = ");
gfx_drawnumber(n2,0);
gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = ox;
gfx_y = oy;
gfx_lineto(ox+(xscl*tau),oy);
gfx_x = ox;
gfx_y = oy+yscl;
gfx_lineto(ox+(xscl*tau),oy+yscl);
gfx_x = ox;
gfx_y = oy+yscl+yscl;
gfx_lineto(ox+(xscl*tau),oy+yscl+yscl);
gfx_a =1;
gfx_x = ox-12;
gfx_y = oy-5;
gfx_drawstr("1");
gfx_x = ox-12;
gfx_y = oy-5+yscl;
gfx_drawstr("0");
gfx_x = ox-20;
gfx_y = oy-5+yscl+yscl;
gfx_drawstr("-1");
