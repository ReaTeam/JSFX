version: 1.0.0
desc:ReaRack - Karplus-Strong Delay
noindex: true
author: Malcolm Smith
about: Based on the pitched delay part of the Karplus-Strong plucked string physical modelling algorithm. Use with an audio input source (e.g white noise) and an envelope generator driving a lowpass filter, to get the complete plucked string sound 
changelog: Initial Release.
/*Version 1.0.0 (4/11/2016) Initial release.

// Copyright(C) 2016 and later, Oliver Smith, Malcolm Smith (username 'Time Waster' on REAPER forums).
// License: LGPL - http://www.gnu.org/licenses/lgpl.html

slider1:0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Pitch Modulation)
slider2:0<-4,4,1>Tune (octave)*
slider3:0<-12,12,1>Tune (semitone)*
slider4:0<-100,100,1>Fine Tune (cents)*
slider5:0<-1,1,0.001>Pitch Modulation Centre*
slider6:0<-12,12,1>Pitch Modulation Range (semitones)*
slider7:0<-100,100,1>Pitch Modulation Range (cents)*
slider8:1<0,1>Velocity Sensitivity*
slider9:0<0,3,1{None,Master,Slave}>*Class
slider10:0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Class Group

options:gmem=ReRackKSD

@init

sliderbits = 2^2+2^3+2^4+2^5+2^6+2^7+2^8;
adj = 1;

@slider
////////////////////////////Store slider values/////////////////
group = slider10*20;
slider9 == 1 ? (
  gmem[group+2] = slider2;
  gmem[group+3] = slider3;
  gmem[group+4] = slider4;
  gmem[group+5] = slider5;
  gmem[group+6] = slider6;
  gmem[group+7] = slider7;
  gmem[group+8] = slider8;
  
);

modcc = slider1-1;
modcentre = slider5;
modlev = (slider6/12)+(slider7/1200);
vsense = slider8;
 
@block
///////////////////////set slider values (slave mode)/////////////////////
slider9 == 2 ? ( 
  slider2 = gmem[group+2];
  slider3 = gmem[group+3];
  slider4 = gmem[group+4];
  slider5 = gmem[group+5];
  slider6 = gmem[group+6];
  slider7 = gmem[group+7];
  slider8 = gmem[group+8];
  sliderchange(sliderbits);
);

detune = 2^(slider2 + slider3/12 + slider4/1200);

// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90 ?
      (
       // Get note and velocity
       note = msg2 & $x7F;
       velocity = (1-vsense)+((msg3/127)*vsense);
       trig = 1;
       freq = (2^((note-69)/12)*440)*detune;
       looplen1=srate/freq;
       samplen=floor(looplen1);
       memset(samplen,0,samplen);
      count = 0;
      bpos = 0;
      );
      //Pitch Modulation
      status == $xB0 ?
      (
      // Is it the right CC?
        msg2 == modcc ?
        (
         modval = (msg3/63.5) - (1+modcentre);
         modlevel = modval * modlev;
         adj = 2^(modlevel);
        );
      );
      // Pass through
      midisend(offset, msg1, msg2, msg3);
);
               
@sample
looplen = looplen1*adj;
bufflen = floor(looplen);
trig == 1? (
  bpos<=bufflen ? (
    bpos[0] = spl0;
    bpos[1] = spl1;
    );
  );
  
spl0 = bpos[0]* velocity;
spl1 = bpos[1]* velocity;
count+=1;
count > looplen ? (
  count-=looplen;
  trig = 0;
  );
bpos=floor(count);

@gfx 400 140

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;

gpos = 0;
ginc = 200/samplen;
gfx_x = 25;
gfx_y = 80+(((0[0]+0[1])/2)*40*velocity);

while (gpos <= bufflen)(
  gfx_lineto(25+(gpos*ginc),80+(velocity*((gpos[0]+gpos[1])/2)*40));
  gpos+=1;
 );
 
gfx_x=gfx_y=5;
gfx_lineto(gfx_x, gfx_y,0);
gfx_r=gfx_b=0;
gfx_g=gfx_a=1;
gfx_drawstr("Base Frequency = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");
gfx_x=5;
gfx_y=20;
gfx_drawstr("Delay Time     = ");
gfx_drawnumber(srate/freq,1);
gfx_drawstr(" ms");


gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = 25;
gfx_y = 40;
gfx_lineto(25+400,40);
gfx_x = 25;
gfx_y = 80;
gfx_lineto(25+400,80);
gfx_x = 25;
gfx_y = 120;
gfx_lineto(25+400,120);
gfx_a =1;
gfx_x = 13;
gfx_y = 35;
gfx_drawstr("1");
gfx_x = 13;
gfx_y = 75;
gfx_drawstr("0");
gfx_x = 5;
gfx_y = 115;
gfx_drawstr("-1");
