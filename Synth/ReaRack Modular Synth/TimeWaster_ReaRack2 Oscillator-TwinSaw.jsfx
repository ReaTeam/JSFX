version: 2.1.0
desc:ReaRack2 - Oscillator-Twin-Saw
noindex:   true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           
License:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Audio oscillator module for the ReaRack modular JSFX synth system.
           Uses an algorithm to approximate a pair of band limited sawtooth waveforms
           with a phase offset. One of the pair is subracted from the other to form a
           pulse waveform. The pair can be proportionally mixed and independently filtered
           to further modify the resultant waveform.
           
changelog: Version 2.1.0 (18/02/2018) Added pitch bend input for pitch change.
                                      Added pitch modulation depth slider.
           Version 2.0.1 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.0 (10/12/2017) Initial version 2 release.

slider1:smodp=0<0,4,1{Pitch,Saw 1 lowpass Filter,Saw 2 Lowpass Filter,Phase Offset,Saw 1/Saw 2 Mix}>Modulation Target
slider2:sccIn=0<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider3:mrange=1<0,1,0.001>Modulation Range
// Pitch control - Choose your preferred note naming convention:
//slider6:spitch=0<0,128,1{MIDI note,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Pitch
slider6:spitch=0<0,128,1{MIDI note,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Pitch
//slider6:spitch=0<0,128,1{MIDI note,C-2,C#-2,D-2,D#-2,E-2,F-2,F#-2,G-2,G#-2,A-2,A#-2,B-2,C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8}>Pitch
slider7:sharm=0<1,16,1{1 (fundamental),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Lowest Harmonic
slider8:soct=0<-4,4,1>Tune (octave)
slider9:ssemi=0<-12,12,1>Tune (semitone)
slider10:scent=0<-100,100,1>Fine Tune (cents)
slider11:sport=0<0,3>Portamento (sec)
slider12:spitchc=0<-1,1,0.001>Pitch Modulation Centre
slider13:spdepth=1<0,4,0.01>Master Pitch Mod. Range (octaves)
// Filter 1
slider15:sf1type=0<0,2,1{Off,Fixed,Follow}>SAW 1__Saw 1 Lowpass Filter
slider16:ssn1=1<0,1,0.001>Saw 1 Filter Cutoff
// Filter 2
slider18:sf2type=3<0,3,1{Off,Fixed,Follow,= Saw 1 Lowpass Filter}>SAW 2__Saw 2 Lowpass Filter
slider19:ssn2=1<0,1,0.001>Saw 2 Filter Cutoff
// Phase offset (pulse width)
slider21:spw=0.5<0,1,0.001>PHASE OFFSET_(pulse width)
// Mixing (balance) of the two sawtooth waves
slider23:sbal=1.5<1,2,0.001>MIXING_____Saw1/Saw2 Mix
// Audio Moduilation
slider29:smodaudio=0<0,3,1{Off,Frequency Modulation,Ring Modulation,Amplitude Modulation}>Audio Modulation
slider30:satt=1.0<0,2,0.001>Output Level
// Master/Slave function
slider32:sclass=0<0,3,1{None,Master,Slave}>Class
slider33:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group
// Hidden sliders
slider41:pitchccmsb=-1<-1,128,1>-
slider42:filt1ccmsb=-1<-1,128,1>-
slider43:filt2ccmsb=-1<-1,128,1>-
slider44:pwccmsb=-1<-1,128,1>-
slider45:balccmsb=-1<-1,128,1>-
slider47:pitchm=1<0,1,0.001>-
slider48:filt1m=1<0,1,0.001>-
slider49:filt2m=1<0,1,0.001>-
slider50:pwidm=1<0,1,0.001>-
slider51:balm=1<0,1,0.001>-

options:gmem=ReaRack

@init
fxn = 30;
pitchcclsb = pitchccmsb+32;
filt1cclsb = filt1ccmsb+32;
filt2cclsb = filt2ccmsb+32;
pwcclsb = pwccmsb+32;
balcclsb = balccmsb+32;

function sawtooth(x p q g n)
(
n <= 0 ? y = 0:
n <= 4 ? (
  y = 0;
  wn = 1;
     while(wn <= n)(
     ny = sin(wn*x)/wn;
     y += ny;
     wn +=1;
     );
  y*=0.541;
  ):
  (
  m=(
    x >= 0 && x < p ? 1 + q*sin(($pi*x)/(2*p)):
    x >= p && x < $pi ? 1.41-((q+1)-1.41)*sin(($pi/(2*($pi-p)))*((x-p)-($pi-p))):
    x >= $pi && x <= tau-p ? 1.41-((q+1)-1.41)*sin(($pi/(2*($pi-p)))*(((tau-x)-p)-($pi-p))):
    x >= tau-p && x <= tau ? 1 + q*sin(($pi*(tau-x))/(2*p));
    );
  
  h = 1-(($pi/2)-(atan(n+1)))*g;
  k1 = (n+1)*(h*(x-$pi)+$pi);
  k2 = (n+1)*(h*($pi-x)+$pi);
  k3 = 0.541*(($pi-x)/2);
  
  x <= $pi ? (
    y = (-1.15*sin(k1)/(k1*m))+ k3;
    ):(
    y = (1.15*sin(k2)/(k2*m))+ k3;
    );
  );
);


tau = $pi*2;
freq = 440;
inc = tau*freq/srate;
blkadj = tau*freq/srate;
modadj = 1;
pitchadj = 1;
volcount = ceil(srate/100);
cutoff = 1;
@slider

slidermove = 1;

@block
sclass == 2 ? slidermove  = gmem[group+fxn+22];

slidermove == 1 ?
(  
// Update modulation input slider to previously set input CC value on target selection.
smodp == 0 && ccInnum != 0 ? (         //Pitch
sccIn = pitchccmsb <= 31 ? pitchccmsb+1:pitchccmsb - 31; 
mrange = pitchm;
);
smodp == 1 && ccInnum != 1 ? (         //Filter 1
sccIn = filt1ccmsb <= 31 ? filt1ccmsb+1:filt1ccmsb - 31; 
mrange = filt1m;
);
smodp == 2 && ccInnum != 2 ? (         //Filter 2
sccIn = filt2ccmsb <= 31 ? filt2ccmsb+1:filt2ccmsb - 31; 
mrange = filt2m;
);
smodp == 3 && ccInnum != 3 ? (         //Pulse width
sccIn = pwccmsb <= 31 ? pwccmsb+1:pwccmsb - 31; 
mrange = pwidm;
);
smodp == 4 && ccInnum != 4 ? (         //Balance
sccIn = balccmsb <= 31 ? balccmsb+1:balccmsb - 31; 
mrange = balm;
);
/////////////////////////Get slider values//////////////////////////
smodp == 0 ? (         //Pitch
pitchccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
pitchcclsb = pitchccmsb+32;
pitchm = mrange;
ccInnum = 0;
);
smodp == 1 ? (         //Filter 1
filt1ccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
filt1cclsb = filt1ccmsb+32;
filt1m = mrange;
ccInnum = 1;
);
smodp == 2 ? (          //Filter 2
filt2ccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
filt2cclsb = filt2ccmsb+32;
filt2m = mrange;
ccInnum = 2;
);
smodp == 3 ? (         //Pulse width
pwccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
pwcclsb = pwccmsb+32;
pwidm = mrange;
ccInnum = 3;
);
smodp == 4 ? (         //Balance
balccmsb = sccIn <= 32 ? sccIn-1:sccIn+31;
balcclsb = balccmsb+32;
balm = mrange;
ccInnum = 4;
);

//Store slider values
group = sgroup*1000;
sclass == 1 ? (
  gmem[group+fxn+0]  = pitchm;
  gmem[group+fxn+1]  = filt1m;
  gmem[group+fxn+2]  = filt2m;
  gmem[group+fxn+3]  = pwidm;
  gmem[group+fxn+4]  = balm;
  gmem[group+fxn+5]  = sharm;
  gmem[group+fxn+6]  = soct;
  gmem[group+fxn+7]  = ssemi;
  gmem[group+fxn+8]  = scent;
  gmem[group+fxn+9]  = sport;
  gmem[group+fxn+10] = spitchc;
  gmem[group+fxn+11] = sf1type;
  gmem[group+fxn+12] = ssn1;
  gmem[group+fxn+13] = sf2type;
  gmem[group+fxn+14] = ssn2;
  gmem[group+fxn+15] = spw;
  gmem[group+fxn+16] = sbal;
  gmem[group+fxn+17] = smodaudio;
  gmem[group+fxn+18] = satt;
  gmem[group+fxn+19] = smodp;
  gmem[group+fxn+20] = sccIn;
  gmem[group+fxn+21] = mrange;
  gmem[group+fxn+22] = slidermove;
  gmem[group+fxn+23] = spitch;
  gmem[group+fxn+24] = spdepth;
);

// Retrieve slider values
sclass == 2 ? ( 
  pitchm       = gmem[group+fxn+0];
  filt1m       = gmem[group+fxn+1];
  filt2m       = gmem[group+fxn+2];
  pwidm        = gmem[group+fxn+3];
  balm         = gmem[group+fxn+4];
  sharm        = gmem[group+fxn+5];
  soct         = gmem[group+fxn+6];
  ssemi        = gmem[group+fxn+7];
  scent        = gmem[group+fxn+8];
  sport        = gmem[group+fxn+9];
  spitchc      = gmem[group+fxn+10];
  sf1type      = gmem[group+fxn+11];
  ssn1         = gmem[group+fxn+12];
  sf2type      = gmem[group+fxn+13];
  ssn2         = gmem[group+fxn+14];
  spw          = gmem[group+fxn+15];
  sbal         = gmem[group+fxn+16];
  smodaudio    = gmem[group+fxn+17];
  satt         = gmem[group+fxn+18];
  smodp        = gmem[group+fxn+19];
  sccIn        = gmem[group+fxn+20];
  mrange       = gmem[group+fxn+21];
  spitch       = gmem[group+fxn+23];
  spdepth      = gmem[group+fxn+24];
);  

pitch        = spitch-1;
modcentre    = spitchc;
modlev       = pitchm;
pwmodlev     = pwidm*$pi;
sn1          = floor(ssn1*128);
snr1         = filt1m*128;
sn2          = floor(ssn2*128);
snr2         = filt2m*128;
f1type       = sf1type;
f2type       = sf2type;
tbal         = (sbal-1.5)*2;
balr         = (balm-0.5)*2;
pulsew       = spw*$pi;
harm         = sharm+1;
detune       = 2^(soct + ssemi/12 + scent/1200);
portaval     = sport;
modaudio     = smodaudio;
voltarget    = satt;
volstep      = (voltarget-prevol)/volcount;
volstepcount = volcount;

/////////////////////////portamento/////////////////////////
portastep = floor(max(1,((srate/samplesblock)*portaval)));

slidermove = 0;
); // end if slidermove

/////////////////////////Get MIDI inputs/////////////////
// MIDI keyboard pitch control
while (midirecv(offset, msg1, msg2, msg3))
  (  
  // Extract message type and channel
  status = msg1 & $xF0;
  // Is it a note on event?
     status == $x90  && pitch == -1 ?
      (
       // Get note value
       note = msg2 & $x7F;
       // Calculate frequency and phase position increment
       freq = 2^((note-69)/12)*440*harm*detune;
       blkadjtarget = tau*freq/srate;
       // Adjust for portamento if required
       adjstep = (blkadjtarget - blkadj)/portastep;
       blkadj != blkadjtarget ? ( blkadj += adjstep);
      );
////////////////////////Get modulation CC messages//////// 
  // Extract message type and channel
     status == $xB0 ?
      (
          // Pitch Modulation
          msg2 == pitchccmsb || msg == pitchcclsb ?
         (
          msg2 == pitchccmsb ? modvalmsb = msg3;
          msg2 == pitchcclsb ? modvallsb = msg3;
          modval = ((modvalmsb/(127.9921875/2))+(modvallsb/8192)) - (1+modcentre);
          modlevel = modval * modlev;
          modadj = 2^(modlevel*spdepth);
          );
          // Filter 1 Modulation
          msg2 == filt1ccmsb || msg2 == filt1cclsb ?
          (
          msg2 == filt1ccmsb ? f1valmsb = msg3;
          msg2 == filt1cclsb ? f1vallsb = msg3;
          f1val = (f1valmsb/127.9921875)+(f1vallsb/16384);
          ln1 = floor(sn1+(f1val*(snr1-sn1)));
          );
          // Filter 2 Modulation
          msg2 == filt2ccmsb || msg2 == filt2cclsb ?
          (
          msg2 == filt2ccmsb ? f2valmsb = msg3;
          msg2 == filt2cclsb ? f2vallsb = msg3;
          f2val = (f2valmsb/127.9921875)+(f2vallsb/16384);
          ln2 = floor(sn2+(f2val*(snr2-sn2)));
          );
          // Pulse Width Modulation
          msg2 == pwccmsb || msg == pwcclsb ?
          (
          msg2 == pwccmsb ? pwvalmsb = msg3;
          msg2 == pwcclsb ? pwvallsb = msg3;
          pwval = (pwvalmsb/127.9921875)+(pwvallsb/16384);
          pw = pulsew+pwval*(pwmodlev-pulsew);
          );
          // Mix Modulation
          msg2 == balccmsb || msg2 == balcclsb ?
          (
          msg2 == balccmsb ? balvalmsb = msg3;
          msg2 == balcclsb ? balvallsb = msg3;
          balval = (balvalmsb/127.9921875)+(balvallsb/16384);
          bal = tbal+balval*(balr-tbal);
          );                 
      );
      
      status == $xE0 ?
      (
       // Pitch bend
       pitchbend_val = (msg2/8192)+(msg3/(64))-1;
       pitchadj = 2^(pitchbend_val*spdepth);
      );
      
  //Pass through all
   midisend(offset, msg1, msg2, msg3); 
);

/////////////////////////Slider pitch control//////////////
pitch > -1 ? (
  freq = 2^((pitch-69)/12)*440*harm*detune;
  blkadj = tau*freq/srate;
);
//Set variables to slider values if no modulatuion is required//
pitchccmsb == -1 ? (
  modadj = 1;
  modlevel = 0;
  );
f1type == 0 ? ln1 = sn1;
f2type == 0 ? ln2 = sn2;
filt1ccmsb == -1 ? ln1 = sn1;
filt2ccmsb == -1 ? ln2 = sn2;
pwccmsb == -1 ? pw = pulsew;
balccmsb == -1 ? bal = tbal;

///////////////////////Cutoff Frequencies///////////////////
cutoff1 = 2^(sqrt(ln1)*1.26287);
cutoff2 = 2^(sqrt(ln2)*1.26287);
// n1 = the number of harmonics for saw 1.
f1type == 0 ? n1 = floor(20000/(freq*modadj*pitchadj)); 
f1type == 1 ? n1 = floor(cutoff1/(freq*modadj*pitchadj));
f1type == 2 ? n1 = max(1,min(ln1,floor(20000/(freq*modadj*pitchadj))));
// n2 = the number of harmonics for saw 2.
f2type == 0 ? n2 = floor(20000/(freq*modadj*pitchadj)); 
f2type == 1 ? n2 = floor(cutoff2/(freq*modadj*pitchadj));
f2type == 2 ? n2 = max(1,min(ln2,floor(20000/(freq*modadj*pitchadj))));
f2type == 3 ? n2 = n1;

g = 0.42;
p1 = tau/n1;
q1 = 1-2/n1;
p2 = tau/n2;
q2 = 1-2/n2;

/////////////////Set Counter/////////////////////////////////
//count = 0;

@sample
poffset = (pw/$pi)-0.5;
//count += 1;
/////////////////////////Volume Change Smoothing//////////////
vol != voltarget ?
(
  volstepcount >=0 ?
   (
    vol += volstep;
    volstepcount -= 1;
    );
);

//////////////////Set Phase Increment/////////////////////////
modaudio != 1 ? inc = blkadj:( // if FM is selected:
                             inc = blkadj*(1+((spl0+spl1)/2))*10;
                             );

////////////////////////////Define waveform////////////////////
bal < 1 ? y1 = sawtooth(x1,p1,q1,g,n1);
bal > -1 ? y2 = sawtooth(x2,p2,q2,g,n2);
bal1 = bal < 0 ? 1 : 1-bal;
bal2 = bal > 0 ? 1 : 1+bal;
yy=((y1*bal1)-(y2*bal2)-poffset*1.697*min(bal1,bal2))*vol;

//////////////////////Audio output/////////////////////////////
  modaudio == 0 ? (          //Unmodulated waveform
     spl0 = yy+spl0;
     spl1 = yy+spl1;
     )
     :
     (
    modaudio == 2 ? (        //Ring Modulation   
     spl0 = (yy*spl0);
     spl1 = (yy*spl1);
        )
        :
        (
         modaudio == 3 ? (   //Amplitude Modulation
         spl0 = ((0.5+(yy/2))*spl0);
         spl1 = ((0.5+(yy/2))*spl1);           
          )
          :
          (                  //Frequency Modulation
          spl0 = yy;
          spl1 = yy;
         );
      );
   );      

//////////Buffer results for graphics////////
looplen = srate/8;
bufflen = floor(looplen);
  bpos<=bufflen ? (
    bpos[0] = x;
    modaudio == 0 ? (bpos+bufflen)[0] = yy:(bpos+bufflen)[0] = (spl0+spl1)/2;
    );
  
buffcount+=1;
buffcount > looplen ? (
  buffcount-=looplen;
  );
bpos=floor(buffcount);

////////Increment phase position///////////
x += inc*modadj*pitchadj;
x >= tau ? x-= tau;
x1 = x - pw;
x1 < 0 ? x1+= tau;
x2 = x + pw;
x2 > tau ? x2-= tau;

prevol = vol;

/////////////////////////////////graphics//////////////////////////////////////
@gfx 500 200

xmin = 25;
xrng = 150;
xscl = xrng/tau;
xmax = xmin+xrng;
ymin = 25;
yrng = 100;
yscl = yrng/2;
ymax = ymin+yrng;
mxmin = xmax+160;
mxrng = 100;
myrng = 6;

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1; 

//Draw waveform
gx = 1;
while (gx <= bufflen)(
  gfx_x = xmin+xscl*gx[0];
  gfx_y = ymin+yscl-yscl*(gx+bufflen)[0];
  gfx_y <= ymax && gfx_y >= ymin ? gfx_setpixel(0,1,0);
  gx+=1;
);

// Text
gfx_r=1;
gfx_b=1;
gfx_g=1;
gfx_a=0.7;
gfx_x=67;
gfx_y=8;
gfx_drawstr("Waveform");
gfx_x=mxmin-45;
gfx_y=8;
gfx_drawstr("Modulation");
gfx_x=mxmin-110;
gfx_y=23;
gfx_drawstr("  Target  CC     Level");
gfx_x=25;
gfx_y=ymax+10;
gfx_drawstr("Base Frequency  = ");
gfx_drawnumber(freq,0);
gfx_drawstr(" Hz");
pitchccmsb > -1 ?
(
gfx_x=25;
gfx_y=ymax+25;
gfx_lineto(gfx_x, gfx_y,0);
gfx_drawstr("Modulated Freq. = ");
gfx_drawnumber(freq*modadj*pitchadj,0);
gfx_drawstr(" Hz");
);
gfx_x=25;
gfx_y=ymax+40;
gfx_drawstr("Saw 1 Harmonics = ");
gfx_drawnumber(n1,0);
gfx_x=25;
gfx_y=ymax+55;
gfx_drawstr("Saw 2 Harmonics = ");
gfx_drawnumber(n2,0);

// Linework
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = xmin;
gfx_y = ymin;
gfx_lineto(xmin+(xscl*tau),ymin);
gfx_x = xmin;
gfx_y = ymin+yscl;
gfx_lineto(xmin+(xscl*tau),ymin+yscl);
gfx_x = xmin;
gfx_y = ymin+yscl+yscl;
gfx_lineto(xmin+(xscl*tau),ymin+yscl+yscl);
gfx_a =1;
gfx_x = xmin-12;
gfx_y = ymin-5;
gfx_drawstr("1");
gfx_x = xmin-12;
gfx_y = ymin-5+yscl;
gfx_drawstr("0");
gfx_x = xmin-20;
gfx_y = ymin-5+yscl+yscl;
gfx_drawstr("-1");

// Modulation Indicators
// Pitch
smodp == 0 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = ymin+15;
gfx_drawstr("   Pitch  ");
pitchccmsb <  0 ? gfx_drawstr("--"):
pitchccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(pitchccmsb,0)):
gfx_drawnumber(pitchccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+15;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+(1+modcentre)*(mxrng/2);
gfx_y = ymin+15+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(gfx_x+(modlevel*(mxrng/2)),gfx_y+4);
// Saw 1 Filter
gfx_r = 1;
gfx_g = 0;
smodp == 1 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = ymin+35;
gfx_drawstr("Filter 1  ");
filt1ccmsb <  0 ? gfx_drawstr("--"):
filt1ccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(filt1ccmsb,0)):
gfx_drawnumber(filt1ccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+35;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gsn1 = (f1type == 0 ? 1:ssn1);
gfx_x = mxmin+gsn1*mxrng;
gfx_y = ymin+35+5;
gfx_lineto(gfx_x,gfx_y-4);
gn1 = (f1type == 0 ? 128:ln1);
gfx_rectto(mxmin+(ln1/128)*mxrng,gfx_y+4);
// Saw 2 Filter
gfx_r = 1;
gfx_g = 0;
smodp == 2 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = ymin+55;
gfx_drawstr("Filter 2  ");
filt2ccmsb <  0 ? gfx_drawstr("--"):
filt2ccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(filt2ccmsb,0)):
gfx_drawnumber(filt2ccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+55;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+(f2type == 0 ? 1:f2type == 3 ? gsn1:ssn2)*mxrng;
gfx_y = ymin+55+5;
gfx_lineto(gfx_x,gfx_y-4);
gn2 = (f2type == 0 ? 128:ln2);
gfx_rectto(mxmin+(f2type == 3?(gn1/128):(gn2/128))*mxrng,gfx_y+4);
// Phase Offset
gfx_r = 1;
gfx_g = 0;
smodp == 3 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = ymin+75;
gfx_drawstr("   Phase  ");
pwccmsb <  0 ? gfx_drawstr("--"):
pwccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(pwccmsb,0)):
gfx_drawnumber(pwccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+75;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+spw*mxrng;
gfx_y = ymin+75+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(mxmin+(pw/$pi)*mxrng,gfx_y+4);
// Mixing
gfx_r = 1;
gfx_g = 0;
smodp == 4 ? gfx_a = 1: gfx_a = 0.5;
gfx_x = mxmin-110;
gfx_y = ymin+95;
gfx_drawstr("     Mix  ");
balccmsb <  0 ? gfx_drawstr("--"):
balccmsb < 10 ? (gfx_drawstr("0");
gfx_drawnumber(balccmsb,0)):
gfx_drawnumber(balccmsb,0);
gfx_x = mxmin;
gfx_y = ymin+95;
gfx_lineto(gfx_x+mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y+myrng);
gfx_lineto(gfx_x-mxrng,gfx_y);
gfx_lineto(gfx_x,gfx_y-myrng);
gfx_r = 0;
gfx_g = 1;
gfx_x = mxmin+((1+tbal)/2)*mxrng;
gfx_y = ymin+95+5;
gfx_lineto(gfx_x,gfx_y-4);
gfx_rectto(mxmin+((1+bal)/2)*mxrng,gfx_y+4);
