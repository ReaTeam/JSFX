version: 2.04
desc: ReaRack2 - Amplifier
noindex: true
author:    Malcolm Smith
           Copyright(C) 2017 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
           
license:   LGPL - http://www.gnu.org/licenses/lgpl.html

about:     Amplifier module for the ReaRack2 modular JSFX synth system.

changelog: Version 2.04 (07/04/2019) Bug fixes for previous release.
           Version 2.03 (07/03/2019) Improved passing of data from @block to @sample for smoother volume curves.
           Version 2.02 (24/07/2018) Added - get attack rate from Envelope Multi-Tool.
           Version 2.0.1 (10/02/2018) Improved accuracy of input CC decoding.
           Version 2.0.0 (10/12/2017) Initial version 2 release.

slider1:midor=0<0,1,1{Midi CC,Manual}>Control Method
slider2:ccIn=21<0,64,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>CC Input
slider4:getattr=0<0,16,1{Manual,Group 1 Master EG Plateau,Group 2 Master EG Plateau,Group 3 Master EG Plateau,Group 4 Master EG Plateau,Group 5 Master EG Plateau,Group 6 Master EG Plateau,Group 7 Master EG Plateau,Group 8 Master EG Plateau,Group 9 Master EG Plateau,Group 10 Master EG Plateau,Group 11 Master EG Plateau,Group 12 Master EG Plateau,Group 13 Master EG Plateau,Group 14 Master EG Plateau,Group 15 Master EG Plateau,Group 16 Master EG Plateau,Group 1 Master Multi-Tool Min. Stg. Len.,Group 2 Master Multi-Tool Min. Stg. Len.,Group 3 Master Multi-Tool Min. Stg. Len.,Group 4 Master Multi-Tool Min. Stg. Len.,Group 5 Master Multi-Tool Min. Stg. Len.,Group 6 Master Multi-Tool Min. Stg. Len.,Group 7 Master Multi-Tool Min. Stg. Len.,Group 8 Master Multi-Tool Min. Stg. Len.,Group 9 Master Multi-Tool Min. Stg. Len.,Group 10 Master Multi-Tool Min. Stg. Len.,Group 11 Master Multi-Tool Min. Stg. Len.,Group 12 Master Multi-Tool Min. Stg. Len.,Group 13 Master Multi-Tool Min. Stg. Len.,Group 14 Master Multi-Tool Min. Stg. Len.,Group 15 Master Multi-Tool Min. Stg. Len.,Group 16 Master Multi-Tool Min. Stg. Len.}>Attack/Release Rate Method
slider5:sattr=0.25<0,5,0.001>Attack/Release Rate (milliseconds)
slider7:overd=1<1,11>Overdrive
slider8:soutlevelatt=1<0,1>Output Level
slider10:sclass=0<0,3,1{None,Master,Slave}>Class
slider11:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Group

options:gmem=ReaRack

@init
fxn = 120;
buffcount = 0;

@slider

slidermove = 1;

@block
scount = 0;
sclass == 2 ? slidermove  = gmem[group+fxn+5];

slidermove == 1 ?
(
modccmsb = ccIn <= 32 ? ccIn-1:ccIn + 31;
modcclsb = modccmsb+32;

//Store slider values
group = sgroup*10;
sclass == 1 ? (
  gmem[group+fxn+0] = sattr;
  gmem[group+fxn+1] = overd;
  gmem[group+fxn+2] = soutlevelatt;
  gmem[group+fxn+3] = midor;
  gmem[group+fxn+4] = ccIn;
  gmem[group+fxn+5] = slidermove;
  gmem[group+fxn+6] = getattr;
);

// Retrieve slider values
sclass == 2 ? ( 
  sattr        = gmem[group+fxn+0];
  overd        = gmem[group+fxn+1];
  soutlevelatt = gmem[group+fxn+2];
  midor        = gmem[group+fxn+3];
  ccIn         = gmem[group+fxn+4];
  getattr      = gmem[group+fxn+6];
);

outlevelatt = 2^(((soutlevelatt-1)*60)/6);

slidermove = 0;
); // end if slidermove

getattr > 0 && getattr <= 16 ? sattr = gmem[(getattr-1)*1000+160+34];
getattr > 16 ? sattr = gmem[(getattr-17)*1000+350+17]*1000;

bufflen = max(1,floor((sattr/1000)*srate));

modccmsb   > -1 ? memset(bufflen,-2,samplesblock);
  
while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;    
  // Is it a controller event?
  status == $xB0 ?
  (
    // Is it the right CC?
    msg2 == modccmsb ? modvalmsb = msg3;
    msg2 == modcclsb ? modvallsb = msg3;
    modval = (modvalmsb/127.9921875)+(modvallsb/16384);
    modval < 0.0001 ? 0[bufflen+offset] = 0:
    0[bufflen+offset] = 2^(((modval-1)*60)/6);
  );
  // Pass thru
  midisend(offset, msg1, msg2, msg3); 
);     

 
@sample
0[bufflen+scount] >= 0 ? outlevel = 0[bufflen+scount];
//outlevel = 0[bufflen+scount];

midor == 0 ?
(
  sattr != presattr ?
  (
  buffsum = 0;
  buffcount = 0;
  buffstate = 0;
  presattr = sattr;
  );
  buffstate == 1 ? buffsum -= buffcount[0];
  buffsum += outlevel;
  buffcount[0] = outlevel;
  buffcount += 1;
  buffcount >= bufflen ?
  (
  buffcount = 0;
  buffstate = 1;
  );
  outlevelavg = buffsum / bufflen;
):
outlevelavg = 1;

// Overdrive
overd > 1 ?
 (
 spl0 *= overd;
 spl1 *= overd;


// Distortion
spl0 > 1 || spl0 < -1 ?
  (
  spl0 = abs(spl0) > 2 ? sign(spl0)*1.25 : sign(spl0) + (spl0-sign(spl0))*(1/spl0^2);
  disto0 = abs(spl0)-1;
  );
spl1 > 1 || spl1 < -1 ?
  (
  spl1 = abs(spl1) > 2 ? sign(spl1)*1.25 : sign(spl1) + (spl1-sign(spl1))*(1/spl1^2);
  disto1 = abs(spl1)-1;
  );
outlevelavg > 0 ? disto = 4*max(disto0,disto1): disto = 0;
);
// Output
spl0 = spl0*outlevelavg*outlevelatt;
spl1 = spl1*outlevelavg*outlevelatt;

scount += 1;

@gfx 400 40

gfx_r = 1;
gfx_g = 1;
gfx_b = 1;
gfx_a = 0.7;
gfx_x=25;
gfx_y=17;
overd > 1 ?
  gfx_drawstr("Distortion: On"):
  gfx_drawstr("Distortion: Off");
disto > 0 ? blink = 1:blink = 0;
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 1;
gfx_circle(160,20,6,0);
gfx_r = disto;
gfx_circle(160,20,5,blink);

