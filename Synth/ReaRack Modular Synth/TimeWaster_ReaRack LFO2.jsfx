version: 2.0.1
desc:ReaRack - LFO 2
noindex: true
author:  Malcom Smith
changelog:
         2.0.2 (3/9/2016)  Changed default pitch mod CC input to Off.
         2.0.1 (29/8/2017) Various bug fixes regarding the frequency modulation function.
         2.0.0 (11/7/2017) Added frequency modulation option.
         1.0.1 (11/9/2016) Added counter to calculate block offset, for improved timing accuracy.
         1.0.0 (2/9/2016)  Initial Release.

Copyright(C) 2016 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
License: LGPL - http://www.gnu.org/licenses/lgpl.html
*/

slider1:0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input - Frequency Modulation
slider2:21<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Output
slider3:1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Ouput Channel
slider4:0<0,11,1{Off,32,16,8,4,2,1,1/2,1/4,1/8,1/16,1/32,1/64}>Sync (Off/Beats per Cycle)
slider5:0<0,2,1{Off,Duplet,Triplet}>Tuplet
slider6:1<0.1,24,0.01>Frequency (sync off)
slider7:1<0.1,24,0.01>Frequency Modulation Range
slider8:0<0,3,1{Sine,Saw - Triangle (PW),Square (PW),Random Step}>Wave Shape
slider9:0<-0.9922,0.9922,0.01>Shape Control
slider10:0<-0.5,0.5>Phase

in_pin:none
out_pin:none

@init

  syncval == slider4;
  tupval == slider5;
  freqval == slider6;
  
  tupval == 0 ? tuplet = 1:
  tupval == 1 ? tuplet = (2/3):
  tupval == 2 ? tuplet = (3/2);
  
  tau = $pi*2.0;
  adj = tau/(srate/samplesblock); 
  (syncval == 0) ? (     
        freq = freqval;
        )
        :
        (
        freq = ((2^(syncval-6))/(60/tempo))*tuplet;
        );
  inbeatpos = beat_position - floor(beat_position);
  pos = freq % inbeatpos;
  prephase = 0;  
  
@slider
  freqcc = slider1-1;
  modcc = slider2;
  chanout = slider3-1;
  syncval = slider4;
  tupval = slider5;
  freqval = slider6;
  modlev = slider7 - slider6;
  shape = slider8;
  pw = slider9 * $pi + $pi;
  phase = slider10*tau;
  phaseadj = (slider10*tau)-prephase;
  phaseshift = 1;
  
  tupval == 0 ? tuplet = 1:
  tupval == 1 ? tuplet = (2/3):
  tupval == 2 ? tuplet = (3/2);
  
  
@block
offset = 0;
modstatus = $xB0|chanout;
tol = 1.1*samplesblock/srate;
 

(syncval == 0) ? (     
      freq = freqval;
      )
      :
      (
      freq = ((2^(syncval-4))/(60*4/tempo))*tuplet;
      );
      

////////////////////////Get modulation CC messages////////
while (midirecv(offset, msg1, msg2, msg3))
( 
  // Extract message type and channel
  status = msg1 & $xF0;
  // Extract message type and channel
     status == $xB0 ?
      (
          // Frequency Modulation
          msg2 == freqcc ?
         (
          modval = (msg3/127);
          modlevel = modval * modlev;
          modfreq = freq+modlevel;
          );
      );
    // Pass through
    midisend(offset, msg1, msg2, msg3);
);

freqcc == -1 ? modfreq = freqval;
adj = (tau*modfreq/srate);

@sample
// Generate waveforms and send out MIDI

(shape == 0) ? (
  // sine
  rawccval = 63.5+(sin(pos)*63.5);
  (rawccval % 1) < tol ?
  ccval = floor(rawccval);
) :

(shape == 1) ? (
  // triangle  
  k = pw - ((pos<pw) ? 0 : tau);
  x = pos - ((pos<pw) ? 0 : tau);
  
  rawccval =(127*(x/k + 1))-127;
  (rawccval % 1) < tol ?
  ccval = floor(rawccval);
) : 

(shape == 2) ? (
  // square
  ccval = (pos<pw) ? 127 : 0;
)  :

(
//Random step
  pos >= pw && step == 1 ?
    (
     pos1 = 10;
     step = 2;
     );
  pos < pos1 ? ccval = floor(rand(127)+0.5);
  pos1 = pos;
);
//Send CC message
chanout == -1 ?
(
  preccval != ccval ?
  (
   n = 0;
   loop(16,
   midisend(offset,$xB0+n,modcc,ccval);
   presentcc = preccval;
   n += 1;
    );
  )
):(
  preccval != ccval ?
  (
   midisend(offset,modstatus,modcc,ccval);
   presentcc = preccval;
   );
);
phaseshift == 1 ?
(
pos=pos+adj+phaseadj;
prephase = phase;
phaseshift = 0;
):(
pos=pos+adj;
);
pos >= tau ?
  (
   pos -= tau;
   step = 1;
  );
     
preccval = ccval;
offset +=1;

@gfx 400 150

gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = freq < 15 ? ((freq)/20)+((1-freq/15)*((ccval)/127)):0.75;

(shape == 0) ? (
  // sine
  gpos = 0;
  gfx_x = 25;
  gfx_y = 80;
  while (gpos < tau)(
    gfx_lineto(25+(20*gpos),80-(40*(sin(gpos))));
    gpos+=.05;
  );
) : ( // else
  (shape == 1) ? (
    // triangle
    gfx_x = 25;
    gfx_y = 120;
    gfx_lineto(25+(20*pw),40);
    gfx_lineto(25+(20*tau),120);
  ) : (
    (shape == 2) ? (
      // square
      gfx_x = 25;
      gfx_y = 120;
      gfx_lineto(25,40);
      gfx_lineto(25+(20*pw),40);
      gfx_lineto(25+(20*pw),120);
      gfx_lineto(25+(20*tau),120);
    ) : (
      (shape == 3) ? (
      // random
      gfx_a = 1;
      gfx_x = 25;
      step == 1 ?
        (
         gfx_y = 120-(ccval/1.5875);
         gfx_lineto(25+(20*pw),120-(ccval/1.5875));
         gfx_lineto(25+(20*pw),120-(presentcc/1.5875));
         gfx_lineto(25+(20*tau),120-(presentcc/1.5875));
         ):(
            gfx_y = 120-(presentcc/1.5875);
            gfx_lineto(25+(20*pw),120-(presentcc/1.5875));
            gfx_lineto(25+(20*pw),120-(ccval/1.5875));
            gfx_lineto(25+(20*tau),120-(ccval/1.5875));
            );
      );
    );   
  );
);

gfx_x=gfx_y=5;
gfx_lineto(gfx_x, gfx_y,0);
gfx_r=gfx_b=0;
gfx_g=gfx_a=1;
gfx_drawstr("Frequency = ");
gfx_drawnumber(modfreq,2);
gfx_drawstr(" Hz");

gfx_r = 1;
gfx_g = 0;
gfx_a = 0.5;
gfx_x = 25;
gfx_y = 40;
gfx_lineto(25+(20*tau),40);
gfx_x = 25;
gfx_y = 120;
gfx_lineto(25+(20*tau),120);
phase >= 0 ?
(  
  gfx_x = 25+(20*phase);
  gfx_y = 40;
  gfx_lineto(25+(20*phase),120);
  ):(  
    gfx_x = 25+(20*tau)+(20*phase);
    gfx_y = 40;
    gfx_lineto(25+(20*tau)+(20*phase),120);
    );
gfx_a =1;
gfx_x = 1;
gfx_y = 35;
gfx_drawstr("127");
gfx_x = 13;
gfx_y = 115;
gfx_drawstr("0");

