version: 2.0.0
desc:ReaRack - Envelope Generator 2 Max
noindex: true
author: Malcolm Smith
about: MIDI Envelope Generator module for the ReaRack modular JSFX synth system,
       lite version (modulation sliders have been hidden to reduce GUI size).
changelog: Added timebase option. Revised envelope time slider method.
           Added "trigger mode" option.

/*Version 1.0.0 (5/7/2016) Initial release as ReaRack - Envelope Generator.

  Version 2.0.0 (5/7/2017)  Initial realease as ReaRack - Envelope Generator Max. This                                version of the envelope generator includes includes
                            modulation input.
                            
  Copyright(C) 2016 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).
  License: LGPL - http://www.gnu.org/licenses/lgpl.html
*/

slider1:sccIn1=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Delay)
slider2:sccIn2=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Attack)
slider3:sccIn3=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Decay)
slider4:sccIn4=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Sustain)
slider5:sccIn5=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Release)
slider6:sccIn6=0<0,127,1{Off,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Input (Hold)
slider7:smycc=20<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC Output
slider8:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Output Channel
slider9:trigmode=0<0,3,1{Re-trigger from zero,Re-trigger from last value,Legato - re-trigger from zero,Legato - re-trigger from last value}>Trigger mode*
slider10:stbase=0<0,1,1{Seconds,Beats}>Timebase*
slider11:delunit=4<0,9,1{1/16,1/8,1/4,1/2,1,2,4,8,16,32> DELAY time -- Coarse*
slider12:delt=0<0,1,0.01>DELAY time ------ Fine*
slider13:delm=1<0,1,0.01>Delay time modulation range*
slider15:attunit=4<0,9,1{1/16,1/8,1/4,1/2,1,2,4,8,16,32> ATTACK time -- Coarse*
slider16:attt=0<0,1,0.01>ATTACK time ------ Fine*
slider17:attm=0<0,1,0.01>Attack time modulation range*
slider18:attss=0<-1,1,0.1>Attack envelope shape*
slider20:decunit=4<0,9,1{1/16,1/8,1/4,1/2,1,2,4,8,16,32> DECAY time -- Coarse*
slider21:dect=1<0,1,0.01>DECAY time ------ Fine*
slider23:decm=1<0,1,0.01>Decay time modulation range*
slider22:decss=0<-1,1,0.1>Decay envelope shape*
slider25:ssusset=63<0,127,1>SUSTAIN level*
slider26:susm=63<0,127,1>Sustain level modulation range*
slider27:susrr=0<-1,1>Sustain level ramp rate*
slider29:relunit=4<0,9,1{1/16,1/8,1/4,1/2,1,2,4,8,16,32> RELEASE time -- Coarse*
slider30:relt=1<0,1,0.01>RELEASE time ------ Fine*
slider31:relm=1<0,1,0.01>Release time modulation range*
slider32:relss=0<-1,1,0.1>Release envelope shape*
slider34:holdunit=4<0,9,1{1/16,1/8,1/4,1/2,1,2,4,8,16,32> HOLD time -- Coarse*
slider35:holdt=0<0,1,0.01>HOLD time ------ Fine*
slider36:holdm=1<0,1,0.01>Hold time modulation range*
slider38:svelset=1<0,1>Velocity Sensitivity*
slider39:sclass=0<0,3,1{None,Master,Slave}>*Class
slider40:sgroup=0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Class Group

options:gmem=ReRackEGmax

in_pin:none
out_pin:none
 
@init
blknum = 0;
envlev = 0;
vel = 127;
preenvlevV = 0;
sliderbits = 2^0+2^1+2^2+2^3+2^4+2^5+2^6+2^7+2^8+2^9+2^10+2^11+2^12+2^13+2^14+2^15+2^16+2^17+2^18+2^19+2^20+2^20+2^21+2^22;

@slider
group = sgroup*40;

sclass == 1 ? (
  gmem[group+0] = trigmode;
  gmem[group+1] = stbase;
  gmem[group+2] = delunit;
  gmem[group+3] = delt;
  gmem[group+4] = delm;
  gmem[group+5] = attunit;
  gmem[group+6] = attt;
  gmem[group+7] = attss;
  gmem[group+8] = decunit;
  gmem[group+9] = dect;
  gmem[group+10] = decm;
  gmem[group+11] = decss;
  gmem[group+12] = ssusset;
  gmem[group+13] = susm;
  gmem[group+14] = susrr;
  gmem[group+15] = relunit;
  gmem[group+16] = relt;
  gmem[group+17] = relm;
  gmem[group+18] = relss;
  gmem[group+19] = holdunit;
  gmem[group+20] = holdt;
  gmem[group+21] = holdm;
  gmem[group+22] = svelset;  
  );
 
@block

sclass == 2 ? (
  trigmode = gmem[group+0];
  stbase = gmem[group+1];
  delunit = gmem[group+2];
  delt = gmem[group+3];
  delm = gmem[group+4];
  attunit = gmem[group+5];
  attt = gmem[group+6];
  attss = gmem[group+7];
  decunit = gmem[group+8];
  dect = gmem[group+9];
  decm = gmem[group+10];
  decss = gmem[group+11];
  ssusset = gmem[group+12];
  susm = gmem[group+13];
  susrr = gmem[group+14];
  relunit = gmem[group+15];
  relt = gmem[group+16];
  relm = gmem[group+17];
  relss = gmem[group+18];
  holdunit = gmem[group+19];
  holdt = gmem[group+20];
  holdm = gmem[group+21];
  svelset = gmem[group+22];  
    
  sliderchange(sliderbits);
  
  );

stbase == 0 ? tbase = 1 : tbase = 60/tempo;
ccIn1 = sccIn1-1;
ccIn2 = sccIn2-1;
ccIn3 = sccIn3-1;
ccIn4 = sccIn4-1;
ccIn5 = sccIn5-1;
ccIn6 = sccIn6-1;
mycc = smycc;
chanout = schanout-1;

delset = delt*(2^(delunit-3))*tbase;
gdel = delt*(2^(delunit-3));
delrange = delm*(2^(delunit-3))*tbase;
gdelr = delm*(2^(delunit-3));

attset = attt*(2^(attunit-3))*tbase;
gatt = attt*(2^(attunit-3));
attrange = attm*(2^(attunit-3))*tbase;
aindex = attss < 0 ? ((attss/2)+1)^2 : (attss*2)+1^2;
gattr = attm*(2^(attunit-3));

decT < 0.001 ? decT = 0.001;
decset = dect*(2^(decunit-3))*tbase;
gdec =  dect*(2^(decunit-3));
decrange = decm*(2^(decunit-3))*tbase;
dindex = decss < 0 ? ((-decss)+1)^2 : ((-decss/2)+1)^2;
gdecr = decm*(2^(decunit-3));

susset = ssusset;
susrange = susm;
slope = (((srate/samplesblock)*tbase)*((susrr)^3))/50;

relT < 0.001 ? relt = 0.001;
relset = relt*(2^(relunit-3))*tbase;
grel = relt*(2^(relunit-3));
relrange = relm*(2^(relunit-3))*tbase;
rindex = relss < 0 ? ((-relss)+1)^2 : ((-relss/2)+1)^2;
grelr = relm*(2^(relunit-3));

holdset = holdt*(2^(holdunit-3))*tbase;
holdrange = holdm*(2^(holdunit-3))*tbase;
velset = svelset;
  
dels = (srate/samplesblock)*delset;
delr = (srate/samplesblock)*delrange;
atts = (srate/samplesblock)*attset;
attr = (srate/samplesblock)*attrange;
decs = (srate/samplesblock)*decset;
decr = (srate/samplesblock)*decrange;
suss = susset;
susr = susrange;
rels = (srate/samplesblock)*relset;
relr = (srate/samplesblock)*relrange;
holds = (srate/samplesblock)*holdset;
holdr = (srate/samplesblock)*holdrange;

modstatus = $xB0+chanout;

while (midirecv(offset, msg1, msg2, msg3))
(  
  // Extract message type
  status = msg1 & $xF0;
    // Is it a note on event?
    status == $x90 ?
    trigmode == 2 && envlevV > 0 && noteon >= 1 ? noteon += 1 : (
     (
      // Trigger Envelope
      blknum = 0;
      envon = 1;
      noteon = 1;
      holdon = 1;
      trig = 1;
      ramp = 0;
      // Get note
      note = msg2;
      // Get velocity
      vel = msg3;
      //End of Get note and velocity
      );
      )
      :
      (
      // Is it a note off event?
       status == $x80 ?
       trigmode == 2 && envlevV > 0 ? noteon -= 1 :
          (
          // Get note
           msg2 == note ?
            (
             // Release Envelope    
              noteon = 0;
            )
         )
      );
       // Is it a controller event?
       // Is it the right CC for input 1? 
       status == $xB0 &&  msg2 == ccIn1 ? 
      (
       delmod = msg3/127;
      );
       // Is it a controller event?
       // Is it the right CC for input 2? 
       status == $xB0 &&  msg2 == ccIn2 ? 
      (
       attmod = msg3/127;
      );
       // Is it a controller event?
       // Is it the right CC for input 3?         
       status == $xB0 &&  msg2 == ccIn3 ? 
      (
       decmod = msg3/127;
      );
       // Is it a controller event?
       // Is it the right CC for input 4?         
       status == $xB0 &&  msg2 == ccIn4 ? 
      (
       susmod = msg3/127;
      );
       // Is it a controller event?
       // Is it the right CC for input 5?         
       status == $xB0 &&  msg2 == ccIn5 ? 
      (
       relmod = msg3/127;
      );
      // Is it a controller event?
      // Is it the right CC for input 6?         
       status == $xB0 &&  msg2 == ccIn6 ? 
      (
      holdmod = msg3/127;
      );
    // Pass through
    midisend(offset, msg1, msg2, msg3);
);

ccIn1 == -1 ? delmod = 0;
ccIn2 == -1 ? attmod = 0;
ccIn3 == -1 ? decmod = 0;
ccIn4 == -1 ? susmod = 0;
ccIn5 == -1 ? relmod = 0;
ccIn6 == -1 ? holdmod = 0;
del = dels + ((delr-dels) * delmod);
att = atts + ((attr-atts) * attmod);
dec = decs + ((decr-decs) * decmod);
sus = floor(suss + ((susr-suss) * susmod));
rel = ceil (rels + ((relr-rels) * relmod));
holdpos = del + (holds + ((holdr-holds) * holdmod));
attpos = del + att;
decpos = attpos + dec;
relpos = (decpos + rel)*1.333;

blknum > holdpos  ? holdon = 0;

noteon == 0 && holdon == 0 && envon == 1? (
  envon = 0;
  blkrel = blknum;
  rellev = envlev;
  rellevi = ((127-rellev)/127)^rindex;
);

trigmode == 1 || trigmode == 3? (
  blknum <= del ? envlevi = envlev;
  ):
  envlevi = 0;
  
envon == 1 ?
(
  blknum < del ? (
  envlev = 0;
  ):
  blknum < attpos ? (
  envlev = floor((((1-((att-(blknum - del))/att)^(1/aindex)))*(127-envlevi))+envlevi+0.5);
  ):
  blknum < decpos ? (
  envlev = floor(((1-(((blknum-attpos)*(((127-sus)/127)^dindex))/dec)^(1/dindex))*127)+0.5);
  ):
  blknum >= decpos ? (
  trig == 1 ? (
    envlev = sus;
    trig = 0;
    ramp = slope;
    ):(
    envlev = floor(sus + ramp + 0.5);
    envlev < 0 ? envlev = 0;
    envlev > 127 ? envlev = 127;  
    ramp += slope;  
    );
  );
);
envon == 0 ?
(
  envlev > 0 ? (
  envlev = floor(((1-(((blknum - blkrel)/rel)^(1/rindex)))*rellev)+0.5);
  );
);
  envlev < 0 ? envlev = 0;
  envlev > 127 ? envlev = 127;

envlevV = floor((envlev* ((127-(velset*(127-vel)))/127))+0.5);

//Send CC message
chanout == -1 ?
(
  envlevV != preenvlevV ?
  (
    n = 0;
    loop(16,
    midisend(offset,$xB0+n,mycc,envlevV);
    n += 1;
    );
  );
):(
envlevV != preenvlevV ?
midisend(offest,modstatus,mycc,envlevV);
);
preenvlevV = envlevV;
blknum += 1;

// Graphics //////////////////////////////////////////////
@gfx 450 175

ox = 75;
oy = 80;
rx = 300;

gdel = del;
gatt = att;
gdec = dec;
grel = rel;

xscale = (rx/(gdel+gatt+gdec+grel));
ry = 70;

gdelx = gdel*xscale;
gattx = gatt*xscale;
gdecx = gdec*xscale;
grelx = grel*xscale;

delpoint = gdelx;
attpoint = delpoint+gattx;
decpointx = attpoint+gdecx;
decpointy = ((sus/127)*ry);
suspoint = (((sus+ramp)/127)*ry);
suspoint = min(suspoint,ry);
suspoint = max(suspoint,0);
relpoint = decpointx+grelx;

gfx_r = 1;
gfx_g = 1;
gfx_b = 1;

gfx_a = .3;
gfx_x = ox;
gfx_y = oy;

// Static envelope shape
gpos = 0;
while (gpos <= relpoint)(
  gpos < delpoint  ? gfx_lineto(ox+gpos,oy):
  gpos < attpoint  ? gfx_lineto(ox+gpos,oy-(floor((((1-((gattx-(gpos - gdelx))/gattx)^(1/aindex)))*ry)+0.5))):
  gpos < decpointx ? gfx_lineto(ox+gpos,oy-(floor(((1-(((gpos-attpoint)*(((ry-decpointy)/ry)^dindex))/gdecx)^(1/dindex))*ry)+0.5))):
  gpos <= relpoint ? gfx_lineto(ox+gpos,oy-(floor(((1-(((gpos - decpointx)/grelx)^(1/rindex)))*decpointy)+0.5)));
  gpos += 1;
  );
gfx_lineto(ox+gpos,oy);

// Static sustain point
//gfx_r = 1;
//gfx_g = 0;
gfx_circle(ox+decpointx,oy-decpointy,5);

// Dynamic envelope shape   
gfx_a = 1;
gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_x = ox;
gfx_y = oy;

gvel = 1-(velset*(1-(vel/127)));

gpos = 0;
while (gpos <= relpoint)(
  gpos < delpoint  ? gfx_lineto(ox+gpos,oy):
   gpos < attpoint  ? gfx_lineto(ox+gpos,oy-gvel*(floor((((1-((gattx-(gpos - gdelx))/gattx)^(1/aindex)))*ry)+0.5))):
  gpos < decpointx ? gfx_lineto(ox+gpos,oy-gvel*(floor(((1-(((gpos-attpoint)*(((ry-decpointy)/ry)^dindex))/gdecx)^(1/dindex))*ry)+0.5))):
  gpos <= relpoint ? gfx_lineto(ox+gpos,oy-gvel*(floor(((1-(((gpos - decpointx)/grelx)^(1/rindex)))*(suspoint))+0.5)));
  gpos += 1;
  );
gfx_lineto(ox+gpos,oy);

// Dynamic sustain point
gfx_r = 1;
gfx_g = 0;
gfx_circle(ox+decpointx,oy-gvel*suspoint,5);
gfx_x = (ox+decpointx)-65;
gfx_y = (oy-gvel*suspoint);
gfx_drawstr("Sustain");
gfx_x = (ox+decpointx)+8;
gfx_y = (oy-gvel*suspoint)-8;
rampnum = gvel*(suss+ramp);
rampnum < 0 ? rampnum = 0;
rampnum > 127 ? rampnum = 127;
gfx_drawnumber(rampnum,0);

// Grid lines and text
gfx_a = 0.5;
gfx_r = 1;
gfx_g = 0;
gfx_x = ox;
gfx_y = oy-ry;
gfx_lineto(ox+relpoint,oy-ry);
gfx_x = ox;
gfx_y = oy;
gfx_lineto(ox+relpoint,oy);
gfx_a = 1;
gfx_x = ox-30;
gfx_y = oy-ry-3;
gfx_drawstr("127");
gfx_x = ox-16;
gfx_y = oy-3;
gfx_drawstr("0");

//Bouncing Ball
gblknum = (
  blknum*xscale < decpointx && noteon >= 1 ? blknum*xscale:
  envon == 1 ? decpointx:
  envlevV > 0 ? decpointx + (blknum-blkrel)*xscale:
  0;
  );
gfx_r = 1;
gfx_g = 1;
gfx_b = 0;
gfx_circle(ox+(gblknum),oy-((envlevV/127)*ry),4);

