desc:mod.envlib

// Copyright (C) 2023 TiagoLr
// Envlib 1.0 based of zenvelib.v1 by dwelx
// provides adsr envelopes with tension/shape and scale controls

/* Example

    desc:envlib test

    slider1:attack=1000<0,5000,1>Attack (ms)
    slider2:decay=1000<1,15000,1>Decay (ms)
    slider3:sustain=-12.0<-90,0,1>Sustain (dB)
    slider4:release=500<0,5000,1>Release (ms)
    slider5:tension=0<-1,1,0.01>Tension

    import envlib.jsfx-inc

    @init
    function sine_wave(cycle) (sin(cycle * 2 * $pi););

    @slider
    tensionAtt = tensionDec = tensionRel = tension;
    adsr.env_adsr(attack, decay, sustain, release, tensionAtt, tensionDec, tensionRel);

    @block
    while (midirecv(offset, msg1, note, vel)) (
      event = msg1 & 0xF0;
      event == 0x90 && vel ? ( // Note on
        adsr.env_a(vel / 127);
      );
      event == 0x80 || event == 0x90 && !vel ? (
        adsr.env_r();
      );
    );

    @sample
    adsr.env_process();
    cycle = cycle + 440 / srate;
    cycle > 1 ? cycle = cycle - 1;
    spl0 = spl1 = sine_wave(cycle) * adsr.env;

    Functions:

    env_adsr(attack_ms, decay_ms, sustain_dB, release_ms, tensionAtt, tensionDec, tensionRel)l
    Inits the envelope with attack decay release in milliseconds, systain in dB
    and curve tension/shape in interval [-1,1] where zero means linear.

    env_process()
    Main tick function of this library, should be called every sample

    env_a(scale)
    Triggers envelope attack stage, scale is a factor of the envelope amplitude
    Use scale = 1 for default envelope amplitude.

    env_r()
    Triggers envelope release stage
*/

/*
  Modified envlib to work with buffers, see https://stash.reaper.fm/v/47856/envlib.jsfx-inc

  0 env
  1 state
  2 a
  3 d
  4 s
  5 r
  6 ta
  7 td
  8 tr
  9 ab
  10 ac
  11 db
  12 dc
  13 rb
  14 rc
  15 b
  16 c
  17 scale
*/

@init

// main equation for exponential coefficients and base values
function calc_coefs(buf, targetB1, targetB2, targetC, rate, tension, mult)
//instance (b,c)
(
	tension > 1 ? (											// slow-start shape
		tension = pow(tension - 1, 3);
		buf[16] = exp(log((targetC + tension) / tension) / rate);
		buf[15] = (targetB1 - mult * tension) * (1 - buf[16]);
	) : (																// fast-start shape (inverse exponential)
		tension = pow(tension, 3);
		buf[16] = exp(-log((targetC + tension) / tension) / rate);
		buf[15] = (targetB2 + mult * tension) * (1 - buf[16]);
	);
);

// Normalize tension between [0.001..1, 100, 2..1]
function normalize_t(t) (
  t += 1;
  t == 1 ? 100
    : t > 1 ? 3.001 - t
    : 0.001 + t;
);

function env_adsr(buf, _a, _d, _s, _r, tensionA, tensionD, tensionR)
//instance(a, d, s, r, ta, td, tr)
(
  buf[2] = max(_a, 1) * 0.001 * srate;
  buf[3] = max(_d, 1) * 0.001 * srate;
  buf[4] = pow(10, min(_s, 0) / 20);
  buf[5] = max(_r, 1) * 0.001 * srate;

  buf[6] = normalize_t(tensionA);
  buf[7] = normalize_t(-1 * tensionD);
  buf[8] = normalize_t(-1 * tensionR);
);

function recalc_coefs(buf)
//instance (scale, ab, ac, db, dc, b, c, ta, td, a, d, s)
(
  calc_coefs(buf, 0, 1*buf[17], 1*buf[17], buf[2], buf[6], 1);
  buf[9] = buf[15]; // attack coef b
  buf[10] = buf[16]; // attack coef c

  calc_coefs(buf, 1, buf[4]*buf[17], (1-buf[4])*buf[17], buf[3], buf[7], -1);
  buf[11] = buf[15]; // decay coef b
  buf[12] = buf[16]; // decay coef c
);

function env_reset(buf)
  //instance(state, env)
(
  buf[1] = 0;
  buf[0] = 0;
);

function env_r(buf)
  //instance(state, r, env, s, tr, rb, rc, b, c, scale)
(
  calc_coefs(buf, max(buf[0], buf[4])*buf[17], 0, max(buf[0], buf[4])*buf[17], buf[5], buf[8], -1);
  buf[13] = buf[15];
  buf[14] = buf[16];
  buf[1] = 8;
);

function env_s(buf)
  //instance(state, s, env, scale)
(
  buf[0] = buf[17] * buf[4];
  buf[1] = 4;
);

function env_d(buf)
  //instance(state, d, scale, env)
(
  buf[0] = buf[17];
  buf[1] = 2;
);

function env_a(buf, scale)
  //instance(state, a, env)
(
  buf[17] = scale;
  recalc_coefs(buf);
  buf[1] = 1;
);

function env_process(buf)
  //instance(state, a, d, s, r, env, scale, ab, ac, db, dc, rb, rc)
(
  buf[1] ? (

    // Attack
    buf[1] == 1 ? (
      buf[0] = buf[9] + buf[0] * buf[10];
      buf[0] >= buf[17] ? env_d(buf);
    ) :

    // Decay
    buf[1] == 2 ? (
      buf[0] = buf[11] + buf[0] * buf[12];
      buf[0] <= buf[4] * buf[17] ? env_s(buf);
    ) :

    // Release
    buf[1] == 8 ? (
      buf[0] = buf[13] + buf[0] * buf[14];
      buf[0] <= 0 ? env_reset(buf);
    );
  );

  buf[1];
);
