version: 0.1.0
desc: MIDI Mouse
author:    Malcolm Smith
license:   LGPL - http://www.gnu.org/licenses/lgpl.html
about:     Enables a standard three button wheel mouse to be used as a MIDI controller. To use:
           Place the mouse cursor over FX graphics window.
           Use mouse wheel or click (middle button) and drag to send continuous output
           Use left or right buttons to send momentary output.
changelog: Initial beta release.

//         Copyright(C) 2018 and later, Malcolm Smith (username 'Time Waster' on REAPER forums).

slider1:cctarget=0<0,63,1{Pitch Bend,0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv}>Output
slider2:schanout=1<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Output Channel
slider4:sens=50<1,100,1>Sensitivity
slider6:lbutmsb=0<0,127,1>Left Button MSB
slider7:lbutlsb=0<0,127,1>Left Button LSB
slider9:rbutmsb=0<0,127,1>Right Button MSB
slider10:rbutlsb=0<0,127,1>Right Button LSB

in_pin:none
out_pin:none

@init

function mousetarget(mx,my,xrange,yrange)
(
  mouse_x >= mx - xrange/2 && mouse_x <= mx + xrange/2 && mouse_y >= my - yrange/2 && mouse_y <= my + yrange/2 ? 1:0;
);

@slider
func = cctarget == 0 ? 1:0; // func = 0 for CC output or 1 for pitch bend output.
ccmsb = (cctarget-1) <= 31 ? cctarget:cctarget+32;
cclsb = ccmsb + 32;
chanout = schanout-1;

@block
time_precise(blockstart);
sample_time = 1/srate;

// Start send message from mouse wheel or click and drag.
// Using mouse wheel ?
wheelval = mouse_wheel;
wheelval - wheelval_pre != 0 ?
wheel_count > 0 ?
(
wheelval_pre = wheelval;
wheel_count -= 1;
);
wheelval - wheelval_pre != 0 ?
  (
  dir = sign(wheelval - wheelval_pre);
  time_precise(wheel_click);
  wheel_time = wheel_click - wheel_click_pre;
  wheel_click_pre = wheel_click;
  count_tgt = 2*floor(wheel_time/sample_time);
  inc_time = wheel_time;
  count = 0;
  );
wheelval_pre = wheelval;
// Using click and drag - centre button?
mouse_cap == 64 && p0_on == 0 ? p0_on = 1;
p0_on == 1?
  (
  mouse_cap != 64 ? (p0_on = 0;count = count_tgt;):
  mouseval = -my;
  mouseval - mouseval_pre != 0 ?
  mouse_count > 0 ?
  (
  mouseval_pre = mouseval;
  mouse_count -= 1;
  );
  mouseval - mouseval_pre != 0 ?
    (
    dir = sign(mouseval - mouseval_pre);
    time_precise(mouse_point);
    mouse_time = 25*(mouse_point - mouse_point_pre)/abs(mouseval - mouseval_pre);
    mouse_point_pre = mouse_point;
    count_tgt = 2*floor(mouse_time/sample_time);
    inc_time = mouse_time;
    count = 0;
    );
  );
mouseval_pre = mouseval;
count_tgt > srate ? count_tgt = srate;
inc = 1/(inc_time);

blockend = 0;
while(count < count_tgt && blockend < samplesblock)
  (
  outval = outval_pre+dir*sens*(inc/1000);
  outval >= 16383 ? outval = outval_pre = 16383;
  outval <= 0 ? outval = outval_pre = 0;
  func == 1 ?
    (
    dir == 1 ?
      (
      outval_pre < 64*128 && outval >= 64*128 ?
        (
        outval = 64*128;
        count = count_tgt-1;
        wheel_count = 1;
        mouse_count = 3;
        );
      );
      dir == -1 ?
      (
      outval <= 64*128 && outval_pre > 64*128 ?
        (
        outval = 64*128;
        count = count_tgt-1;
        wheel_count = 1;
        mouse_count = 3;
        );
      );
    );
    outvalmsb = floor(outval/128);
    outvallsb = outval % 128;
    outval_pre = outval; 
    func == 0 ?
    (
    chanout == -1 ?
      (
       n = 0;
       loop(16,
         preoutvalmsb != outvalmsb ? midisend(blockend,$xB0+n,ccmsb,outvalmsb); // Only send messages if values have changed
         preoutvallsb != outvallsb ? midisend(blockend,$xB0+n,cclsb,outvallsb);
         n += 1;
         );
      ):
    (
    preoutvalmsb != outvalmsb ? midisend(blockend,$xB0+chanout,ccmsb,outvalmsb);
    preoutvallsb != outvallsb ? midisend(blockend,$xB0+chanout,cclsb,outvallsb);
    );
  );
  func == 1 ?
  (
  preoutvalmsb != outvalmsb || preoutvallsb != outvallsb ? midisend(blockend,$xE0+chanout,outvallsb,outvalmsb);
  );
  count += 1;
  blockend += 1;
  preoutvalmsb = outvalmsb;
  preoutvallsb = outvallsb;
);
// End send message from mouse wheel or click and drag.

func == 0 ? // Start send CC message from mouse button.
(
mouse_cap == 1 ?
  (
  outvalmsb = lbutmsb;
  outvallsb = lbutlsb;
  outval_pre = outvallsb + outvalmsb*128;
    chanout == -1 ?
      (
       n = 0;
       loop(16,
         preoutvalmsb != outvalmsb ? midisend(0,$xB0+n,ccmsb,outvalmsb); // Only send messages if values have changed
         preoutvallsb != outvallsb ? midisend(0,$xB0+n,cclsb,outvallsb);
         n += 1;
         );
      ):
      (
      preoutvalmsb != outvalmsb ? midisend(0,$xB0+chanout,ccmsb,outvalmsb);
      preoutvallsb != outvallsb ? midisend(0,$xB0+chanout,cclsb,outvallsb);
      );
    preoutvalmsb = outvalmsb;
    preoutvallsb = outvallsb;
    );
mouse_cap == 2 ?
  (
  outvalmsb = rbutmsb;
  outvallsb = rbutlsb;
  outval_pre = outvallsb + outvalmsb*128;
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      preoutvalmsb != outvalmsb ? midisend(0,$xB0+n,ccmsb,outvalmsb); // Only send messages if values have changed
      preoutvallsb != outvallsb ? midisend(0,$xB0+n,cclsb,outvallsb);
      n += 1;
      );
    ):
    (
    preoutvalmsb != outvalmsb ? midisend(0,$xB0+chanout,ccmsb,outvalmsb);
    preoutvallsb != outvallsb ? midisend(0,$xB0+chanout,cclsb,outvallsb);
    );
  preoutvalmsb = outvalmsb;
  preoutvallsb = outvallsb;
  );
);

func == 1 ? // Start send pitch bend message from mouse button.
(
mouse_cap == 1 ?
  (
  outvalmsb = lbutmsb;
  outvallsb = lbutlsb;
  outval_pre = outvallsb + outvalmsb*128;
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      preoutvalmsb != outvalmsb || preoutvallsb != outvallsb ? midisend(blockend,$xE0+n,outvallsb,outvalmsb); // Only send messages if values have changed
      n += 1;
      );
    ):
    (
    preoutvalmsb != outvalmsb || preoutvallsb != outvallsb ? midisend(blockend,$xE0+chanout,outvallsb,outvalmsb);
    );
  preoutvalmsb = outvalmsb;
  preoutvallsb = outvallsb;
  );
mouse_cap == 2 ?
  (
  outvalmsb = rbutmsb;
  outvallsb = rbutlsb;
  outval_pre = outvallsb + outvalmsb*128;
  chanout == -1 ?
    (
    n = 0;
    loop(16,
      preoutvalmsb != outvalmsb || preoutvallsb != outvallsb  ? midisend(blockend,$xE0+n,outvallsb,outvalmsb); // Only send messages if values have changed
      n += 1;
      );
    ):
    (
    preoutvalmsb != outvalmsb || preoutvallsb != outvallsb ? midisend(blockend,$xE0+chanout,outvallsb,outvalmsb);
    );
  preoutvalmsb = outvalmsb;
  preoutvallsb = outvallsb;
  );
);
@sample

@gfx 400 400
gfx_r = 1;
gfx_circle(mouse_x,mouse_y,4);
xmin = 25;
xmid = gfx_w/2-50;
ymin = 25;
yrng = 200;
ymax = ymin+yrng;
ymid = ymax-yrng/2;
goutval = outvallsb/16383+outvalmsb/128;
// Output meter
gfx_r = 0;
gfx_g = 1;
gfx_b = 0;
gfx_a = 1;
gfx_x=xmid-5;
gfx_y=ymax;
gfx_lineto(gfx_x,ymax-(goutval*yrng));
gfx_lineto(gfx_x+10,ymax-(goutval*yrng));
gfx_lineto(gfx_x,ymax);
// Level lines
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;
gfx_a = 0.5;
gfx_x = xmid-15;
gfx_y = ymin;
gfx_lineto(gfx_x+30,gfx_y);
gfx_x = xmid-15;
gfx_y = ymax;
gfx_lineto(gfx_x+30,gfx_y);
gfx_a = 1;
gfx_x = xmid-27;
gfx_y = ymin-4;
gfx_drawstr("1");
gfx_x = xmid-27;
gfx_y = ymax-4;
func == 0 || func == 2?
(
gfx_drawstr("0");
):
(
gfx_x -= 6;
gfx_drawstr("-1");
gfx_a = 0.5;
gfx_x = xmid-15;
gfx_y = ymid;
gfx_lineto(gfx_x+30,gfx_y);
gfx_a = 1;
gfx_x = xmid-27;
gfx_y = ymid-4;
gfx_drawstr("0");
);
gfx_g = 1;
gfx_b = 1;
gfx_a = 0.7;
gfx_x = xmid+25;
gfx_y = ymax-(goutval*yrng)-10;
gfx_drawstr("MSB = ");
gfx_drawnumber(outvalmsb,0);
gfx_x = xmid+25;
gfx_y = ymax-(goutval*yrng)+2;
gfx_drawstr("LSB = ");
gfx_drawnumber(outvallsb,0);
// Get mouse position
mx = mouse_x;
my = mouse_y;
py = (ymax - my)/yrng;
py < 0 ? py = 0;
py > 1 ? py = 1;
