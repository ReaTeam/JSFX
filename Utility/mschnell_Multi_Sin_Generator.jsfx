desc:Multi Sine Generator
author: Michael Schnell (mschnell@bschnell.de)
version: 1.1
changelog: workaround for freezing when Reaper looses the GUI focus, deterministic volume normalizing 
donation: United Nations Foundation http://www.unfoundation.org/
about:
  ## Description
  Multi Sine Generator generates multiple sine waves with a definable low and high frequency limit and density. 
  
  To analyze the frequency response of a hardware or software device, you usually use white or pink noise. 
  
  The noise generated by appropriate hardware or software by design is random and not periodic. This is because the long term spectrum of a noise generator is supposed to be continuous. In some cases this behavior is not desired.
  
  The Multi Sin Generator creates a deterministic periodic signal with similar properties instead, but therefor, the spectrum of course is discrete. 
  
  You can set the lowest frequency that is used as a base for the multiple sinus generators, and you can set the highest frequency that is supposed to created. 
  
  You can set the density between one and 32 tones per octave, "1" meaning just octaves, "2" gives a tritone, "3" an augmented triad, "4" a diminished chord, "12" all semitones, "24" quarter-tones etc. The frequencies are generated in exponentially equal "well tempered" distances and rounded to integer multiples of the sampling frequency. 
  
  The amplitude relations of the sine waves can be set to "equal amplitudes" or to approximately match the spectrum of either white or pink noise. 
  
  The output volume is 100% = 0dB peak and can be set to 0 ... 100 % 
  
  After setting the parameters, the period duration and (if appropriate) the period frequency of the resulting signal is displayed.

  To reduce the period time of the signal the parameter "Period Reduction" can be set greater than one. This forces the resulting frequencies in a raster of the given count of samples.  
 

slider1:12<1,32,1>Density (Sin/Octave)
slider2:0<0,8,1{1,2,4,8,16,32,64,128,256}>Period Reduction
slider3:4410<20,22050,10>min Frequency
slider4:4410<20,22050,10>max Frequency
slider5:1<0,2,1{White,Equal Amplitudes,Pink}>Spectrum 
slider6:100<0,100,1>Volume % 

@init

  function kgv(r, n, buf) local(kgv, pk, pj, pb, pd, pot ) (
    pk = 0;
    memset (buf, 0, 64);
    loop (n,
      pb = r[pk];
      pb > 1 ? (
        pot = 0;
        pj = 0;
        while(pb >= 1) (
          pd = pb / prime[pj];
          pd == pd | 0 ? (
            pot += 1;
            pb = pd;
           ) : (
            buf[pj] < pot ? buf[pj] = pot;
            pot = 0;
            pj += 1;
          );  
        );
        pk+= 1;
      );
    );     
/*    
    ___0 = pbuf[0];
    ___1 = pbuf[1];
    ___2 = pbuf[2];
    ___3 = pbuf[3];
    ___4 = pbuf[4];
*/    

    pk = 0;
    kgv = 1;
    while (pk < 64) ( 
      buf[pk] ? (
        kgv *= prime[pk];
        buf[pk] -= 1;
       ) : (  
        pk+=1;
      );  
    );
    kgv;
  );

function doslider(force) (   // why is this necessary ?!?!?!?

//  srate_ = srate;

  force            |
  (sl1 != slider1) |  
  (sl2 != slider2) |
  (sl3 != slider3) |
  (sl4 != slider4) |
  (sl5 != slider5) |
  (sl6 != slider6) ? (
    sl1 = slider1;
    sl2 = slider2;
    sl3 = slider3;
    sl4 = slider4;
    sl5 = slider5;
    sl6 = slider6;
  
    fmin = srate_ / slider3;
    nmax = fmin | 0;  
    nmax != fmin ? (
      fmin = nmax;
      slider3 =  srate / fmin;
    );
  
    fmin /= pi2;

    fmax = srate / slider4;  
    fmax /= pi2;

  
    ffmax = slider4 / slider3;
    ffmax < 1 ? (
      ffmax = 1;
      slider4 = slider3;
      sl4 = slider4;
    );  
  
  
    vol = slider6 / 100;
//  vol0 = 100;
    !slider5 ? (
      vmax = 0;
     ) : ( 
      vmax = ffmax;
    );  
  
    pink = slider5;

  
//  ffmax /= (2*pi);
  
    memset(nmaxi, 0 , 32);
    memset(ffi,  0, 32);
    memset(ni,   0, 32);
    i = 0;
    slider1 > 32 ? slider1 = 32;
    loop(slider1, 
      f       = exp(-log2*(i/slider1));
//    ff[i]   = f;                                   // ___ debug
      nmaxi[i] = nmax * f; 
      x = nmaxi[i];
//     = (nmaxi[i] + 0.5) | 0;                 // round()
      x /= pr;
      x += 0.5;
      x |= 0;
      x *= pr; 
      nmaxi[i] = x; 
      xfi[i]   = pi2 / nmaxi[i];
      ffi[i]   = nmaxi[i] / nmax;
      i += 1;
    );  

/*  
    ____i = i;
    ____x = x;
    ____f = f;
   
    ___i0 = ffi[0];
    ___i1 = ffi[1];
    ___i2 = ffi[2];
    ___i3 = ffi[3];
    ___i4 = ffi[4];

    ___n0 = nmaxi[0];
    ___n1 = nmaxi[1];
    ___n2 = nmaxi[2];
    ___n3 = nmaxi[3];
    ___n4 = nmaxi[4];
*/    
  
    kgv = kgv(nmaxi, slider1, pbuf);
  
    pr= 1;
    loop(slider2, 
      pr *= 2;  
    );  
    
    sins  = 0;
    i = 0;
    loop (slider1, 
      f  = 1;
      while (f <= ffmax) (    
        ffn = ffi[i];
        ffn ? ( 
          fff = f/ffn;
          fff <= ffmax ? (
            sins+=1;
          );  
        );    
        f = f * 2;
      );  
      i += 1;
    );

/*  
    ____sliders+=1;
    ____sliders_samples = ____samples;    
    _____i = i;
    _____x = x;
    _____f = f;    
*/
  );  
);

  pi = 3.1415926535897932384626433832795;
  pi2 = 2* pi;
  log2 = log(2);
  ffi   = 0;
  nmaxi = 32;
  xfi   = 32*2;
  ni    = 32*3;
//  ff    = 32*4;
  prime = 32*5;
  pbuf  = prime+64;
  prime[00] =   2;
  prime[01] =   3;   
  prime[02] =   5;   
  prime[03] =   7;   
  prime[04] =  11;   
  prime[05] =  13;   
  prime[06] =  17;   
  prime[07] =  19;   
  prime[08] =  23;
  prime[09] =  29;   
  prime[10] =  31;   
  prime[11] =  37;   
  prime[12] =  41;   
  prime[13] =  43;   
  prime[14] =  47;   
  prime[15] =  53;   
  prime[16] =  59;   
  prime[17] =  61;   
  prime[18] =  67;
  prime[19] =  71;   
  prime[20] =  73;   
  prime[21] =  79;   
  prime[22] =  83;   
  prime[23] =  89;   
  prime[24] =  97;   
  prime[25] = 101;   
  prime[26] = 103;   
  prime[27] = 107;   
  prime[28] = 109;
  prime[29] = 113;   
  prime[30] = 127;   
  prime[31] = 131;   
  prime[32] = 137;   
  prime[33] = 139;   
  prime[34] = 149;   
  prime[35] = 151;   
  prime[36] = 157;   
  prime[37] = 163;   
  prime[38] = 167;
  prime[39] = 173;   
  prime[40] = 179;   
  prime[41] = 181;   
  prime[42] = 191;   
  prime[43] = 193;   
  prime[44] = 197;   
  prime[45] = 199;   
  prime[46] = 211;   
  prime[47] = 223;   
  prime[48] = 227;
  prime[49] = 229;   
  prime[50] = 233;   
  prime[51] = 239;   
  prime[52] = 241;   
  prime[53] = 251;   
  prime[54] = 257;   
  prime[55] = 263;   
  prime[56] = 269;   
  prime[57] = 271;   
  prime[58] = 277;
  prime[59] = 281;   
  prime[50] = 283;   
  prime[61] = 293;   
  prime[62] = 307;   
  prime[63] = 311;
  
  sl1=0;
  srate_ = 0;
  
/*  
  ____inits += 1;
*/  
  
@slider
  srate_ ? ( 
    doslider (0);  
   ) ? ( 
    srate_ = srate;
    srate_ ? doslider(0);
  );  
  

@sample
  srate_ = srate;
  !ffi[0] ? (
//    sl1 > 0 ? (
      doslider(1);   // why is this necessary ?!?!?!?
//    );  
  );  

  y  = 0;
  i = 0;
  loop (sl1, 
    f  = 1;
    while (f <= ffmax) (    
      ffn = ffi[i];
      ffn ? ( 
        fff = f/ffn;
        fff <= ffmax ? (
          x =  ni[i] * xfi[i] * f;
          s = sin(x);
          pink != 1? (
            !pink ? (
              s *= sqr(sqrt(sqrt(sqrt(fff))));     
             ) : (
              s /= sqr(sqrt(sqrt(sqrt(fff))));
            );  
          );
          y += s;
        );  
      );    
      f = f * 2;
    );  
   
    ni[i] += 1;
    ni[i] >= nmaxi[i] ? ni[i] = 0;
    i += 1;
  );
  
/*
  y *= vol0;
  abs(y) > 1 ? (
    vol0 /= abs(y);
    y = y > 0 ? 1 : -1;
  );
*/  
  y *= vol/sins;
  spl0=y;
  spl1=y;
  
/*  
  ____samples += 1;
  ____samples_inits = ____inits;
  ____samples_sliders = ____sliders;
  
  ___0 = ni[0];
  ___1 = ni[1];
  ___2 = ni[2];
  ___3 = ni[3];
  ___4 = ni[4];
  ___5 = ni[5];
  ___6 = ni[6];

  ___i0 = ffi[0];
  ___i1 = ffi[1];
  ___i2 = ffi[2];
  ___i3 = ffi[3];
  ___i4 = ffi[4];

  ___n0 = nmaxi[0];
  ___n1 = nmaxi[1];
  ___n2 = nmaxi[2];
  ___n3 = nmaxi[3];
  ___n4 = nmaxi[4];

*/

@gfx 640 40

  gfx_r=gfx_g=gfx_b=gfx_g= 1;
  gfx_y = 10;
  gx = gfx_w / 2 - 60;
  gfx_x = gx;
  gfx_drawstr("Period");
  gfx_y = 20;
  gfx_x = gx;
  gr = kgv / srate;
  gfx_drawnumber(gr, 4);
  gfx_drawstr(" sec");
  gfx_y = 30;
  gfx_x = gx;
  gr < 100 ? (
    gfx_drawnumber(1 / gr, 2);
    gfx_drawstr(" Hz");
 ); 

