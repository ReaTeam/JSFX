desc: Surround Pan 
author: Stige T.
version: 2.1
changelog: Initial release
provides: anomaly_Surround Pan/*
link: http://jsplugins.supermaailma.net/
about:
	Surround Pan is a specialized panning plugin for distributing a stereo or mono signal into a 5.1 surround space.
	Stereo/mono to 5.1 panner.
	Supports automation.
	Several animation modes for source auto-positioning.
	Includes a user manual

/**************************
     Surround Pan mk2
Copyright (C) 2016 Stige T.
**************************/


EffectName: Surround Pan
VendorString: Stige T.
VendorVersion: 1000
UniqueId: 1614

slider1:0<-100,100,0.01>-Left - Right CH1
slider2:0<-100,100,0.01>-Front - Back CH1
slider3:0<-100,100,0.01>-Left - Right CH2
slider4:0<-100,100,0.01>-Front - Back CH2
slider5:0<-1,1,0.01>-Center Channel Influence
slider6:0<-60,60,1>-Center/Edge Zone Influence [dB]
slider7:100<0,1000,10>-Smoothing Time [ms]

slider10:-60<-60,10,1>-Send To C [dB]
slider11:-60<-60,10,1>-Send To LFE [dB]
slider12:0<0,1,1{1,2}>-Input Channels
slider13:0<-20,20,0.1>-Output [dB]

slider20:0<0,10,1{Manual (off),Rotate,Cruise,Randomize,Fish Bowl}>-Animation
slider21:1<-60,60,1>-Speed
slider22:1<0,1,0.1>-X Scale
slider23:1<0,1,0.1>-Y Scale
slider24:0<-1,1,0.01>-X Offset
slider25:0<-1,1,0.01>-Y Offset

slider26:0<0,10,1{Manual (off),Rotate,Cruise,Randomize,Fish Bowl}>-Animation
slider27:1<-60,60,1>-Speed
slider28:1<0,1,0.1>-X Scale
slider29:1<0,1,0.1>-Y Scale
slider30:0<-1,1,0.01>-X Offset
slider31:0<-1,1,0.01>-Y Offset

filename:0,anomaly_Surround Pan/radar.png
filename:1,anomaly_Surround Pan/bg.png
filename:2,anomaly_Surround Pan/sliderknob.png

resource:0,1,2

@init

!"#define VAL(A) (A)" "//";

buildStr = "build 160627";

function interpolate(A, B, X) (
  (A * (1 - X) + B * X);
);

function Distance(x0,y0,x1,y1) (
  sqrt((x0-x1)^2 + (y0-y1)^2);
);

function CalcPan(X,Y) (

  /* This function calculates the actual
  sound level for each channel*/
  
  /* Parameter Smoothing */
  param.smoothTime < 1 ? (
    X = (this.s1 +=  param.smoothTime * (X - this.s1));
    Y = (this.s2 +=  param.smoothTime * (Y - this.s2));
  );
  
  (X != this.iX || Y != this.iY) ? (
    
    /* Preparing params */
    this.iX = X;
    this.iY = Y;
    
    X = sin($pi/2 * X)^2;
    Y = sin($pi/2 * Y)^2;
            
    this.sqrtX = sqrt(X);
    this.sqrtY = sqrt(Y);
    this.sqrtXinv = sqrt(1-X);
    this.sqrtYinv = sqrt(1-Y);
    
    /* Center Compensation */
    this.xPosCmp = (1-abs((X-0.5) * 2)) * param.cntInfl;
    this.xPosCmpInv = 1-this.xPosCmp;
    
    /* Distance Calculation */
    param.calcDist ? (
      this.dist = interpolate(param.cntZone, param.edgeZone, (min(d.Distance(0.5,0.5,this.iX,this.iY),0.5)*2));
    ) : (
      this.dist = 1;
    );
    
    /* Calculate channels */
    this.L = this.sqrtXinv * this.sqrtYinv * this.xPosCmpInv * this.dist;
    this.R = this.sqrtX * this.sqrtYinv * this.xPosCmpInv * this.dist;
    this.C = this.xPosCmp * this.sqrtYinv * this.dist; 
    this.LS = this.sqrtXinv * this.sqrtY * this.dist;
    this.RS = this.sqrtX * this.sqrtY * this.dist;
    
  ); 

);

function ConvertPanSlider2Lin() (
  
  /* This function collects the
  slider values and stores them to
  be picked up by the CalcPan() function */

  // Make sure CalcPan is being updated
  ch1.iX = 0;
  ch1.iY = 0;
  ch2.iX = 0;
  ch2.iY = 0;

  ch1.panX = slider1/100 * 0.5 + 0.5;
  ch1.panY = slider2/100 * 0.5 + 0.5;
  ch2.panX = slider3/100 * 0.5 + 0.5;
  ch2.panY = slider4/100 * 0.5 + 0.5;
);

function ExecutePan(X,Y) (

  /* Animation functions use this
  to store new panning values for
  the CalcPan() */
  
  X = min(max(X,0),1);
  Y = min(max(Y,0),1);
  this.panX = X;
  this.panY = Y;
);

function ExecutePanCh1(X,Y) (

  /* Radar screen use this
  to store new panning values for
  the CalcPan() */

  ch1.panX = X;
  ch1.panY = Y;
  s1.value = X * 200 - 100;
  s2.value = Y * 200 - 100;
  slider_automate(slider1);
  slider_automate(slider2);
);

function ExecutePanCh2(X,Y) (

  /* Radar screen use this
  to store new panning values for
  the CalcPan() */

  ch2.panX = X;
  ch2.panY = Y;
  s3.value =  X * 200 - 100;
  s4.value =  Y * 200 - 100;
  slider_automate(slider3);
  slider_automate(slider4);  
);

function ResetSlidersCh1() (
  s1.value = 0;
  s2.value = 0;
);

function ResetSlidersCh2() (
  s3.value = 0;
  s4.value = 0;
);

function ResetCH2() (
  ch2.L = ch2.R = ch2.C = ch2.LS = ch2.RS = 0;
);

function Angle(X,Y) (
  atan(Y/X) * (180/$pi);
);

/* Animation functions */

function Rotator() (

  !this.animator.init ? (
    this.rotator.angle = sign(this.param.speed) * 90;
    this.animator.init = 1;
  );

  this.rotator.pos_x = (cos(this.rotator.angle*0.0174532925) * 0.5 + 0.5) * this.param.ampX + this.param.offX;
  this.rotator.pos_y = (sin(this.rotator.angle*0.0174532925) * 0.5 + 0.5) * this.param.ampY + this.param.offY;
  
  this.ExecutePan(this.rotator.pos_x,this.rotator.pos_y);
  
  this.rotator.angle += (this.param.speed);
  this.rotator.angle < 0 ? this.rotator.angle += 360;
  this.rotator.angle >= 360 ? this.rotator.angle -= 360;
);

function FishBowl() (

  !this.fishbowl.init ? (
    this.fishbowl.init = 1;
    this.fishbowl.polarity = 1;
    this.fishbowl.weight = 44100/srate * 0.1;
  );
  
  rand(1) > 0.99997 ? (
    this.fishbowl.polarity = rand(1) >= 0.98 ? -this.fishbowl.polarity : this.fishbowl.polarity;
    this.fishbowl.param = rand(1) * 0.5 + 0.5;
  );
  
  this.fishbowl.driver = (this.fishbowl.driver.s += (abs(this.param.speed) * this.fishbowl.weight) * (this.fishbowl.param - this.fishbowl.driver.s));
  this.fishbowl.driver2 = (1-this.fishbowl.driver) * 0.5;

  this.fishbowl.pos_x = (cos(this.fishbowl.angle*0.0174532925) * 0.5 + 0.5) * this.param.ampX * this.fishbowl.driver + this.fishbowl.driver2 + this.param.offX;
  this.fishbowl.pos_y = (sin(this.fishbowl.angle*0.0174532925) * 0.5 + 0.5) * this.param.ampY * this.fishbowl.driver + this.fishbowl.driver2 + this.param.offY;
  
  this.ExecutePan(this.fishbowl.pos_x,this.fishbowl.pos_y);
  
  this.fishbowl.angle += (this.param.speed * this.fishbowl.polarity);
  this.fishbowl.angle < 0 ? this.fishbowl.angle += 360;
  this.fishbowl.angle >= 360 ? this.fishbowl.angle -= 360;
);

function Cruiser() (

  !this.animator.init ? (
    this.rotator.angle = 0;
    this.cruiser.angle2 = this.rotator.angle;
    this.animator.init = 1;
  );

  this.cruiser.speed = this.param.speed;  
  this.cruiser.rand_x = (50-rand(100))*0.00001;
  this.cruiser.rand_y = (50-rand(200))*0.00002;
  this.cruiser.pos_x = (cos(this.cruiser.angle*0.0174532925) * 0.5 + 0.5) * this.param.ampX + this.param.offX;
  this.cruiser.pos_y = (sin(this.cruiser.angle2*0.0174532925) * 0.5 + 0.5) * this.param.ampY + this.param.offY;

  this.ExecutePan(this.cruiser.pos_x,this.cruiser.pos_y);

  this.cruiser.angle += (this.cruiser.speed + (sign(this.cruiser.speed)*this.cruiser.rand_x));
  this.cruiser.angle2 += (this.cruiser.speed + (sign(this.cruiser.speed)*this.cruiser.rand_y));
  
  this.cruiser.angle < 0 ? this.cruiser.angle += 360;
  this.cruiser.angle >= 360 ? this.cruiser.angle -= 360;
  this.cruiser.angle2 < 0 ? this.cruiser.angle2 += 360;
  this.cruiser.angle2 >= 360 ? this.cruiser.angle2 -= 360;      
);

function Randomizer() (
  
  !this.animator.init ? (
    this.randomizer.newPosX = this.panX; this.randomizer.newPosY = this.panY;
    this.animator.init = 1;
  );
  
  this.randomizer.counter < 1 ? (
    this.randomizer.counter += (abs(this.param.speed) * 0.009 * (1/(this.randomizer.dist+0.00001)));
  ) : (
    this.randomizer.counter = 0;
    this.randomizer.getNewPos = 1;
  );
  
  this.randomizer.getNewPos ? (
    this.randomizer.lastPosX = this.randomizer.newPosX;
    this.randomizer.lastPosY = this.randomizer.newPosY; 
    this.randomizer.newPosX < 0.5 ? this.randomizer.newPosX = min(this.randomizer.newPosX + (rand(1)),1) : this.randomizer.newPosX = max(this.randomizer.newPosX - (rand(1)),0);
    this.randomizer.newPosY < 0.5 ? this.randomizer.newPosY = min(this.randomizer.newPosY + (rand(1)),1) : this.randomizer.newPosY = max(this.randomizer.newPosY - (rand(1)),0);
    this.randomizer.dist = this.randomizer.Distance(this.randomizer.lastPosX,this.randomizer.lastPosY,this.randomizer.newPosX,this.randomizer.newPosY);
    this.randomizer.getNewPos = 0;
  );
  
  this.randomizer.pos_x = interpolate(this.randomizer.lastPosX,this.randomizer.newPosX,this.randomizer.counter);
  this.randomizer.pos_y = interpolate(this.randomizer.lastPosY,this.randomizer.newPosY,this.randomizer.counter);
  this.randomizer.pos_x = this.randomizer.pos_x * this.param.ampX + this.param.offX;
  this.randomizer.pos_y = this.randomizer.pos_y * this.param.ampY + this.param.offY;
  
  this.ExecutePan(this.randomizer.pos_x,this.randomizer.pos_y);
  
);

function delay(input) (

  /* Simple delay for the trail displays */

  this.x0 = input;
  this.x20=this.x19; this.x19=this.x18; this.x18=this.x17; this.x17=this.x16;
  this.x16=this.x15; this.x15=this.x14; this.x14=this.x13; this.x13=this.x12;
  this.x12=this.x11; this.x11=this.x10; this.x10=this.x9; this.x9=this.x8;
  this.x8=this.x7; this.x7=this.x6; this.x6=this.x5; this.x5=this.x4;
  this.x4=this.x3; this.x3=this.x2; this.x2=this.x1; this.x1=this.x0;
  this.x20;
);

function ch(input) (

  /* The main function to call at every sample */

  this.in = input;
  this.param.animate && play_state ? (
    this.param.animate == 1 ? (
      this.Rotator();
    );
    this.param.animate == 2 ? (
      this.Cruiser();
    );
    this.param.animate == 3 ? (
      this.Randomizer();
    );
    this.param.animate == 4 ? (
      this.FishBowl();
    );    
  );
  
  this.CalcPan(this.panX,this.panY);
);

function RecordAnimation() (

  /* Converts animation to automation data */

  ch1.param.animate ? (
    slider1 = s1.value = ch1.pannerX2Gui * 200 - 100;
    slider2 = s2.value = ch1.pannerY2Gui * 200 - 100;
    slider_automate(slider1);
    slider_automate(slider2);
  );
  ch2.param.animate && param.chmode ? (
    slider3 = s3.value = ch2.pannerX2Gui * 200 - 100;
    slider4 = s4.value = ch2.pannerY2Gui * 200 - 100;
    slider_automate(slider3);
    slider_automate(slider4);
  );
);

function ProcessSliders() (

  /* Processes all information from the sliders */

  ConvertPanSlider2Lin();

  param.cntInfl = slider5 > 0 ? interpolate(0.414,1,slider5) : interpolate(0.414,0,-slider5);
  param.cntZone = (10 ^ (min(slider6,0) / 20));
  param.edgeZone = (10 ^ (-max(slider6,0) / 20));
  param.calcDist = slider6 ? 1 : 0;
  param.smoothTime = 1-exp(-1/(slider7 / 1000 * srate));
  
  toCenter = 10 ^ (slider10 / 20);
  toCenter = toCenter <= 0.00101 ? 0 : toCenter;
  toLFE = 10 ^ (slider11 / 20);
  toLFE = toLFE <= 0.00101 ? 0 : toLFE;
  
  param.chmode = slider12;
  !param.chmode ? (
    !booleans.channelReset ? (
      ResetSlidersCh2();
      ResetCH2();
      booleans.channelReset = 1;
    );
  ) : (
      booleans.channelReset = 0;
  );
  
  param.output = 10 ^ (slider13 / 20);
  
  ch1.param.animate = slider20;
  ch1.param.speed = 360 / ((1/slider21) * srate * 60);
  ch1.param.ampX = slider22;
  ch1.param.ampY = slider23;
  ch1.param.offX = slider24;
  ch1.param.offY = slider25;
  
  ch2.param.animate = slider26;
  ch2.param.speed = 360 / ((1/slider27) * srate * 60);
  ch2.param.ampX = slider28;
  ch2.param.ampY = slider29;
  ch2.param.offX = slider30;
  ch2.param.offY = slider31;  
  
  ch1.param.animate ? (
    ch1.param.ampX != 1 || ch1.param.ampY != 1 || ch1.param.offX || ch1.param.offY  ? (
      bb1.b1 = max(gfxArea.x1 + (ch1.param.offX * gfxArea.w),gfxArea.x1);
      bb1.b2 = max(gfxArea.y1 + (ch1.param.offY * gfxArea.h),gfxArea.y1);
      bb1.b3 = max(min(gfxArea.x1 + gfxArea.w * ch1.param.ampX + (ch1.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb1.b4 = max(gfxArea.y1 + (ch1.param.offY * gfxArea.h),gfxArea.y1);
      bb1.b5 = max(min(gfxArea.x1 + gfxArea.w * ch1.param.ampX + (ch1.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb1.b6 = max(gfxArea.y1 + (ch1.param.offY * gfxArea.h),gfxArea.y1);
      bb1.b7 = max(min(gfxArea.x1 + gfxArea.w * ch1.param.ampX + (ch1.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb1.b8 = max(min(gfxArea.y1 + gfxArea.h * ch1.param.ampY + (ch1.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb1.b9 = max(min(gfxArea.x1 + gfxArea.w * ch1.param.ampX + (ch1.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb1.b10 = max(min(gfxArea.y1 + gfxArea.w * ch1.param.ampY + (ch1.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb1.b11 = max(gfxArea.x1 + (ch1.param.offX * gfxArea.w),gfxArea.x1);
      bb1.b12 = max(min(gfxArea.y1 + gfxArea.h * ch1.param.ampY + (ch1.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb1.b13 = max(gfxArea.x1 + (ch1.param.offX * gfxArea.w),gfxArea.x1);
      bb1.b14 = max(min(gfxArea.y1 + gfxArea.h * ch1.param.ampY + (ch1.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb1.b15 = max(gfxArea.x1 + (ch1.param.offX * gfxArea.w),gfxArea.x1);
      bb1.b16 = max(gfxArea.y1 + (ch1.param.offY * gfxArea.h),gfxArea.y1);
    );
  );
  
  param.chmode && ch2.param.animate ? (
    ch2.param.ampX != 1 || ch2.param.ampY != 1 || ch2.param.offX || ch2.param.offY  ? (
      bb2.b1 = max(gfxArea.x1 + (ch2.param.offX * gfxArea.w),gfxArea.x1);
      bb2.b2 = max(gfxArea.y1 + (ch2.param.offY * gfxArea.h),gfxArea.y1);
      bb2.b3 = max(min(gfxArea.x1 + gfxArea.w * ch2.param.ampX + (ch2.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb2.b4 = max(gfxArea.y1 + (ch2.param.offY * gfxArea.h),gfxArea.y1);
      bb2.b5 = max(min(gfxArea.x1 + gfxArea.w * ch2.param.ampX + (ch2.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb2.b6 = max(gfxArea.y1 + (ch2.param.offY * gfxArea.h),gfxArea.y1);
      bb2.b7 = max(min(gfxArea.x1 + gfxArea.w * ch2.param.ampX + (ch2.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb2.b8 = max(min(gfxArea.y1 + gfxArea.h * ch2.param.ampY + (ch2.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb2.b9 = max(min(gfxArea.x1 + gfxArea.w * ch2.param.ampX + (ch2.param.offX * gfxArea.w),gfxArea.x2),gfxArea.x1);
      bb2.b10 = max(min(gfxArea.y1 + gfxArea.w * ch2.param.ampY + (ch2.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb2.b11 = max(gfxArea.x1 + (ch2.param.offX * gfxArea.w),gfxArea.x1);
      bb2.b12 = max(min(gfxArea.y1 + gfxArea.h * ch2.param.ampY + (ch2.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb2.b13 = max(gfxArea.x1 + (ch2.param.offX * gfxArea.w),gfxArea.x1);
      bb2.b14 = max(min(gfxArea.y1 + gfxArea.h * ch2.param.ampY + (ch2.param.offY * gfxArea.h),gfxArea.y2),gfxArea.y1);
      bb2.b15 = max(gfxArea.x1 + (ch2.param.offX * gfxArea.w),gfxArea.x1);
      bb2.b16 = max(gfxArea.y1 + (ch2.param.offY * gfxArea.h),gfxArea.y1);
    );
  );
    
);

/* Inits */

ch1.s1 = slider1/100 * 0.5 + 0.5;
ch1.s2 = slider2/100 * 0.5 + 0.5;
ch2.s1 = slider3/100 * 0.5 + 0.5;
ch2.s2 = slider4/100 * 0.5 + 0.5;
ConvertPanSlider2Lin();

ch1.iX = 1000;
ch1.iY = 1000;
ch2.iX = 1000;
ch2.iY = 1000;
ch1.CalcPan(0.5,0.5);
ch2.CalcPan(0.5,0.5);


gfxArea.x1 = 20;
gfxArea.y1 = 20;
gfxArea.w = 500;

gfxArea.h = gfxArea.w;
gfxArea.x2 = gfxArea.x1 + gfxArea.w;
gfxArea.y2 = gfxArea.y1 + gfxArea.h;
gfxArea.xc = gfxArea.w * 0.5 + gfxArea.x1;
gfxArea.yc = gfxArea.h * 0.5 + gfxArea.y1;
gfxArea.rd = gfxArea.w * 0.5;


mtrY = -10;
m.conf.x = 535;
m.conf.s = m0.conf.s = m1.conf.s = m2.conf.s = m3.conf.s = m4.conf.s = m5.conf.s = m6.conf.s = m7.conf.s = 0.5;

m6.conf.x = 537;
m7.conf.x = 543;

m0.conf.x = 558;
m1.conf.x = 564;
m2.conf.x = 570;
m3.conf.x = 576;
m4.conf.x = 582;
m5.conf.x = 588;

m0.col.r =
m1.col.r =
m2.col.r =
m4.col.r =
m5.col.r = 0;

m0.col.b =
m1.col.b =
m2.col.b =
m4.col.b =
m5.col.b = 0.9;

m0.col.g =
m1.col.g =
m2.col.g =
m4.col.g =
m5.col.g = 0.9;

m6.col.r =
m7.col.r = 0;
m6.col.b =
m7.col.b = 0;
m6.col.g =
m7.col.g = 0.9;

m3.col.r = 0;
m3.col.b = 1;
m3.col.g = 0.5;
  
@slider

s1.value = slider1;
s2.value = slider2;
s3.value = slider3;
s4.value = slider4;
s5.value = slider5;
s6.value = slider6;
s7.value = slider7;

s10.value = slider10;
s11.value = slider11;
s12.checked = slider12;
s13.value = slider13;

s20.value = slider20;
s21.value = slider21;
s22.value = slider22;
s23.value = slider23;
s24.value = slider24;
s25.value = slider25;
s26.value = slider26;
s27.value = slider27;
s28.value = slider28;
s29.value = slider29;
s30.value = slider30;
s31.value = slider31;

ProcessSliders();

@block

!play_state ? (
  ch1.animator.init = 0;
  ch2.animator.init = 0;
);

@sample

mtr6 = max(mtr6,abs(spl0));
mtr7 = max(mtr7,abs(spl1));

L = spl0 * param.output;
R = spl1 * param.output;
mono = (L + R) * 0.708;

param.chmode ? (
  ch1.ch(L);
  ch2.ch(R);
) : (
  ch1.ch(mono);
);

spl0 = ((ch1.in * ch1.L) + (ch2.in * ch2.L));
spl1 = ((ch1.in * ch1.R) + (ch2.in * ch2.R));
spl2 = ((ch1.in * ch1.C) + (ch2.in * ch2.C)) + (mono * toCenter * 0.708);
spl3 = (mono * toLFE * 0.708);
spl4 = (ch1.in * ch1.LS) + (ch2.in * ch2.LS);
spl5 = (ch1.in * ch1.RS) + (ch2.in * ch2.RS);

ch1.pannerX2Gui = ch1.iX;
ch1.pannerY2Gui = ch1.iY;
ch2.pannerX2Gui = ch2.iX;
ch2.pannerY2Gui = ch2.iY;

mtr0 = max(mtr0,abs(spl0));
mtr1 = max(mtr1,abs(spl1));
mtr2 = max(mtr2,abs(spl2));
mtr3 = max(mtr3,abs(spl3));
mtr4 = max(mtr4,abs(spl4));
mtr5 = max(mtr5,abs(spl5));

@gfx 1130 540

function vert_meter_level(input)
(  
  //this.conf.x = 10;
  this.conf.y = 40 + mtrY;
  this.conf.w = 4;
  this.conf.h = 500;
  //this.conf.s = 0.3;
      
  this.mtr.in = this.conf.h - min((input^this.conf.s) * this.conf.h, this.conf.h-1);
  this.mtr.sgn = this.mtr.in;
  
  input < 1 ? (
  gfx_r = this.col.r; gfx_g = this.col.g; gfx_b = this.col.b; gfx_a = 0.8;
  ) : (
  gfx_r = 1; gfx_g = gfx_b = 0.2;
  );
  gfx_rect(this.conf.x, this.conf.y + this.mtr.sgn, this.conf.w, this.conf.h - this.mtr.sgn);
  
);

function vert_meter_layout()
(
  //this.conf.x = 10;
  this.conf.y = 40 + mtrY;
  this.conf.w = 60;
  this.conf.h = 500;
  //this.conf.s = 0.3;
  
  !this.mtr.20 ? (
    this.mtr.1 = (1 - 0.891^this.conf.s) * this.conf.h;
    this.mtr.3 = (1 - 0.708^this.conf.s) * this.conf.h;
    this.mtr.6 = (1 - 0.501^this.conf.s) * this.conf.h;
    this.mtr.10 = (1 - 0.316^this.conf.s) * this.conf.h;
    this.mtr.14 = (1 - 0.200^this.conf.s) * this.conf.h;
    this.mtr.20 = (1 - 0.1^this.conf.s) * this.conf.h;
    this.mtr.30 = (1 - 0.0316^this.conf.s) * this.conf.h;
    this.mtr.40 = (1 - 0.01^this.conf.s) * this.conf.h;
    this.mtr.60 = (1 - 0.001^this.conf.s) * this.conf.h;
    this.mtr.80 = (1 - 0.0001^this.conf.s) * this.conf.h;
  );

  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.1;
  gfx_rect(this.conf.x, this.conf.y, this.conf.w, this.conf.h);
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h-2);
      
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  
  gfx_rect(this.conf.x+this.conf.w, this.conf.y, 5, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y - 1;
  gfx_drawstr("0");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.1, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.1 - 1;
  gfx_drawstr("1");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.3, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.3 - 1;
  gfx_drawstr("3");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.6, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.6 - 1;
  gfx_drawstr("6");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.10, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.10 - 1;
  gfx_drawstr("10");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.14, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.14 - 1;
  gfx_drawstr("14");
  
  this.conf.s <= 1.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.20, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.20 - 1;
    gfx_drawstr("20");
  );
  this.conf.s <= 1 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.30, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.30 - 1;
    gfx_drawstr("30");
  );
  this.conf.s <= 0.7 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.40, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.40 - 1;
    gfx_drawstr("40");
  );
  this.conf.s <= 0.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.60, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.60 - 1;
    gfx_drawstr("60");
  );
  this.conf.s <= 0.3 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.80, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.80 - 1;
    gfx_drawstr("80");
  );
  
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.8;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h - 2);

);

function draw_panslider(x,y,w,h,f,t,s,d,unit,title)
(

  /* Is identical to the draw_hslider() except
  does not trigger ProcessSliders() */
  
  // Knob parameters
  this.knob.w = 26;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 100 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
    _panDirty = 1;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_x = x+1+this.knob.pos; gfx_y = y+1;
  gfx_blit(2,1,0);

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

function draw_hslider(x,y,w,h,f,t,s,d,unit,title)
(
    
  // Knob parameters
  this.knob.w = 26;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 100 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_x = x+1+this.knob.pos; gfx_y = y+1;
  gfx_blit(2,1,0);

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

function draw_chkbox(x,y,s,title)
(

  gfx_r = gfx_g = gfx_b = 0.7;
  gfx_measurestr(title,this.str.w,this.str.h);
  gfx_x = x - this.str.w - 5; gfx_y = y + (s * 0.5) - (this.str.h * 0.5);
  gfx_drawstr(title);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+s && mouse_y >= y && mouse_y <= y+s && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = this.canChange = 0;
  );
  !mouse_cap ? (this.canChange = 0;);

  this.canChange ? (
    this.checked = 1-this.checked;
    this.hasEntered = this.hasClicked = this.canChange = 0;
    _sliderDirty = 1;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 0.6;
  gfx_rect(x,y,s,s);
  gfx_r = gfx_g = gfx_b = 0.15;
  gfx_rect(x+1,y+1,s-2,s-2);
  
  // Checked
  this.checked ? (
    gfx_r = 0.9; gfx_g = 0.9; gfx_b = 1;
    gfx_rect(x+2,y+2,s-4,s-4);
  );
    
  this.checked; 
);

function draw_hselector(x,y,w,h,f,t,s,d,title)
(
    
  // Knob parameters
  this.knob.w = 26;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t) + 0;
  
  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? this.canChange = 0;
  
  // Process
  this.canChange ? (
    this.knob.input = (mouse_x - x - this.knob.w - this.knob.hw);
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_x = x+1+this.knob.pos; gfx_y = y+1;
  gfx_blit(2,1,0);
  
  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1); 
  
  this.value;
);



/* Background */
gfx_r = gfx_g = gfx_b = 0.1;
//gfx_rect(540,10,520,520);
gfx_x = gfx_y = 0;
gfx_blit(1, 1, 0);
gfx_x = gfxArea.x1;
gfx_y = gfxArea.y1;
gfx_blit(0, 1, 0);

/* Screen */
gfx_r = 0; gfx_g = 0.75; gfx_b = 0; gfx_a = sqrt(param.cntZone);
gfx_circle(gfxArea.xc, gfxArea.yc, 8, 0, 1);
gfx_r = 0; gfx_g = 0.75; gfx_b = 0; gfx_a = sqrt(param.edgeZone) * 0.5;
gfx_circle(gfxArea.xc, gfxArea.yc, gfxArea.rd, 0, 1);

/* Guiding Dot */
gfx_r = 0; gfx_g = 1; gfx_b = 0; gfx_a = 1;
gfx_circle(ch1.panX * gfxArea.w + gfxArea.x1, ch1.panY * gfxArea.h + gfxArea.y1, 3, 1, 1);

/* Mouse logic */
(mouse_cap & 1) && mouse_x >= gfxArea.x1-5 && mouse_x <= gfxArea.x2+5 && mouse_y >= gfxArea.y1-5 && mouse_y <= gfxArea.y2+5 ? (
  ch1.canMoveDot = 1;
);

ch1.canMoveDot ? (
  ch1.guiPanX = max(min((mouse_x - gfxArea.x1) / gfxArea.w,1),0);
  ch1.guiPanY = max(min((mouse_y - gfxArea.y1) / gfxArea.h,1),0); 
  ExecutePanCh1(ch1.guiPanX, ch1.guiPanY);
);
ch1.guiPosX = ch1.pannerX2Gui * gfxArea.w + gfxArea.x1;
ch1.guiPosY = ch1.pannerY2Gui * gfxArea.h + gfxArea.y1;
gfx_r = 0; gfx_g = 0.75; gfx_b = 0; gfx_a = 1;
gfx_circle(ch1.guiPosX, ch1.guiPosY, 5, 1, 1);

/* Trail */
d1x.delay(ch1.guiPosX);
d1y.delay(ch1.guiPosY);

d1x.x20 && d1x.x0 != d1x.x20 ? (
  gfx_r = 0; gfx_g = 0.75; gfx_b = 0;
  gfx_x = ch1.guiPosX; gfx_y = ch1.guiPosY;
  gfx_a = 1; gfx_lineto(d1x.x1,d1y.x1,1);
  gfx_a = 0.95; gfx_lineto(d1x.x2,d1y.x2,1);
  gfx_a = 0.9; gfx_lineto(d1x.x3,d1y.x3,1);
  gfx_a = 0.85; gfx_lineto(d1x.x4,d1y.x4,1);
  gfx_a = 0.8; gfx_lineto(d1x.x5,d1y.x5,1);
  gfx_a = 0.75; gfx_lineto(d1x.x6,d1y.x6,1);
  gfx_a = 0.7; gfx_lineto(d1x.x7,d1y.x7,1);
  gfx_a = 0.65; gfx_lineto(d1x.x8,d1y.x8,1);
  gfx_a = 0.6; gfx_lineto(d1x.x9,d1y.x9,1);
  gfx_a = 0.55; gfx_lineto(d1x.x10,d1y.x10,1);
  gfx_a = 0.5; gfx_lineto(d1x.x11,d1y.x11,1);
  gfx_a = 0.45; gfx_lineto(d1x.x12,d1y.x12,1);
  gfx_a = 0.4; gfx_lineto(d1x.x13,d1y.x13,1);
  gfx_a = 0.35; gfx_lineto(d1x.x14,d1y.x14,1);
  gfx_a = 0.3; gfx_lineto(d1x.x15,d1y.x15,1);
  gfx_a = 0.25; gfx_lineto(d1x.x16,d1y.x16,1);
  gfx_a = 0.2; gfx_lineto(d1x.x17,d1y.x17,1);
  gfx_a = 0.15; gfx_lineto(d1x.x18,d1y.x18,1);
  gfx_a = 0.1; gfx_lineto(d1x.x19,d1y.x19,1);
  gfx_a = 0.05; gfx_lineto(d1x.x20,d1y.x20,1);  
);

param.chmode ? (

gfx_r = 1; gfx_g = 0; gfx_b = 0; gfx_a = 1;
gfx_circle(ch2.panX * gfxArea.w + gfxArea.x1, ch2.panY * gfxArea.h + gfxArea.y1, 3, 1, 1);

(mouse_cap & 2) && mouse_x >= gfxArea.x1-5 && mouse_x <= gfxArea.x2+5 && mouse_y >= gfxArea.y1-5 && mouse_y <= gfxArea.y2+5 ? (
  ch2.canMoveDot = 1;
);

ch2.canMoveDot ? (
  ch2.guiPanX = max(min((mouse_x - gfxArea.x1) / gfxArea.w,1),0);
  ch2.guiPanY = max(min((mouse_y - gfxArea.y1) / gfxArea.h,1),0);
  ExecutePanCh2(ch2.guiPanX, ch2.guiPanY);
);
ch2.guiPosX = ch2.pannerX2Gui * gfxArea.w + gfxArea.x1;
ch2.guiPosY = ch2.pannerY2Gui * gfxArea.h + gfxArea.y1;
gfx_r = 0.75; gfx_g = 0; gfx_b = 0; gfx_a = 1;
gfx_circle(ch2.guiPosX, ch2.guiPosY, 5, 1, 1);

d2x.delay(ch2.guiPosX);
d2y.delay(ch2.guiPosY);

d2x.x20 && d2x.x0 != d2x.x20 ? (
  gfx_r = 0.75; gfx_g = 0; gfx_b = 0;
  gfx_x = ch2.guiPosX; gfx_y = ch2.guiPosY;
  gfx_a = 1; gfx_lineto(d2x.x1,d2y.x1,1);
  gfx_a = 0.95; gfx_lineto(d2x.x2,d2y.x2,1);
  gfx_a = 0.9; gfx_lineto(d2x.x3,d2y.x3,1);
  gfx_a = 0.85; gfx_lineto(d2x.x4,d2y.x4,1);
  gfx_a = 0.8; gfx_lineto(d2x.x5,d2y.x5,1);
  gfx_a = 0.75; gfx_lineto(d2x.x6,d2y.x6,1);
  gfx_a = 0.7; gfx_lineto(d2x.x7,d2y.x7,1);
  gfx_a = 0.65; gfx_lineto(d2x.x8,d2y.x8,1);
  gfx_a = 0.6; gfx_lineto(d2x.x9,d2y.x9,1);
  gfx_a = 0.55; gfx_lineto(d2x.x10,d2y.x10,1);
  gfx_a = 0.5; gfx_lineto(d2x.x11,d2y.x11,1);
  gfx_a = 0.45; gfx_lineto(d2x.x12,d2y.x12,1);
  gfx_a = 0.4; gfx_lineto(d2x.x13,d2y.x13,1);
  gfx_a = 0.35; gfx_lineto(d2x.x14,d2y.x14,1);
  gfx_a = 0.3; gfx_lineto(d2x.x15,d2y.x15,1);
  gfx_a = 0.25; gfx_lineto(d2x.x16,d2y.x16,1);
  gfx_a = 0.2; gfx_lineto(d2x.x17,d2y.x17,1);
  gfx_a = 0.15; gfx_lineto(d2x.x18,d2y.x18,1);
  gfx_a = 0.1; gfx_lineto(d2x.x19,d2y.x19,1);
  gfx_a = 0.05; gfx_lineto(d2x.x20,d2y.x20,1);
);

);

/* Animation Box */
ch1.param.animate && (ch1.param.ampX != 1 || ch1.param.ampY != 1 || ch1.param.offX || ch1.param.offY) ? (
  gfx_r = 0; gfx_g = 1; gfx_b = 0; gfx_a = 0.15;
  gfx_line(bb1.b1,bb1.b2,bb1.b3,bb1.b4,1);
  gfx_line(bb1.b5,bb1.b6,bb1.b7,bb1.b8,1);
  gfx_line(bb1.b9,bb1.b10,bb1.b11,bb1.b12,1);
  gfx_line(bb1.b13,bb1.b14,bb1.b15,bb1.b16,1);
);

param.chmode && ch2.param.animate && (ch2.param.ampX != 1 || ch2.param.ampY != 1 || ch2.param.offX || ch2.param.offY) ? (
  gfx_r = 1; gfx_g = 0; gfx_b = 0; gfx_a = 0.3;
  gfx_line(bb2.b1,bb2.b2,bb2.b3,bb2.b4,1);
  gfx_line(bb2.b5,bb2.b6,bb2.b7,bb2.b8,1);
  gfx_line(bb2.b9,bb2.b10,bb2.b11,bb2.b12,1);
  gfx_line(bb2.b13,bb2.b14,bb2.b15,bb2.b16,1);
);

!mouse_cap ? (
  ch1.canMoveDot = 0;
  ch2.canMoveDot = 0;
);

/* Sliders */

sliders.x = 580;
sliders.y = 100;

gfx_setfont(1,"Arial",14);

gfx_r = gfx_g = gfx_b = 1; gfx_a = 1;

slider1 = s1.draw_panslider(sliders.x+190,sliders.y,280,15,-100,100,1,0,"","CH1 Left - Right");
slider2 = s2.draw_panslider(sliders.x+190,sliders.y+20,280,15,-100,100,1,0,"","CH1 Front - Back");

!param.chmode ? (
  gfx_a = 0.5;
  s3.disabled = s4.disabled = 1;
) : (
  s3.disabled = s4.disabled = 0;
);

slider3 = s3.draw_panslider(sliders.x+190,sliders.y+50,280,15,-100,100,1,0,"","CH2 Left - Right");
slider4 = s4.draw_panslider(sliders.x+190,sliders.y+70,280,15,-100,100,1,0,"","CH2 Front - Back");

gfx_a = 1;
slider5 = s5.draw_hslider(sliders.x+190,sliders.y+100,280,15,-1,1,0.01,0,"","Center Channel Influence");
slider6 = s6.draw_hslider(sliders.x+190,sliders.y+120,280,15,-60,60,1,0,"dB","Center/Edge Influence");
slider7 = s7.draw_hslider(sliders.x+190,sliders.y+140,280,15,0,1000,10,100,"ms","Smoothing Time");

slider10 = s10.draw_hslider(sliders.x+190,sliders.y+170,280,15,-60,10,0.1,-60,"dB","Send To C");
slider10 == -60 ? (
  s10.hidereadout = 1;
  gfx_x = sliders.x+475; gfx_y = sliders.y+170;
  gfx_drawstr("-Inf");
) : (
  s10.hidereadout = 0;
);
slider11 = s11.draw_hslider(sliders.x+190,sliders.y+190,280,15,-60,10,0.1,-60,"dB","Send To LFE");
slider11 == -60 ? (
  s11.hidereadout = 1;
  gfx_x = sliders.x+475; gfx_y = sliders.y+190;
  gfx_drawstr("-Inf");
) : (
  s11.hidereadout = 0;
);

slider12 = s12.draw_chkbox(sliders.x+190,sliders.y+210,15,"Input Mono/Stereo");
slider13 = s13.draw_hslider(sliders.x+190,sliders.y+230,280,15,-20,20,0.1,0,"dB","Output");

slider20 = s20.draw_hselector(sliders.x+120,sliders.y+290,130,15,0,4,1,0,"Animation");
gfx_x = sliders.x+120; gfx_y = sliders.y+305;
slider20 == 0 ? gfx_drawstr("Off");
slider20 == 1 ? gfx_drawstr("Rotate");
slider20 == 2 ? gfx_drawstr("Cruise");
slider20 == 3 ? gfx_drawstr("Randomize");
slider20 == 4 ? gfx_drawstr("Fish Bowl");
slider21 = s21.draw_hslider(sliders.x+120,sliders.y+320,130,15,-120,120,1,1,"rpm","Speed");
slider22 = s22.draw_hslider(sliders.x+120,sliders.y+340,130,15,0,1,0.01,1,"","X Scale");
slider23 = s23.draw_hslider(sliders.x+120,sliders.y+360,130,15,0,1,0.01,1,"","Y Scale");
slider24 = s24.draw_hslider(sliders.x+120,sliders.y+380,130,15,-1,1,0.01,0,"","X Offset");
slider25 = s25.draw_hslider(sliders.x+120,sliders.y+400,130,15,-1,1,0.01,0,"","Y Offset");

!param.chmode ? (
  gfx_a = 0.5;
  s26.disabled = s27.disabled = s28.disabled = s29.disabled = s30.disabled = s31.disabled = 1;  
) : (
  s26.disabled = s27.disabled = s28.disabled = s29.disabled = s30.disabled = s31.disabled = 0;
);

slider26 = s26.draw_hselector(sliders.x+360,sliders.y+290,130,15,0,4,1,0,"Animation");
gfx_x = sliders.x+360; gfx_y = sliders.y+305;
slider26 == 0 ? gfx_drawstr("Off");
slider26 == 1 ? gfx_drawstr("Rotate");
slider26 == 2 ? gfx_drawstr("Cruise");
slider26 == 3 ? gfx_drawstr("Randomize");
slider26 == 4 ? gfx_drawstr("Fish Bowl");
slider27 = s27.draw_hslider(sliders.x+360,sliders.y+320,130,15,-120,120,1,1,"rpm","Speed");
slider28 = s28.draw_hslider(sliders.x+360,sliders.y+340,130,15,0,1,0.01,1,"","X Scale");
slider29 = s29.draw_hslider(sliders.x+360,sliders.y+360,130,15,0,1,0.01,1,"","Y Scale");
slider30= s30.draw_hslider(sliders.x+360,sliders.y+380,130,15,-1,1,0.01,0,"","X Offset");
slider31 = s31.draw_hslider(sliders.x+360,sliders.y+400,130,15,-1,1,0.01,0,"","Y Offset");

_panDirty ? (
  ConvertPanSlider2Lin();
  slider_automate(slider1);
  slider_automate(slider2);
  slider_automate(slider3);
  slider_automate(slider4);
  _panDirty = 0;
);

_sliderDirty ? (
  ProcessSliders();
  booleans.canUpdateSliders = 1;
  _sliderDirty = 0;
);

/* Send animation to automation */
/* Unfortunately - due to limitation in VST version - it only works from @gfx block*/
RecordAnimation();

/* Meters */

m.vert_meter_layout();

mtr0 = max(mtr0-0.006,0);
mtr1 = max(mtr1-0.006,0);
mtr2 = max(mtr2-0.006,0);
mtr3 = max(mtr3-0.006,0);
mtr4 = max(mtr4-0.006,0);
mtr5 = max(mtr5-0.006,0);
mtr6 = max(mtr6-0.006,0);
mtr7 = max(mtr7-0.006,0);

m6.vert_meter_level(mtr6);
m7.vert_meter_level(mtr7);

m0.vert_meter_level(mtr0);
m1.vert_meter_level(mtr1);
m2.vert_meter_level(mtr2);
m3.vert_meter_level(mtr3);
m4.vert_meter_level(mtr4);
m5.vert_meter_level(mtr5);

/************/

gfx_x = 1065; gfx_y = 520;
gfx_r = gfx_g = gfx_b = 1; gfx_a = 0.5;
gfx_setfont(1,"Arial",11);
gfx_drawstr(buildStr);
