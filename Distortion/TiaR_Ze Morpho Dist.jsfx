desc: Ze Morpho Dist
author: T.Rochebois
version: 1.0
changelog: Initial release
provides: TiaR_Ze Morpho Dist/*
link: http://forum.cockos.com/showthread.php?t=173611
about: This is a LFO controlled Stereo Distortion Effect

//Author: Thierry Rochebois 2016
slider10:1<0.1,10>A Gain
slider11:127<20,127,0.001>A cutoff
slider12:1<0.05,2,0.001>A res.
slider13:127<20,127,0.001>A out cutoff
slider14:1<0.05,2,0.001>A out res.

slider20:1<0.1,10>B Gain
slider21:127<20,127,0.001>B cutoff
slider22:1<0.05,2,0.001>B res.
slider23:127<20,127,0.001>B out cutoff
slider24:1<0.05,2,0.001>B out res.

slider30:1<0.1,10>C Gain
slider31:127<20,127,0.001>C cutoff
slider32:1<0.05,2,0.001>C res.
slider33:127<20,127,0.001>C out cutoff
slider34:1<0.05,2,0.001>C out res.

slider40:1<0.1,10>D Gain
slider41:127<20,127,0.001>D cutoff
slider42:1<0.05,2,0.001>D res.
slider43:127<20,127,0.001>D out cutoff
slider44:1<0.05,2,0.001>D out res.


slider50:0<0,8,1{cos LFO,Ramp,Inv Ramp,Static Zero(AC),Static One(BD),CAS,rand steps,random,Vibe}>X mod wave
slider51:0<0,8,1{sin LFO,Ramp,Inv Ramp,Static Zero(AB),Static One(CD),SAS,rand steps,random,Vibe}>Y mod wave

slider53:0<0,2,1{Free LFO,Synch LFO,Aftertouch}>X mod src
slider54:0<0,2,1{Free LFO,Synch LFO,Aftertouch}>Y mod src

slider60:0.125<0.1,10>Free LFO Rate (Hz)
slider61:12<0,16,1{1/8,1/6,1/4,1/3,1/2,2/3,3/4,1,2,3,4,6,8,12,16,24,32}>Sync LFO cycle (beats)
slider62:8<0,32>Left/Right offset
// ___________________________________________________________________
@init
// ___________________________________________________________________
function CH8() local(i F fLim fCoef)(
  CH8_p2f1  = ad; ad += 128;
  CH8_dp2f1 = ad; ad += 128;
  fLim = min(0.5 * srate, 16000);
  fCoef = (1/8) * $pi / srate;
  i = 0; loop(128,
    F = 2*440 * 2 ^ ((i - 69) * (1/12));
    F = min(F, fLim);
    CH8_p2f1[i] = 2 * sin(F * fCoef);
    i += 1;
  );
  i = 0; loop(127, CH8_dp2f1[i] = CH8_p2f1[i + 1] - CH8_p2f1[i]; i += 1; );
  CH8_dp2f1[127] = 0;
);
// _Q ]0,2]
function CH8_set(p _Q) instance(F1 coefB) local(p0)(
  p = min(127, max(0, p));
  p0 = p|0;
  F1 = CH8_p2f1[p0] + (p - p0) * CH8_dp2f1[p0];
  coefB = 1 - F1 * _Q;
);
function CH8_proc(x) instance(L B F1 coefB)(
  B = F1 * (x - (L += F1 * B)) + coefB * B;
  L;
);
// ___________________________________________________________________
function dec2(x0 x1) 
  instance(R1 R2 R3 R4 R5 R6 R7 R8 R9 R10) local(h9x0 h7x0 h5x0 h3x0 h1x0) (
  h9x0 = (18/16384) * x0;   h7x0 = (-116/16384) * x0; 
  h5x0 = (429/16384) * x0;  h3x0 = (-1277/16384) * x0; 
  h1x0 = (5042/16384) * x0;
  R10=R9+h9x0;
  R9=R8+h7x0; R8=R7+h5x0; R7=R6+h3x0; R6=R5+h1x0; R5=R4+h1x0+0.5*x1;
  R4=R3+h3x0; R3=R2+h5x0; R2=R1+h7x0; R1=h9x0;
  R10;  
);
function dec4(x0 x1 x2 x3) (
  this.dec2(this.sub.dec2(x0, x1), this.sub.dec2(x2, x3)); 
);
function dec8(x0 x1 x2 x3 x4 x5 x6 x7) (
  this.dec2(this.sub.dec4(x0, x1, x2, x3), 
            this.sub.dec4(x4, x5, x6, x7)); 
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function allZero(t)local(i r)(
  r = 0; i = 0; loop(13, r |= (t[i] !== 0); i += 1; ); !r;
);
function setUnitGain(t)local(i)(
  i = 0; loop(13, t[i] = (i - 6) * (1/6); i += 1; );
);
function calcBilin(A B C D mx my)instance(AB CD)(
  AB = A + mx * (B - A);
  CD = C + mx * (D - C);
  AB + my * (CD - AB);
);
function calcGainAndFilters() instance(mod gain inFilter outFilter)(
  gain = calcBilin(slider10, slider20, slider30, slider40, mod.x, mod.y);
  inFilter.CH8_set(
    calcBilin(slider11, slider21, slider31, slider41, mod.x, mod.y),
    calcBilin(slider12, slider22, slider32, slider42, mod.x, mod.y)
  );
  outFilter.CH8_set(
    calcBilin(slider13, slider23, slider33, slider43, mod.x, mod.y),
    calcBilin(slider14, slider24, slider34, slider44, mod.x, mod.y)
  );
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function int64(x t dt)local(x0)(
  x += 64 * ((x  <  0) - (x >= 64));
  x0 = x|0;  t[x0] + (x - x0) * dt[x0];
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function proc(x) instance(gain mod out)local(x0 a)(
  x *= gain;
  x = min(11.999, max(0, x * 6 + 6));
  x0 = x|0;
  a = x - x0;
  A.v = A.t[x0] + a * A.dt[x0];
  B.v = B.t[x0] + a * B.dt[x0];
  C.v = C.t[x0] + a * C.dt[x0];
  D.v = D.t[x0] + a * D.dt[x0];
  AB.v = A.v + mod.x * (B.v - A.v);
  CD.v = C.v + mod.x * (D.v - C.v);
  out = AB.v + mod.y * (CD.v - AB.v);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
function ov8Proc(newSpl) instance(fSpl spl y inFilter outFilter) local(dSpl)(
  dSpl = 0.125 * (newSpl - spl); // linear interpolation and LPF on input
  y = this.dec8( 
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl))),
    outFilter.CH8_proc(this.proc(inFilter.CH8_proc(spl += dSpl)))
  );
  y = min(10,max(-10,y));
);
function LFO_updateDt(t dt)local(i) (
  i=0;loop(64,
    dt[i] = t[(i + 1) % 64] - t[i];
    i+=1;
  );
);

function LFO_sqr_sc(ts dts tc dtc)local(i) (
  i=0;loop(64,
    ts[i] = sin(i*2*$pi/64) > 0;
    tc[i] = cos(i*2*$pi/64) > 0;
    i+=1;
  );
  LFO_updateDt(ts, dts);
  LFO_updateDt(tc, dtc);
);
function LFO_rndSteps(ts dts tc dtc)local(ip) (
  i=0;loop(64,
    i % 8 == 0 ? (
      p=i + 312*cos(1723*i + 21*cos(-34537*i));
      tc[i] = 0.5+0.5*cos(p);
      ts[i] = 0.5+0.5*sin(p);
    ) : (tc[i] = tc[i-1]; ts[i] = ts[i-1];  );
    i+=1;
  );
  LFO_updateDt(ts, dts);  LFO_updateDt(tc, dtc);
);
function rnd2(i)(3121*cos(1723*i + 211*cos(-3437*i)) + 257*sin(-137*i + 257*sin(-953*i)););
function maxim(t)local(i m0 m1)(
  m0=m1=t[0];
  i=0;loop(64,
    m0 = min(t[i],m0);
    m1 = max(t[i],m1);
    i+=1;
  );
  i=0;loop(64,
    t[i] = (t[i]-m0)/(m1-m0);
    i+=1;
  );
);
function LFO_rand(ts dts tc dtc)local(i p0 p1 p2 p3 p4) (
  i=0;loop(64,
    p0 = rnd2(i); p1 = rnd2((i+1)%64); p2 = rnd2((i+2)%64); p3 = rnd2((i+3)%64); p4 = rnd2((i+4)%64);
    tc[i] = (1/17) * (8.5 + cos(p0) + 2*cos(p1) + 2.5*cos(p2) + 2*cos(p3) + cos(p4));
    ts[i] = (1/17) * (8.5 + sin(p0) + 2*sin(p1) + 2.5*sin(p2) + 2*sin(p4) + sin(p4));
    i+=1;  );
  maxim(ts);
  maxim(tc);
  LFO_updateDt(ts, dts);  LFO_updateDt(tc, dtc);
);

function LFO_vib(ts dts tc dtc) local(i) (
  i=0;loop(64,
    tc[i] = 0.5 + 0.45*cos(i*2*$pi/64) + 0.05*sin(18*i*2*$pi/64);
    ts[i] = 0.5 + 0.45*sin(i*2*$pi/64) - 0.05*cos(18*i*2*$pi/64);
    i+=1;  );
  LFO_updateDt(ts, dts);  LFO_updateDt(tc, dtc);
);

// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
DEC5_h0=346/692; DEC5_h1=208/692; DEC5_h3=-44/692; DEC5_h5=9/692;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
ad = 1; // top address for tables
A.t  = ad;ad += 13;B.t  = ad;ad += 13;C.t  = ad; ad += 13;D.t  = ad;ad += 13;
A.dt = ad;ad += 13;B.dt = ad;ad += 13;C.dt = ad; ad += 13;D.dt = ad;ad += 13;
0[0] == 0 ? ( // init before serialize ?
  allZero(A.t) ? setUnitGain(A.t);
  allZero(B.t) ? setUnitGain(B.t);
  allZero(C.t) ? setUnitGain(C.t);
  allZero(D.t) ? setUnitGain(D.t);
);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
LFO.c.t  = ad; ad += 64;
LFO.c.dt = ad; ad += 64;
LFO.s.t  = ad; ad += 64;
LFO.s.dt = ad; ad += 64;
coef = 2*$pi/64;
i = 0; loop(64,
  LFO.c.t[i]  = 0.5+0.5*cos(coef * i);
  LFO.s.t[i]  = 0.5+0.5*sin(coef * i);
  LFO.c.dt[i] = 0.5+0.5*cos(coef * (i+1)) - LFO.c.t[i];
  LFO.s.dt[i] = 0.5+0.5*sin(coef * (i+1)) - LFO.s.t[i];
  i+=1;
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
LFO.r.t  = ad; ad += 64;
LFO.r.dt = ad; ad += 64;
coef = 1/64;
i = 0; loop(64,
  LFO.r.t[i]  = i*coef;
  LFO.r.dt[i] = ((i+1)%64)*coef - LFO.r.t[i];
  i+=1;
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
LFO.ir.t  = ad; ad += 64;
LFO.ir.dt = ad; ad += 64;
coef = 1/64;
i = 0; loop(64,
  LFO.ir.t[i]  = 1-i*coef;
  LFO.ir.dt[i] = (1-((i+1)%64)*coef) - LFO.ir.t[i];
  i+=1;
);
// _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
LFO.zero.t  = ad; ad += 64;
LFO.zero.dt = ad; ad += 64;
LFO.one.t  = ad; ad += 64;
LFO.one.dt = ad; ad += 64;
coef = 1/64;
i = 0; loop(64,
  LFO.zero.t[i]  = 0;
  LFO.one.t[i]  = 1;
  i+=1;
);
LFO.sqr_s.t = ad; ad += 64;
LFO.sqr_s.dt = ad; ad += 64;
LFO.sqr_c.t = ad; ad += 64;
LFO.sqr_c.dt = ad; ad += 64;
LFO_sqr_sc(LFO.sqr_s.t, LFO.sqr_s.dt, LFO.sqr_c.t, LFO.sqr_c.dt);
LFO.steps_s.t = ad; ad += 64;
LFO.steps_s.dt = ad; ad += 64;
LFO.steps_c.t = ad; ad += 64;
LFO.steps_c.dt = ad; ad += 64;
LFO_rndSteps(LFO.steps_s.t, LFO.steps_s.dt, LFO.steps_c.t, LFO.steps_c.dt);
LFO.rand_s.t = ad; ad += 64;
LFO.rand_s.dt = ad; ad += 64;
LFO.rand_c.t = ad; ad += 64;
LFO.rand_c.dt = ad; ad += 64;
LFO_rand(LFO.rand_s.t, LFO.rand_s.dt, LFO.rand_c.t, LFO.rand_c.dt);
LFO.vib_s.t = ad; ad += 64;
LFO.vib_s.dt = ad; ad += 64;
LFO.vib_c.t = ad; ad += 64;
LFO.vib_c.dt = ad; ad += 64;
LFO_vib(LFO.vib_s.t, LFO.vib_s.dt, LFO.vib_c.t, LFO.vib_c.dt);

// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
co_downUp = ad;
co_downUp[0] = 1/(srate * 0.100); co_downUp[1] = 1/(srate * 0.010);
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
t_bps = ad; ad += 17;
t_bps[ 0]=1/8; t_bps[ 1]=1/6; t_bps[ 2]=1/4; t_bps[ 3]=1/3; t_bps[ 4]=1/2; 
t_bps[ 5]=2/3; t_bps[ 6]=3/4; t_bps[ 7]=1;   t_bps[ 8]=2;   t_bps[ 9]=3; 
t_bps[10]=4;   t_bps[11]=6;   t_bps[12]=8;   t_bps[13]=12;  t_bps[14]=16; 
t_bps[15]=24;  t_bps[16]=32;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
CH8();
_srate = 1/srate;
// ___________________________________________________________________
@slider
dp = 64*slider60*_srate;
    slider50 == 0 ? ( x.LFO.t = LFO.c.t;  x.LFO.dt = LFO.c.dt;
) : slider50 == 1 ? ( x.LFO.t = LFO.r.t;  x.LFO.dt = LFO.r.dt;
) : slider50 == 2 ? ( x.LFO.t = LFO.ir.t; x.LFO.dt = LFO.ir.dt;
) : slider50 == 3 ? ( x.LFO.t = LFO.zero.t; x.LFO.dt = LFO.zero.dt;
) : slider50 == 4 ? ( x.LFO.t = LFO.one.t; x.LFO.dt = LFO.one.dt;
) : slider50 == 5 ? ( x.LFO.t = LFO.sqr_c.t; x.LFO.dt = LFO.sqr_c.dt;
) : slider50 == 6 ? ( x.LFO.t = LFO.steps_c.t; x.LFO.dt = LFO.steps_c.dt;
) : slider50 == 7 ? ( x.LFO.t = LFO.rand_c.t; x.LFO.dt = LFO.rand_c.dt;
) : slider50 == 8 ? ( x.LFO.t = LFO.vib_c.t; x.LFO.dt = LFO.vib_c.dt;
);
    slider51 == 0 ? ( y.LFO.t = LFO.s.t;  y.LFO.dt = LFO.s.dt;
) : slider51 == 1 ? ( y.LFO.t = LFO.r.t;  y.LFO.dt = LFO.r.dt;
) : slider51 == 2 ? ( y.LFO.t = LFO.ir.t; y.LFO.dt = LFO.ir.dt;
) : slider51 == 3 ? ( y.LFO.t = LFO.zero.t; y.LFO.dt = LFO.zero.dt;
) : slider51 == 4 ? ( y.LFO.t = LFO.one.t; y.LFO.dt = LFO.one.dt;
) : slider51 == 5 ? ( y.LFO.t = LFO.sqr_s.t; y.LFO.dt = LFO.sqr_s.dt;
) : slider51 == 6 ? ( y.LFO.t = LFO.steps_s.t; y.LFO.dt = LFO.steps_s.dt;
) : slider51 == 7 ? ( y.LFO.t = LFO.rand_s.t; y.LFO.dt = LFO.rand_s.dt;
) : slider51 == 8 ? ( y.LFO.t = LFO.vib_s.t; y.LFO.dt = LFO.vib_s.dt;
);
bpCoef=1/t_bps[min(16,max(0,slider61))];
// ___________________________________________________________________
@serialize
0[0] = 1; 
file_mem(0, 0, 1); // helps to detect the first init
file_mem(0, 1, 13*4);
// ___________________________________________________________________
@block
while(midirecv(offset, msg1, msg23))(  midisend(offset, msg1, msg23);
  msg1 & $xF0 == $xD0 ? aftTch = (msg23 & 0x7F) * (1/127);
);
play_state > 0 ?  bp = beat_position * bpCoef;
bp -= 151200 * (bp > 151200);
dbp = tempo * (1/60) * _srate * bpCoef;
// ___________________________________________________________________
@sample
sAftTch += co_downUp[aftTch > sAftTch] * (aftTch - sAftTch);
bp += dbp;
p += dp; p -= 64 * (p >= 64);

syncp = (bp - (bp|0))*64;

slider53 == 0 ? (
  l.mod.x = int64(p - slider62, x.LFO.t, x.LFO.dt);
  r.mod.x = int64(p + slider62, x.LFO.t, x.LFO.dt);
) : slider53 == 1 ? (
  l.mod.x = int64(syncp - slider62, x.LFO.t, x.LFO.dt);
  r.mod.x = int64(syncp + slider62, x.LFO.t, x.LFO.dt);
) : slider53 == 2 ? (
  l.mod.x = r.mod.x = sAftTch;
);
slider54 == 0 ? (
  l.mod.y = int64(p - slider62, y.LFO.t, y.LFO.dt);
  r.mod.y = int64(p + slider62, y.LFO.t, y.LFO.dt);
) : slider54 == 1 ? (
  l.mod.y = int64(syncp - slider62, y.LFO.t, y.LFO.dt);
  r.mod.y = int64(syncp + slider62, y.LFO.t, y.LFO.dt);
) : slider54 == 2 ? (
  l.mod.y = r.mod.y = sAftTch;
);
l.calcGainAndFilters();
r.calcGainAndFilters();
spl0 = l.ov8Proc(spl0);
spl1 = r.ov8Proc(spl1);
// ___________________________________________________________________
@gfx 448 256
function col(r g b) (gfx_r = r; gfx_g = g; gfx_b = b;);
function col(r g b a) (col(r, g, b); gfx_a = a;);
function dot(x y)(gfx_rect(x-1,y-1,3,3););
u = min(gfx_w * (1/28), gfx_h * (1/16)) | 0;
_u = 1/u;
_3u = _u * (1/3);
col(0.20, 0.00, 0.00); gfx_rect(   u,    u, 12*u,  6*u);
col(0.00, 0.15, 0.00); gfx_rect(15*u,    u, 12*u,  6*u);
col(0.13, 0.10, 0.00); gfx_rect(   u,  9*u, 12*u,  6*u);
col(0.00, 0.00, 0.25); gfx_rect(15*u,  9*u, 12*u,  6*u);
col(0.8,0,0);   gfx_x = 13*u-16; gfx_y = 7*u-16; gfx_printf("A");
col(0,0.7,0);   gfx_x = 15*u+ 2; gfx_y = 7*u-16; gfx_printf("B");
col(0.7,0.6,0); gfx_x = 13*u-16; gfx_y = 9*u+ 2; gfx_printf("C");
col(0,0,1);     gfx_x = 15*u+ 2; gfx_y = 9*u+ 2; gfx_printf("D");
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
col(0.5,0.2,0,0.5); gfx_circle(u + 26*u*l.mod.x, u + 14*u*l.mod.y, u*0.5,1,1); 
col(0,0.2,0.5,0.5); gfx_circle(u + 26*u*r.mod.x, u + 14*u*r.mod.y, u*0.5,1,1); 
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
col(1, 1, 1, 0.5);
mouse_x >= 0.5 * u && mouse_x < 13.5 * u ? // A or C
(
  ii = (mouse_x *_u - 0.5) | 0;
  mouse_y >= u && mouse_y < 7 * u ? // A
  ( gfx_rect((0.5+ii)*u,    u, u, 6*u);
    mouse_cap > 0 ? A.t[ii] = (4*u-mouse_y)*_3u;
    A.t[ii] = min(1,max(-1, A.t[ii] + mouse_wheel*(0.05/120))); 
  ) : mouse_y >= 9*u && mouse_y < 15*u ? // C
  ( gfx_rect((0.5+ii)*u,  9*u, u, 6*u);
    mouse_cap > 0 ? C.t[ii] = (12*u-mouse_y)*_3u; 
    C.t[ii] = min(1,max(-1, C.t[ii] + mouse_wheel*(0.05/120))); 
  );
) : mouse_x >= 14.5*u && mouse_x < 27.5*u ? // B or D
(
  ii = (mouse_x*_u - 14.5) | 0;
  mouse_y >=  u && mouse_y < 7 * u ? // B
  ( gfx_rect((14.5+ii)*u,    u, u, 6*u);
    mouse_cap > 0 ? B.t[ii] = ( 4*u-mouse_y)*_3u; 
    B.t[ii] = min(1,max(-1, B.t[ii] + mouse_wheel*(0.05/120))); 
  ): mouse_y >=  9*u && mouse_y < 15 * u ? // D
  ( gfx_rect((14.5+ii)*u,  9*u, u, 6*u);
    mouse_cap > 0 ? D.t[ii] = (12*u-mouse_y)*_3u; 
    D.t[ii] = min(1,max(-1, D.t[ii] + mouse_wheel*(0.05/120))); 
  );
);
mouse_wheel = 0;
// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
col(1,1,1,1);
i = 0; loop(12,
  gfx_line((i+ 1)*u, ( 4 - 3*A.t[i])*u, (i+ 2)*u, ( 4 - 3*A.t[i+1])*u);
  gfx_line((i+15)*u, ( 4 - 3*B.t[i])*u, (i+16)*u, ( 4 - 3*B.t[i+1])*u);
  gfx_line((i+ 1)*u, (12 - 3*C.t[i])*u, (i+ 2)*u, (12 - 3*C.t[i+1])*u);
  gfx_line((i+15)*u, (12 - 3*D.t[i])*u, (i+16)*u, (12 - 3*D.t[i+1])*u);
  A.dt[i] = A.t[i+1] - A.t[i];
  B.dt[i] = B.t[i+1] - B.t[i];
  C.dt[i] = C.t[i+1] - C.t[i];
  D.dt[i] = D.t[i+1] - D.t[i];
  i += 1;
);
i = 0; loop(13,
  dot((i+ 1)*u, ( 4 - 3*A.t[i])*u);
  dot((i+15)*u, ( 4 - 3*B.t[i])*u);
  dot((i+ 1)*u, (12 - 3*C.t[i])*u);
  dot((i+15)*u, (12 - 3*D.t[i])*u);
  i += 1;
);
