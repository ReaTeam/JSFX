desc: MIDI CC Bistate Button
author: Ben 'Talagan' Babut
version: 1.0
changelog:
  - Initial version
about:
  ## Description

  Listens to a CC on a specific route (Bus+Channel+CC), and transforms it into a "bistate button". Re-routing is possible.
  
  Two modes are possible :
  
    - In "Push Button" mode, a MIDI Message is emitted when the input CC value passes across the threshold in both directions (if it's upwards, the "On" value is emitted on the output CC, and if it's downwards, the "Off" value is emitted).
    - In "Toggle" mode, a MIDI Message is emitted when the input CC value passes across the threshold but only upwards. It the memorized state was "Off", the "On" value is emitted, and reversely.
  
  ## Reaper forum thread
  
    https://forum.cockos.com/showthread.php?t=238532
license:
  MIT (Do whatever you like with this code).

slider1:1<0,16,1,{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>In MIDI Bus
slider2:0<0,16,1 {Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>In Channel
slider3:1<0,128,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>In CC#
slider4:0<0,16,1{Same as received,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Out MIDI Bus
slider5:0<0,16,1{Same as received,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Out Channel
slider6:1<0,128,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Out CC#
slider7:64<0,127,1>Threshold
slider8:0<0,127,1>Off Value
slider9:127<0,127,1>On Value
slider10:0<0,1,1{0 Push Button,1 Toggle>Mode
slider11:s_state=0<0,1,1,{0 Off, 1 On}>State

@init

ANY     = 0;
AS_SRC  = 0;
MSG_CC  = 0x0B;

ext_midi_bus = 1;

@slider

s_inbus      = slider1;
s_inchannel  = slider2;
s_incc       = slider3;
s_outbus     = slider4;
s_outchannel = slider5;
s_outcc      = slider6;
s_thresh     = slider7;
s_offval     = slider8;
s_onval      = slider9;
s_mode       = slider10;

last_region  = s_onval;  
  
@block

function mainLoop() 
local(mpos, msg1, msg2, msg3, dst_chan, dst_status, is_toggling, should_pass_through, last_region)
(
  while (midirecv(mpos, msg1, msg2, msg3)) (
    evt = 0;
    evt.bus    = midi_bus + 1; // 1-16, not 0-15
    evt.mpos   = mpos;
    evt.msg1   = msg1;
    evt.msg2   = msg2;
    evt.msg3   = msg3;
    evt.status = msg1;
    evt.type   = (msg1 >> 4)& 0x0F;
    evt.chan   = (msg1 & 0x0F)+1; // 1-16, not 0-15
    evt.cc_num = 0;
    evt.cc_val = 0;
    
    should_pass_through = 1;
  
    ((s_inbus == ANY || s_inbus == evt.bus) && (s_inchannel == ANY || s_inchannel == evt.chan))?(
      // Bus matches
      (evt.type == MSG_CC) ? (
        // Translate into "cc words" for more comprehensible code
        evt.cc_num = msg2; 
        evt.cc_val = msg3;
      
        // It's a CC message
        (s_incc == ANY || s_incc == evt.cc_num)?(
        
          should_pass_through = 0;
        
          // CC message matches wanted input
          dst_chan    = s_outchannel;
          dst_chan    = (dst_chan == AS_SRC)?(evt.chan):(dst_chan);
          dst_status  = (MSG_CC<<4)|(dst_chan-1); // Chan : 1-16 ->> 0-15
        
          midi_bus    = (s_outbus == AS_SRC)?(evt.bus-1):(s_outbus-1); 
          
          is_toggling = (s_mode == 0)?(
            ( (evt.cc_val >= s_thresh && s_state == 0) || (evt.cc_val < s_thresh && s_state == 1) );
          ):(
            ( evt.cc_val >= s_thresh && last_region == 0 );
          );
          
          last_region = (evt.cc_val >= s_thresh);
          
          (is_toggling)?(
            // State change !
            s_state = !s_state;
            midisend(mpos, dst_status, s_outcc, (s_state==1)?(s_onval):(s_offval) );
          );
        );
      );
    );
  
    (should_pass_through == 1)?(
      midisend(mpos, evt.msg1, evt.msg2, evt.msg3);
    );
  );
);

mainLoop();
