desc: MIDI Performer
author: Kevin Morrison (ThrashJazzAssassin)
version: 0.3
changelog:
  -Add more routing options
  -Add coloured Keyboard zone view
  -Show note names on note zone controls
  -Gray out unused rows
  -Fixed bug with input sliders
screenshot: https://stash.reaper.fm/35134/performer.PNG
about:
  8 x Router/Filter/Transposer/Bank+Program

  Features hanging note prevention so holding a note or sustain pedal while changing
  output routing, note filter or transpose is unlikely to leave notes hanging when they are released.

  Hold CTRL/Command to mousewheel shift by 12 (only if the fx window is focused).

slider1:      thru=0<0, 1,1{OFF,ON>                                     -Thru
slider2:globChanIn=0<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>-Global Channel In
slider3:   ccRoute=1<0, 9,1{Block,All,1,2,3,4,5,6,7,8}>                 -CC Routing
slider4:   pwRoute=1<0, 9,1{Block,All,1,2,3,4,5,6,7,8}>                 -Pitch Wheel Routing
slider5:  PCenable=1<0, 1,1{Off,On}>                                    -PC enable
slider6: globBusIn=0<0,16,1{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>-Global Bus In
slider7: noteRoute=1<0, 9,1{Block,All,1,2,3,4,5,6,7,8}>                 -Note Routing

slider8:   0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -1-In MIDI Bus
slider9:   0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -1-In MIDI Channel
slider10:  1<  0, 16,1{OFF,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -1-Output MIDI Bus
slider11:  1<  1, 16,1> -1-Ouput MIDI Channel
slider12:  0<  0,127,1> -1-Minimum Note
slider13:127<  1,127,1> -1-Maximum Note
slider14:  0<-48, 48,1> -1-Transpose
slider15:  0<  0,127,1> -1-Bank MSB
slider16:  0<  0,127,1> -1-Bank LSB
slider17:  0<  0,127,1> -1-Program

slider18:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -2-In MIDI Bus
slider19:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -2-In MIDI Channel
slider20:  0<  0, 16,1{OFF,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -2-Output MIDI Bus
slider21:  1<  1, 16,1> -2-Ouput MIDI Channel
slider22:  0<  0,127,1> -2-Minimum Note
slider23:127<  1,127,1> -2-Maximum Note
slider24:  0<-48, 48,1> -2-Transpose
slider25:  0<  0,127,1> -2-Bank MSB
slider26:  0<  0,127,1> -2-Bank LSB
slider27:  0<  0,127,1> -2-Program

slider28:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -3-In MIDI Bus
slider29:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -3-In MIDI Channel
slider30:  0<  0, 16,1{OFF,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -3-Output MIDI Bus
slider31:  1<  1, 16,1> -3-Ouput MIDI Channel
slider32:  0<  0,127,1> -3-Minimum Note
slider33:127<  0,127,1> -3-Maximum Note
slider34:  0<-48, 48,1> -3-Transpose
slider35:  0<  0,127,1> -3-Bank MSB
slider36:  0<  0,127,1> -3-Bank LSB
slider37:  0<  0,127,1> -3-Program

slider38:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -4-In MIDI Bus
slider39:  0<  0, 16,1{^,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -4-In MIDI Channel
slider40:  0<  0, 16,1{OFF,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}> -4-Output MIDI Bus
slider41:  1<  1, 16,1> -4-Ouput MIDI Dhannel
slider42:  0<  0,127,1> -4-Minimum Note
slider43:127<  0,127,1> -4-Maximum Note
slider44:  0<-48, 48,1> -4-Transpose
slider45:  0<  0,127,1> -4-Bank MSB
slider46:  0<  0,127,1> -4-Bank LSB
slider47:  0<  0,127,1> -4-Program

@init
ext_midi_bus = 1;
ext_noinit   = 1;

noOfOuts = 8;

noteStr

// statusbytes
statNoteOn  = $x90;
statNoteOff = $x80;
statCC      = $xB0;
statPitchW  = $xE0;
statProgram = $xC0;

function isNoteOn  ()(noteStatus==statNoteOn && msg3);
function isNoteOff ()(noteStatus==statNoteOff || (noteStatus==statNoteOn && msg3==0));
function isSusPedal()(noteStatus==statCC && msg2==64);
function isCC      ()(noteStatus==statCC);
function isPitchW  ()(noteStatus==statPitchW);
function isProgram ()(noteStatus==statProgram);

//arrays
  //sliders
  row     = 0;
  inBus   = noOfOuts+row;
  inChan  = noOfOuts+inBus;
  outBus  = noOfOuts+inChan;
  outChan = noOfOuts+outBus;
  minNote = noOfOuts+outChan;
  maxNote = noOfOuts+minNote;
  trans   = noOfOuts+maxNote;
  bankMSB = noOfOuts+trans;
  _bankMSB= noOfOuts+bankMSB;
  bankLSB = noOfOuts+_bankMSB;
  _bankLSB= noOfOuts+bankLSB;
  prog    = noOfOuts+_bankLSB;
  _prog   = noOfOuts+prog;

  //Output states
  note         = noOfOuts+_prog;
  susPedal     = noOfOuts+note;
  susPedalBus  = noOfOuts+susPedal;
  susPedalChan = noOfOuts+susPedalBus;
  noteInfo     = noOfOuts+susPedalChan;

//noteInfo Offsets
offsetNoteInBus   = $x80;
offsetNoteInChan  = $x80*2;
offsetNoteOutBus  = $x80*3;
offsetNoteOutChan = $x80*4;
offsetTrans       = $x80*5;

//////////dest, val, len
i=1; loop(noOfOuts,
  memset(row+i-1,i,1);
  i+=1;
);

memset(inBus,    0, noOfOuts);
memset(inChan,   0, noOfOuts);
memset(outBus+1, 0, noOfOuts-1);
memset(outChan,  0, noOfOuts);
memset(minNote,  0, noOfOuts);
memset(maxNote,127, noOfOuts);
memset(trans,    0, noOfOuts);
memset(bankMSB,  0, noOfOuts);
memset(bankLSB,  0, noOfOuts);
memset(prog,     0, noOfOuts);

@slider
s = 0; loop(4,
   inBus [s] = slider((s*10)+ 8);
   inChan[s] = slider((s*10)+ 9);
  outBus [s] = slider((s*10)+10);
  outChan[s] = slider((s*10)+11);
  minNote[s] = slider((s*10)+12);
  maxNote[s] = slider((s*10)+13);
  trans  [s] = slider((s*10)+14);
  bankMSB[s] = slider((s*10)+15);
  bankLSB[s] = slider((s*10)+16);
  prog   [s] = slider((s*10)+17);
  s+=1;
);

@serialize
file_mem(0,  outBus, noOfOuts);
file_mem(0, outChan, noOfOuts);
file_mem(0, minNote, noOfOuts);
file_mem(0, maxNote, noOfOuts);
file_mem(0,   trans, noOfOuts);
file_mem(0, bankMSB, noOfOuts);
file_mem(0, bankLSB, noOfOuts);
file_mem(0,    prog, noOfOuts);
file_mem(0,_bankMSB, noOfOuts);
file_mem(0,_bankLSB, noOfOuts);
file_mem(0,   _prog, noOfOuts);
file_mem(0,   inBus, noOfOuts);
file_mem(0,  inChan, noOfOuts);
file_mem(0,     row, noOfOuts);

@block
while (midirecv(offset,msg1,msg2,msg3)) (
  origBus    = midi_bus;
  noteStatus = msg1&$xF0;
  channel    = msg1&$x0F;
  thru ? midisend(offset,msg1,msg2,msg3);
  i = j = 0;
  loop(noOfOuts,
    (origBus == inBus[i]-1 || (inBus[i]==0 && (globBusIn-1==origBus || globBusIn==0)))
    && (channel == inChan[i]-1 || (inChan[i]==0 && (globChanIn-1==channel || globChanIn==0))) ? (
      midi_bus = outBus[i]-1;

      isNoteOn() && (noteRoute==1 || noteRoute==i+2) ? (
        input = 1;
        msg2>=minNote[i] && msg2<=maxNote[i] && outBus[i]-1 >= 0 ? (
          noteInfo[j+msg2] += 1;                             //Store note-on
      //   noteInfo[j+offsetNoteInBus  +msg2] = inBus  [i]-1; //Store note in Bus
      //   noteInfo[j+offsetNoteInChan +msg2] = inChan [i]-1; //Store note in Chan
          noteInfo[j+offsetNoteOutBus +msg2] = outBus [i]-1; //Store note out Bus
          noteInfo[j+offsetNoteOutChan+msg2] = outChan[i]-1; //Store note out Chan
          noteInfo[j+offsetTrans+msg2]    = trans  [i];   //Store note Trans
          note[i] = msg2 + trans[i];                      //Transpose note
          note[i]<0?note[i]=0:note[i]>127?note[i]=127;    //Constrain note
          midisend(offset,noteStatus+outChan[i]-1,note[i],msg3);
        );

      ):isNoteOff() ? (
        noteInfo[j+msg2]>0 ? (                          //Has note-on been stored?
          midi_bus = noteInfo[j+offsetNoteOutBus+msg2];      //Restore note bus
          note[i]  = msg2+noteInfo[j+offsetTrans+msg2];   //Restore note transpose
          note[i]<0?note[i]=0:note[i]>127?note[i]=127;    //Constrain note
          noteInfo[j+msg2] -= 1;                          //remove record of note-on
          midisend(offset,noteStatus+noteInfo[j+offsetNoteOutChan+msg2],note[i],msg3);
        );

      ):isSusPedal() ? ( input = 1;
        msg3 ? (                          //Sustain pedal depressed?
          susPedalBus[i]  = outBus[i]-1;     //Store Bus
          susPedalChan[i] = outChan[i]-1;    //Store Channel
          outBus[i]-1>=0 ? midisend(offset,noteStatus+susPedalChan[i],msg2,msg3);

        ):!msg3 && susPedalBus[i]>-1 ? (  //Sustain pedal raised?
          midi_bus = susPedalBus[i];        //Restore MIDI bus
          msg1 = noteStatus+susPedalChan[i];//Restore MIDI Chan
          midisend(offset,msg1,msg2,msg3);
        );

      ):isCC() && outBus[i]>0 ? ( input = 1;
        (ccRoute==i+2||(ccRoute==1 && (noteRoute==1 || noteRoute==i+2)) ? midisend(offset,noteStatus+outChan[i]-1,msg2,msg3););

      ):isPitchW() && outBus[i]>0 ? ( input = 1;
        (pwRoute==i+2||(pwRoute==1 && (noteRoute==1 || noteRoute==i+2)) ? midisend(offset,noteStatus+outChan[i]-1,msg2,msg3););
      );
    );
  i+=1;
  j+=$x400;
  );
);

i = 0;
loop (noOfOuts,
  midi_bus  = outBus[i]-1;
  bankMSB[i]!=_bankMSB[i] || bankLSB[i]!=_bankLSB[i] || prog[i]!=_prog[i] ? (
    _bankMSB[i] = bankMSB[i];
    _bankLSB[i] = bankLSB[i];
    _prog   [i] = prog   [i];
    outBus[i]-1>=0 && PCenable ? (
      midisend(0,statCC+outChan[i]-1,   0,bankMSB[i]);
      midisend(0,statCC+outChan[i]-1,  32,bankLSB[i]);
      midisend(0,statProgram+outChan[i]-1,prog[i]);
    );
  );
  i += 1;
);

////////////////////////////////////
//////////////////GFX///////////////
////////////////////////////////////
@gfx 570 320

function isOver(x,y,w,h) (
  mouse_x>=x && mouse_x<=x+w && mouse_y>=y && mouse_y<=y+h
);

function isOver2(_x, _y, x, y, w, h) (
  _x>=x && _x<=x+w && _y>=y && _y<=y+h
);

function button(name, x, y, w, h, clicked) (
  gfx_set(1); gfx_x=x; gfx_y=y-gfx_texth; gfx_drawstr(name);
  gfx_set(0.4);
  !mouse_cap ? allow=1;
  isOver(x,y,w,h) && !dragMode ? gfx_set(0.3,0.5,0.5);
  clicked ? gfx_set(0.4,0.8,0.8);
  allow && mouse_cap==1 && isOver(x,y,w,h) && !dragMode? (
    allow=0;
    !clicked?clicked=1:clicked?clicked =0;
  );
  gfx_rect(x,y,w,h);
  clicked;
);

function numSlide(label, zeroStr, oneStr, num, x, y, w, h, mini, maxi, numOffset, isNote) (

  gfx_set(0.6);

  isOver(x,y,w,h) ? hover = 1;

  mouse_cap == 0 ? dragMode = 0;

  dragMode && isOver2(_x,_y,x,y,w,h) ? (
    gfx_set(0.6,0.8,0.9);
    mouse_y!=_mouse_y ? (
      Mchng = _mouse_y-mouse_y;
      abs(Mchng) > 10 ? (
        num += floor((Mchng/10)+0.5);
        _mouse_y = mouse_y;
      );
    );

  ):isOver(x,y,w,h) && !dragMode ? (
    gfx_set(0.7);
    mouse_cap==1 ? (
      _mouse_y = mouse_y;
      _x = mouse_x;
      _y = mouse_y;
      dragMode = 1;
    ):
    _mouse_wheel != mouse_wheel ? (
    diff = (mouse_wheel-_mouse_wheel)/120;
    mouse_cap == 4 ? diff*=12;
    num += diff;
    _mouse_wheel = mouse_wheel = 0;
    );
  );

  gfx_x=x+5; gfx_y=y; gfx_rect(x,y,w,h);
  num<mini?num=mini:num>maxi?num=maxi;
  gfx_set(0,0,0);

  //Draw Value
  isNote?(
    gfx_drawstr(strcpy_substr(#,noteStr,(num*5),2));
    gfx_x = x;
    gfx_drawstr(strcpy_substr(#,noteStr,(num*5+2),2),2,x+w/1.1,y+h)
  ):num==0?gfx_drawstr(zeroStr,2,x+w/1.1,y+h)
   :num==1?gfx_drawstr(oneStr,2,x+w/1.1,y+h)
   :gfx_drawstr(sprintf(#,"%d",num+numOffset),2,x+w/1.1,y+h);
  //gfx_drawnumber(num+numOffset,0);

  //Draw label
  gfx_x=x; gfx_y=y-gfx_texth*1.2; gfx_set(1); drawLabel?gfx_drawstr(label);
  num;
);

function drawKeyboard(y,h) (
  gfx_set(0.9);
  gfx_rect(0,y,gfx_w,h);
  gfx_set(0.1);
  noOfNotes      = 128;
  allNoteWidth   = gfx_w/noOfNotes;
  whiteNoteWidth = gfx_w/(noOfNotes/1.714285714285714);
  g=0; loop(noOfNotes,
    x = g*whiteNoteWidth;
    gfx_line(x,y,x,y+h);
    b=g%7;
    b==1||b==2||b==4||b==5||b==6?
      gfx_rect(x-(gfx_w/noOfNotes)/2,y,gfx_w/(noOfNotes),h/1.5);
    g+=1;
  );

  //Draw RED keyzones
  g=f=0; loop(noOfOuts,
    outBus[g] && !(noteRoute!=1 && noteRoute-1!=row[g])?(
      f%3==0?gfx_set(1,0,0,0.3);
      f%3==1?gfx_set(0,1,0,0.3);
      f%3==2?gfx_set(0,0,1,0.3);
      x=minNote[g]*gfx_w/noOfNotes;
      w=((maxNote[g]-minNote[g])*allNoteWidth)+allNoteWidth;
      gfx_rect(x,y,w,h);
      f+=1
    );
    g+=1;
  );
);

/////////////////////
////START DRAWING////
/////////////////////
SIZE = min(gfx_w/35.1, gfx_h/19.6);
gfx_getchar();
gfx_setfont(1,"Tahoma Bold",SIZE);
gfx_set(0.16); gfx_rect(0,0,gfx_w,gfx_h);
gfx_set(0.1); gfx_rect(0,0,gfx_w,gfx_texth*3);

x=gfx_texth*2.5; y=gfx_texth*1.4; w=gfx_texth*2.4; h=gfx_texth; xgap=gfx_texth*3; xgaplus=30;
drawLabel = 1;

//Draw Input parameters at top
//noOfOuts   = numSlide(   "#",    "", "1", noOfOuts,  gfx_texth/2, y, gfx_texth*1.4, h, 0, 16 ,0,0); x+=xgap; //Enable for more rows
globBusIn  = numSlide( "Bus", "All", "1", globBusIn,  x, y, w, h, 0, 16 ,0,0); x+=xgap;
globChanIn = numSlide("Chan", "All", "1", globChanIn, x, y, w, h, 0, 16 ,0,0); x+=xgap;
input?l=0.5:l>0.3?(l-=0.01); gfx_set(0.3,l,l); gfx_rect(x,y+3,w/3,w/3); x+=xgap;//Input Monitor
w=gfx_texth*3; xgap=gfx_texth*5;
noteRoute = numSlide("Note to=", "None",  "All", noteRoute, x, y, w, h, 0, 9 ,-1,0); x+=xgap;
ccRoute   = numSlide("CC to=",   "None",  "<    ", ccRoute,   x, y, w, h, 0, 9 ,-1,0); x+=xgap;
pwRoute   = numSlide("PW to=",   "None",  "<    ", pwRoute,   x, y, w, h, 0, 9 ,-1,0); x+=xgap+xgaplus;
w=gfx_texth*2.5; xgap=gfx_texth*4;
thru      = button("THRU",x,y,w,h,thru); x+=xgap;
PCenable  = button("PC",x,y,w,h,PCenable);

drawKeyboard(gfx_texth*3, gfx_texth*1.5);

//Draw Section Labels
gfx_setfont(1,"Tahoma Bold",SIZE);
gfx_set(0.6);
gfx_y = gfx_texth*5;
gfx_x = gfx_texth*3.5;  gfx_drawstr("--- In ---");
gfx_x = gfx_texth*10; gfx_drawstr("--- Out ---");
gfx_x = gfx_texth*18.3; gfx_drawstr("--- Notes ---");
gfx_x = gfx_texth*26.5; gfx_drawstr("- Program Change -");
//gfx_setfont(1,"Tahoma Bold",SIZE);
//gfx_setfont(1,"Courier New Bold",SIZE);
hover = 0;

g=0; loop(noOfOuts,
  x=gfx_texth/2;
 // x+= gfx_texth*2;
  y = gfx_texth*7.4+g*gfx_texth*1.5;
  w = gfx_texth*1.4;
  h = gfx_texth;
  xgap = gfx_texth*3;
  xgaplus = gfx_texth;
 // g%2?(gfx_set(1,1,1,0.07);gfx_rect(0,y-3,gfx_w,gfx_texth*1.4)); //Banded rows
 // gfx_x=10; gfx_y=y; gfx_set(0.8); gfx_drawnumber(g+1,0); //Row numbers


  //Draw parameters
      row[g] = numSlide("=",  "  ",  "1",   row[g], x, y, w, h,  1,  16 ,0,0); x+=gfx_texth*2 ;
  w = gfx_texth*2.4;
    inBus[g] = numSlide("Bus",  "^  ",  "1",   inBus[g], x, y, w, h,  0,  16 ,0,0); x+= xgap;
   inChan[g] = numSlide("Chan", "^  ",  "1",  inChan[g], x, y, w, h,  0,  16 ,0,0); x+= xgap+xgaplus;
   outBus[g] = numSlide("Bus",  "OFF",  "1",  outBus[g], x, y, w, h,  0,  16 ,0,0); x+= xgap;
  outChan[g] = numSlide("Chan",   "0",  "1", outChan[g], x, y, w, h,  1,  16 ,0,0); x+= xgap+xgaplus;
  minNote[g] = numSlide( "Min",   "0",  "1", minNote[g], x, y, w+4, h,  0, 127 ,0,1); x+= xgap;
  maxNote[g] = numSlide( "Max",   "0",  "1", maxNote[g], x, y, w+4, h,  0, 127 ,0,1); x+= xgap;
    trans[g] = numSlide("Trans",  "0",  "1",   trans[g], x, y, w, h,-48,  48 ,0,0); x+= xgap+xgaplus;
  PCenable ? (
    bankMSB[g] = numSlide("MSB",  "0",  "1", bankMSB[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
    bankLSB[g] = numSlide("LSB",  "0",  "1", bankLSB[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
       prog[g] = numSlide("Prog", "0",  "1",    prog[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
  ):(numSlide("MSB",  "0",  "1", bankMSB[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
     numSlide("LSB",  "0",  "1", bankLSB[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
     numSlide("Prog", "0",  "1",    prog[g], x, y, w, h,  0, 127 ,0,0); x+= xgap;
  );

  drawLabel = 0;

  g < 4 ? (
    slider((g*10)+ 8) =   inBus[g];
    slider((g*10)+ 9) =  inChan[g];
    slider((g*10)+10) =  outBus[g];
    slider((g*10)+11) = outChan[g];
    slider((g*10)+12) = minNote[g];
    slider((g*10)+13) = maxNote[g];
    slider((g*10)+14) =   trans[g];
    slider((g*10)+15) = bankMSB[g];
    slider((g*10)+16) = bankLSB[g];
    slider((g*10)+17) =    prog[g];
  );

  //Draw '=' Greyout rectangles
  noteRoute!=1 && noteRoute-1!=row[g] ? (
    gfx_set(0.16,0.16,0.16,0.7);
    gfx_rect(gfx_texth*2.1,y-gfx_texth/4,gfx_texth*23,gfx_texth*1.5);

  );
  g+=1;
);

!hover ? _mouse_wheel = mouse_wheel = 0;
!PCenable?(gfx_set(0,0,0,0.5); gfx_rect(gfx_texth*26,gfx_texth*5,gfx_w,gfx_h)); //PC mask
input = 0;

//Bottom Right Decoration
gfx_set(1); gfx_x=gfx_w-36; gfx_y=gfx_h-14;
gfx_setfont(1,"Verdana",12); gfx_drawstr("TJA");
gfx_line(gfx_w, gfx_h-5 ,gfx_w-5 ,gfx_h);
gfx_line(gfx_w, gfx_h-10,gfx_w-10,gfx_h);
gfx_line(gfx_w, gfx_h-15,gfx_w-15,gfx_h);
gfx_set(1); gfx_roundrect(0,-1,gfx_w-1,gfx_h,0); //White Border