desc: MIDI every note the same
author: Will Develop
version: 2.0
link:
  Forum Thread https://forum.cockos.com/showthread.php?p=2297569#post2297569
  My Website https://willrecords.tk/

desc:MIDI every note the same by Will Develop 2.0
//tags: MIDI processing
//author: Will Deveolp
//github: https://github.com/Will-Develop/every_note_the_same
//Forum: https://forum.cockos.com/showthread.php?p=2297569#post2297569
//v.2.0

/*
  Parameters:
  - Root Note: This MIDI note will be sent to the instrument at the end.
  - Block Sustain Pedal: decides whether the sustain pedal has effect
*/


slider1:48<-0,127,1{0: C-1,1: C#-1,2: D-1,3: D#-1,4: E-1,5: F-1,6: F#-1,7: G-1,8: G#-1,9: A-1,10: Bb-1,11: B-1,12: C0,13: C#0,14: D0,15: D#0-1,16: E0,17: F0,18: F#0,19: G0,20: G#0,21: A0,22: Bb0,23: B0,24: C1,25: C#1,26: D1,27: D#1,28: E1,29: F1,30: F#1,31: G1,32: G#1,33: A1,34: Bb1,35: B1,36: C2,37: C#2,38: D2,39: D#2,40: E2,41: F2,42: F#2,43: G2,44: G#2,45: A2,46: Bb2,47: B2,48: C3,49: C#3,50: D3,51: D#3,52: E3,53: F3,54: F#3,55: G3,56: G#3,57: A3,58: Bb3,59: B3,60: C4,61: C#4,62: D4,63: D#4,64: E4,65: F4,66: F#4,67: G4,68: G#4,69: A4,70: Bb4,71: B4,72: C5,73: C#5,74: D5,75: D#5,76: E5,77: F5,78: F#5,79: G5,80: G#5,81: A5,82: Bb5,83: B5,84: C6,85: C#6,86: D6,87: D#6,88: E6,89: F6,90: F#6,91: G6,92: G#6,93: A6,94: Bb6,95: B6,96: C7,97: C#7,98: D7,99: D#7,100: E7,101: F7,102: F#7,103: G7,104: G#7,105: A7,106: Bb7,107: B7,108: C8,109: C#8,110: D8,111: D#8,112: E8,113: F8,114: F#8,115: G8,116: G#8,117: A8,118: Bb8,119: B8,120: C9,121: C#9,122: D9,123: D#9,124: E9,125: F9,126: F#9,127: G9}>Root Note
slider2:0<0,1,1{No,Yes}>Block Sustain Pedal

out_pin:none
out_pin:none

@init
note_count = 0; // this turns a while loop into a for loop

// all notes are set to 0 when loading the plugin (0 = key is not pressed, 1 = key is pressed)
while ( note_count < 127 ) (
  note_array[note_count] = 0;
  note_count = note_count + 1;
);


@slider
root_note = slider1; // This MIDI note will be sent to the instrument at the end.
block_sustain_pedal = slider2; // decides whether the sustain pedal has effect (0 = Sustain pedal has an effect, 1 = has no effect)

@block

block_note_off = 0; // determines when a note-off command may be sent and when not (0 = note-off command may be sent, 1 = a no note-off command may be sent)
while (midirecv(offset,msg1,msg2,msg3))
(
  msg1 == $x90? note_array[msg2] = 1; // depending on which note is pressed, the note is also set in the array as pressed (1 = Note is pressed)
  msg1 == $x80? note_array[msg2] = 0; // depending on which note is released again, the note is also set to not pressed again in the array (0 = not pressed)
  
  
  note_count2 = 0; // this turns a while loop into a for loop 
  
  // goes through the array and looks if a note was pressed
  while (note_count2 < 127 ) (
     note_array[note_count2] == 1?
     (
       block_note_off = 1;
     );
   
     note_count2 = note_count2 + 1;
   );

  
  // If Sustian Pedal pressed
  block_sustain_pedal == 0?  
  (
    msg1 == $xB0 && msg2 == 64 && sustain_pedal == 0?
     (
       sustain_pedal = 1;
     ):(
      msg1 == $xB0 && msg2 == 64 && sustain_pedal == 1?
       sustain_pedal = 0;
     );
  ):(
    sustain_pedal = 0;
  );
 
  
  // When the sustain pedal is released, a note-off command is also sent
  sustain_pedal == 0 && block_note_off == 0? midisend(offset,$x80,root_note,msg3);

  // This if loop decides whether a note-off command is sent
  sustain_pedal == 0 && msg1 == $x80 && block_note_off == 0?
  (
    midisend(offset,msg1,root_note,msg3);
  );
  
  // Allows all commands to pass that meet the conditions
  msg1 == $x90 || msg1 !== $x80?
  (
    midisend(offset,msg1,root_note,msg3);
  );
  
); // The end of the midi receive while-loop

@sample
