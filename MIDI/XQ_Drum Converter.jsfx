desc: Drum Converter
author: Xeewaj Q.
version: 1.1
changelog: Notes are displayed only for "note on" events.
link: Forum thread https://forum.cockos.com/showthread.php?p=2091997
about:
  # XQ Drum Converter

  This plugin is designed to convert MIDI drums from one map to
  another. Currently it converts from GM to Addictive Drums,
  BFD and Superior Drummer.

  ## Parameters

  Square brackets mean that this slider/droplist is read-only.

  - **Input Channel:** self-explanatory.

  - **[Input Note]:** displays last input note.

  - **From:** select a map to convert from.

  - **Orphan Notes:** how to process inconvertable notes.
    - Kill: default.
    - Remap: change to Flexi 1 for AD, Perc 1 for BFD and #0 for SD.

  - **To:** select a map to convert to.

  - **[Output Note]:** displays last converted note.

  - **Output Channel:** self-explanatory.

// XQ Drum Converter
// Author: Xeewaj Q.
// Version: R1A (Feb-08-2019)
// License: BSD-2-Clause
// Requires: REAPER 5.0+

slider1:sl_input_channel=0<0,16,1{Omni,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input Channel
slider2:sl_input_note=0<0,127,1{0 : C0,1 : C#0,2 : D0,3 : D#0,4 : E0,5 : F0,6 : F#0,7 : G0,8 : G#0,9 : A0,10 : A#0,11 : B0,12 : C1,13 : C#1,14 : D1,15 : D#1,16 : E1,17 : F1,18 : F#1,19 : G1,20 : G#1,21 : A1,22 : A#1,23 : B1,24 : C2,25 : C#2,26 : D2,27 : D#2,28 : E2,29 : F2,30 : F#2,31 : G2,32 : G#2,33 : A2,34 : A#2,35 : B2,36 : C3,37 : C#3,38 : D3,39 : D#3,40 : E3,41 : F3,42 : F#3,43 : G3,44 : G#3,45 : A3,46 : A#3,47 : B3,48 : C4,49 : C#4,50 : D4,51 : D#4,52 : E4,53 : F4,54 : F#4,55 : G4,56 : G#4,57 : A4,58 : A#4,59 : B4,60 : C5,61 : C#5,62 : D5,63 : D#5,64 : E5,65 : F5,66 : F#5,67 : G5,68 : G#5,69 : A5,70 : A#5,71 : B5,72 : C6,73 : C#6,74 : D6,75 : D#6,76 : E6,77 : F6,78 : F#6,79 : G6,80 : G#6,81 : A6,82 : A#6,83 : B6,84 : C7,85 : C#7,86 : D7,87 : D#7,88 : E7,89 : F7,90 : F#7,91 : G7,92 : G#7,93 : A7,94 : A#7,95 : B7,96 : C8,97 : C#8,98 : D8,99 : D#8,100 : E8,101 : F8,102 : F#8,103 : G8,104 : G#8,105 : A8,106 : A#8,107 : B8,108 : C9,109 : C#9,110 : D9,111 : D#9,112 : E9,113 : F9,114 : F#9,115 : G9,116 : G#9,117 : A9,118 : A#9,119 : B9,120 : C10,121 : C#10,122 : D10,123 : D#10,124 : E10,125 : F10,126 : F#10,127 : G10}>[Input Note]
slider3:sl_in_map=0<0,0,1{General MIDI}>From
slider4:sl_orphans=0<0,1,1{Kill,Remap}>Orphan Notes
slider5:sl_out_map=0<0,2,1{Addictive Drums,BFD,Superior Drummer}>To
slider6:sl_output_note=0<0,127,1{0 : C0,1 : C#0,2 : D0,3 : D#0,4 : E0,5 : F0,6 : F#0,7 : G0,8 : G#0,9 : A0,10 : A#0,11 : B0,12 : C1,13 : C#1,14 : D1,15 : D#1,16 : E1,17 : F1,18 : F#1,19 : G1,20 : G#1,21 : A1,22 : A#1,23 : B1,24 : C2,25 : C#2,26 : D2,27 : D#2,28 : E2,29 : F2,30 : F#2,31 : G2,32 : G#2,33 : A2,34 : A#2,35 : B2,36 : C3,37 : C#3,38 : D3,39 : D#3,40 : E3,41 : F3,42 : F#3,43 : G3,44 : G#3,45 : A3,46 : A#3,47 : B3,48 : C4,49 : C#4,50 : D4,51 : D#4,52 : E4,53 : F4,54 : F#4,55 : G4,56 : G#4,57 : A4,58 : A#4,59 : B4,60 : C5,61 : C#5,62 : D5,63 : D#5,64 : E5,65 : F5,66 : F#5,67 : G5,68 : G#5,69 : A5,70 : A#5,71 : B5,72 : C6,73 : C#6,74 : D6,75 : D#6,76 : E6,77 : F6,78 : F#6,79 : G6,80 : G#6,81 : A6,82 : A#6,83 : B6,84 : C7,85 : C#7,86 : D7,87 : D#7,88 : E7,89 : F7,90 : F#7,91 : G7,92 : G#7,93 : A7,94 : A#7,95 : B7,96 : C8,97 : C#8,98 : D8,99 : D#8,100 : E8,101 : F8,102 : F#8,103 : G8,104 : G#8,105 : A8,106 : A#8,107 : B8,108 : C9,109 : C#9,110 : D9,111 : D#9,112 : E9,113 : F9,114 : F#9,115 : G9,116 : G#9,117 : A9,118 : A#9,119 : B9,120 : C10,121 : C#10,122 : D10,123 : D#10,124 : E10,125 : F10,126 : F#10,127 : G10}>[Output Note]
slider7:sl_output_channel=0<0,16,1{As Is,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Output Channel

in_pin:none
out_pin:none

@init

TYPE_MASK=0xF0;
CHANNEL_MASK=0x0F;
OMNI=0x00;
NOTE_ON=0x90;
NOTE_OFF=0x80;
IN_GM=0x00;
ORPHAN_KILL=0x00;
ORPHAN_REMAP=0x01;
OUT_AD=0x00;
OUT_BFD=0x01;
OUT_SD=0x02;
GM_ACOUSTIC_BASS_DRUM=35;
GM_BASS_DRUM_1=36;
GM_SIDE_STICK=37;
GM_ACOUSTIC_SNARE=38;
GM_ELECTRIC_SNARE=40;
GM_LOW_FLOOR_TOM=41;
GM_CLOSED_HI_HAT=42;
GM_HIGH_FLOOR_TOM=43;
GM_PEDAL_HI_HAT=44;
GM_LOW_TOM=45;
GM_OPEN_HI_HAT=46;
GM_LOW_MID_TOM=47;
GM_HI_MID_TOM=48;
GM_CRASH_CYMBAL_1=49;
GM_HIGH_TOM=50;
GM_RIDE_CYMBAL_1=51;
GM_CHINESE_CYMBAL=52;
GM_RIDE_BELL=53;
GM_SPLASH_CYMBAL=55;
GM_CRASH_CYMBAL_2=57;
GM_RIDE_CYMBAL_2=59;

@block

function gm_drum_note(n)
    local(r)
(
    n>=35 && n<=81 ? (
        r=1;
    ) : (
        r=0;
    );
    r;
);

function gm_to_ad(n)
    local(r)
(
    r=-1;
    n==GM_ACOUSTIC_BASS_DRUM ? r=36 :
    n==GM_BASS_DRUM_1 ? r=36 :
    n==GM_SIDE_STICK ? r=42 :
    n==GM_ACOUSTIC_SNARE ? r=38 :
    n==GM_ELECTRIC_SNARE ? r=38 :
    n==GM_CLOSED_HI_HAT ? r=49 :
    n==GM_PEDAL_HI_HAT ? r=59 :
    n==GM_OPEN_HI_HAT ? r=54 :
    n==GM_LOW_FLOOR_TOM ? r=65 :
    n==GM_HIGH_FLOOR_TOM ? r=65 :
    n==GM_LOW_TOM ? r=67 :
    n==GM_LOW_MID_TOM ? r=69 :
    n==GM_HI_MID_TOM ? r=71 :
    n==GM_HIGH_TOM ? r=71 :
    n==GM_RIDE_CYMBAL_1 ? r=60 :
    n==GM_RIDE_BELL ? r=61 :
    n==GM_RIDE_CYMBAL_2 ? r=84 :
    n==GM_CRASH_CYMBAL_1 ? r=77 :
    n==GM_CRASH_CYMBAL_2 ? r=79 :
    n==GM_CHINESE_CYMBAL ? r=89 :
    n==GM_SPLASH_CYMBAL ? r=91 :
    sl_orphans==ORPHAN_REMAP ? r=47 : r=-1;
    r;
);

function gm_to_bfd(n)
    local(r)
(
    r=-1;
    n==GM_ACOUSTIC_BASS_DRUM ? r=24 :
    n==GM_BASS_DRUM_1 ? r=24 :
    n==GM_SIDE_STICK ? r=25 :
    n==GM_ACOUSTIC_SNARE ? r=26 :
    n==GM_ELECTRIC_SNARE ? r=26 :
    n==GM_CLOSED_HI_HAT ? r=30 :
    n==GM_PEDAL_HI_HAT ? r=32 :
    n==GM_OPEN_HI_HAT ? r=34 :
    n==GM_LOW_FLOOR_TOM ? r=31 :
    n==GM_HIGH_FLOOR_TOM ? r=33 :
    n==GM_LOW_TOM ? r=35 :
    n==GM_LOW_MID_TOM ? r=36 :
    n==GM_HI_MID_TOM ? r=38 :
    n==GM_HIGH_TOM ? r=40 :
    n==GM_RIDE_CYMBAL_1 ? r=81 :
    n==GM_RIDE_BELL ? r=71 :
    n==GM_RIDE_CYMBAL_2 ? r=50 :
    n==GM_CRASH_CYMBAL_1 ? r=72 :
    n==GM_CRASH_CYMBAL_2 ? r=74 :
    n==GM_CHINESE_CYMBAL ? r=76 :
    n==GM_SPLASH_CYMBAL ? r=77 :
    sl_orphans==ORPHAN_REMAP ? r=83 : r=-1;
    r;
);

function gm_to_sd(n)
    local(r)
(
    r=-1;
    n==GM_ACOUSTIC_BASS_DRUM ? r=36 :
    n==GM_BASS_DRUM_1 ? r=36 :
    n==GM_SIDE_STICK ? r=37 :
    n==GM_ACOUSTIC_SNARE ? r=38 :
    n==GM_ELECTRIC_SNARE ? r=38 :
    n==GM_CLOSED_HI_HAT ? r=42 :
    n==GM_PEDAL_HI_HAT ? r=44 :
    n==GM_OPEN_HI_HAT ? r=46 :
    n==GM_LOW_FLOOR_TOM ? r=41 :
    n==GM_HIGH_FLOOR_TOM ? r=43 :
    n==GM_LOW_TOM ? r=45 :
    n==GM_LOW_MID_TOM ? r=47 :
    n==GM_HI_MID_TOM ? r=48 :
    n==GM_HIGH_TOM ? r=48 :
    n==GM_RIDE_CYMBAL_1 ? r=51 :
    n==GM_RIDE_BELL ? r=53 :
    n==GM_RIDE_CYMBAL_2 ? r=59 :
    n==GM_CRASH_CYMBAL_1 ? r=27 :
    n==GM_CRASH_CYMBAL_2 ? r=49 :
    n==GM_CHINESE_CYMBAL ? r=55 :
    n==GM_SPLASH_CYMBAL ? r=57 :
    sl_orphans==ORPHAN_REMAP ? r=0 : r=-1;
    r;
);

function convert(n)
    local(r)
(
    gm_drum_note(n) ? (
        sl_out_map==OUT_AD ? r=gm_to_ad(n);
        sl_out_map==OUT_BFD ? r=gm_to_bfd(n);
        sl_out_map==OUT_SD ? r=gm_to_ad(n);
    ) : r=-1;
    r;
);

while (midirecv(offset,msg1,msg2,msg3)) (
    type=msg1&TYPE_MASK;
    channel=msg1&CHANNEL_MASK;
    note=msg2;
    velocity=msg3;
    sl_input_channel==OMNI || (channel==(sl_input_channel-1)) ? (    
        type==NOTE_ON ? sl_input_note=note;
        note=convert(note);
        note!=-1 ? (
            sl_output_channel>0 ? channel=sl_output_channel-1;
            midisend(offset,type+channel,note,velocity);
            type==NOTE_ON ? sl_output_note=note;
        );
    ) : (
        midisend(offset,msg1,msg2,msg3);
    );
);
