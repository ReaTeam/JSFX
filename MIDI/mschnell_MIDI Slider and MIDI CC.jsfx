desc: Slider and MIDI CC
author: Michael Schnell (mschnell@bschnell.de)
version: 1.4
changelog: bugfix
about:
  ## Description

  One or both of the following functions can be selected: 

  - Sends a CC or Pitchbend message according to the channel and CC # setting whenever the value slider (Slider 1) is modified manually or by automation

  - moves the slider according to the the value of an appropriate MIDI CC or Pitchbend message received. The Slider value can be written in an automation lane. 

  Slider 1 can be used to read or write track envelopes. 

  "Resolution" selects normal or high resolution CC messages as well for receiving as for sending. The low significant CC# is 32 steps higher than the normal (most significant) CC#.


slider1:0<0,1,0.0001>Value 0..1
slider2:1<0,127,1>Value MSB
slider3:1<0,127,1>Value LSB
slider4:0<0,16,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Channel
slider5:1<0,128,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,Pitchbend}>CC # or Pitchbend
slider6:0<0,2,1{Slider to CC,CC to Slider,both})>Direction
slider7:0<0,1,1{low,high})>Resolution

@init
function calc () (
  (oldh != slider2) || (oldl != slider3) ? (
    oldh    = slider2;
    oldl    = slider3;
    hr ? ( 
      old   = 128 * oldh + oldl;
      old   = old / factor;
     ) : (  
      old   = oldh / factor;
    );  
    slider1 = old ;
  );  
  old != slider1 ? (
    oldh    = slider1 * factor;
    oldh    = oldh | 0;
    hr ? (
      oldl  = oldh;
      oldh  = oldh / 128;
      oldh  = oldh | 0;
      oldl  = oldl - oldh * 128;
      old   = 128 * oldh + oldl;
      old   = old / factor;
     ) : ( 
      old     = oldh / factor;
      oldl    = 0;
    );  
    slider1 = old;
    slider2 = oldh;
    slider3 = oldl;
  );  
);


  ch     = 0xB0;
  pb     = 0xE0;
  cch    = 0;
  ccl    = 0;
  cchold = -1;
  cclold = -1;
  factor = 127;
  hr     = -1;
  old    = -1;
  oldl   = -1;
  oldh   = -1;
 
@slider

  ccnr        = slider5;
  channel     = (ccnr == 128 ? pb : ch) + slider4;
  cch         = slider2|0;
  ccl         = slider3|0;
  direction   = slider6+1;
  hhr         = ccnr == 128 ? 1 : slider7;
  hr != slider7 ? (
    hr        = hhr;
    slider7   = hr;
    hr ? (
      factor  = 128*128-1 
     ) : (
      factor  = 127;
    );
    old = oldl = oldh = 0;
  );  
  !hr ? (
    slider3 = 0;
    oldl   = 0;
  );
  calc(); 
   

@block
 direction & 1 ? (
   ccnr != 128 ? ( 
     hr ? (
       ccl != cclold ? (
         midisend(0, channel, ccnr+0x20, ccl);
         cclold = ccl;
       );  
     );  
     cch != cchold ? (
       midisend(0, channel, ccnr, cch);
       cchold = cch;
     );  
    ) : ( 
     (ccl != cclold) || (cch != cchold) ? (
       midisend(0, channel, ccl, cch);
       cclold = ccl;
       cchold = cch;
     );  
   );  
 );
 direction & 2 ? (
   while (midirecv(offset, msg1, msg2, msg3)) (
     m = 0;
     channel == msg1 ? (
       ccnr != 128 ? (
         msg2 == ccnr ? (              // Is it the MSB CC?
           slider2 = msg3;
           oldh    = msg3;
           m = 1;
         );  
         msg2 == ccnr + 0x20 ? (       // Is it the LSB CC?
           slider3 = msg3;
           oldl    = msg3;
           m = 1;
         );  
        ) : (                          // pitch bend
         slider2 = msg2;
         oldl = msg2;
         slider3 = msg3;
         oldh = msg3;
         m = 1;
       ); 
       m ? (
         hr ? (
           old = (oldh * 128 + oldl) / factor;
          ) : ( 
           old = oldh / factor;
           slider3 = 0;
         );  
         slider1 = old;
         slider_automate(slider1);
       );
     );
     midisend(0, msg1, msg2, msg3);  // pass throug everything
   );        
 );

