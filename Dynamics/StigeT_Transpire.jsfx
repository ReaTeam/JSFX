desc: Transpire
author: Stige T.
version: 1.0
changelog: Initial release
link: http://jsplugins.supermaailma.net/
about:
	Transpire is a classic transient tampering device for percussive material. I wanted to make one that would not sound too distorted.
	Attack & sustain enhancing or dampening

/**************************
         Transpire
Copyright (C) 2015 Stige T.
**************************/


slider1:0<-10,10,0.1>-Attack
slider2:0<-10,10,0.1>-Sustain

slider10:0<-12,12,1>-Output

@init

!"#define VAL(A) (A)" "//";

buildStr = "Build 20160626";

pdc_delay = 128;
pdc_bot_ch = 0; pdc_top_ch = 2;

t01 = exp(-1/(srate*0.001));
t02 = exp(-1/(srate*0.002));
t05 = exp(-1/(srate*0.005));
t10 = exp(-1/(srate*0.01));
t20 = exp(-1/(srate*0.02));
t30 = exp(-1/(srate*0.03));
t50 = exp(-1/(srate*0.05));
t100 = exp(-1/(srate*0.1));
t200 = exp(-1/(srate*0.2));
t300 = exp(-1/(srate*0.3));
t500 = exp(-1/(srate*0.5));
t1000 = exp(-1/(srate*1));

function delay_init(samples,index)
instance (len,sloop,splay)
(
  len = samples > srate ? srate : samples;
  sloop = splay = srate * index;
);

function delay(input)
instance(sindex,splay,sloop,len)
(
  sloop[sindex] = input;
  sindex += 1;
  sindex > len ? sindex = 0;
  splay[sindex];
);

function follower(input,att,rel,env_inertia)
instance (env,tmp) (
  tmp = input >= tmp ? input : input + env_inertia * (tmp-input);
  (tmp > env) ? (
      env = att * (env - tmp) + tmp;
  ) : (
      env = rel * (env - tmp) + tmp;
  );
);

function transu(inL,inR)
instance(sgn,d,f)
(
  sgn.in = max(abs(inL),abs(inR));  
  sgn.in = sgn.in^0.5 * 2;
  
  sgn.c = sgn.e0.follower(sgn.in,0,t50,t100);
  
  attack ? (
    sgn.at = ( sgn.c - sgn.e1.follower(sgn.c,t05,0,0) );
    sgn.at = sgn.e2.follower(sgn.at,t01,0,t05);    
    sgn.at = 1/(sgn.at+1);
    sgn.at = 1-(sgn.at^attack);
  );
  
  sustain ? (
    sgn.su = ( sgn.e3.follower(sgn.in,0,t1000,t10) - sgn.c );
    sgn.su = sgn.e4.follower(sgn.su,t100,t01,0);
    sgn.su = 1/(sgn.su+1);
    sgn.su = 1-(sgn.su^sustain);
  );
  
  inL = d.d0.delay(inL);
  inR = d.d1.delay(inR);  
  
  adir > 0 ? (
    inL = (inL * sgn.at) + inL;
    inR = (inR * sgn.at) + inR;
  );
  adir < 0 ? (
    inL = inL * (1-sgn.at);
    inR = inR * (1-sgn.at);
  );
  
  sdir > 0 ? (
    sgn.su *= 2.16;
    inL = (inL * (1+sgn.su));
    inR = (inR * (1+sgn.su));
  );
  sdir < 0 ? (
    inL = (inL * (1-sgn.su));
    inR = (inR * (1-sgn.su));
  );
  
  spl0 = inL;
  spl1 = inR;

);

function process_slider() (
  attack = abs(slider1/10);
  attack = attack^2 * 20;
  adir = sign(slider1);
  
  sustain = abs(slider2/10);
  sustain = sustain^2 * 5;
  sdir = sign(slider2);
  
  output = 10^(slider10/20);
);

transu.d.d0.delay_init(128,0);
transu.d.d1.delay_init(128,1);

@slider

s1.value = slider1;
s2.value = slider2;
s10.value = slider10;

process_slider();

@block

amax = max(amax,transu.sgn.at);
smax = max(smax,transu.sgn.su);

adir == 1 ? att = (amax);
adir == -1 ? att = (-amax);
!adir ? att = 0;

sdir == 1 ? sus = (1+smax-1);
sdir == -1 ? sus = (1-smax-1);
!sdir ? sus = 0;

mtr = (att + sus)+1;

@sample

inL = spl0;
inR = spl1;

transu(inL,inR);

spl0 *= output;
spl1 *= output;

//spl8 = transu.sgn.su;
//spl9 = inL;

@gfx 420 230

function dynmeter(in,x_pos,y_pos)
instance(redux,col1,col2,in_gfx)
(
  gfx_r = 0.3; gfx_g = 0.3; gfx_b = 0.3; gfx_a = 1;
  gfx_rect(x_pos,y_pos,200,10);
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
  gfx_rect(x_pos+1,y_pos+1,198,8);
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  
  gfx_x = 101+x_pos; gfx_y = y_pos+2;
  in = max(in,0.316);
  in = min(in,3.16);
  gfx_r = 0; gfx_g = 0.9; gfx_b = 0.9; gfx_a = 0.75;
  in_gfx = ceil(100 - log(1/in)*43.3*2);
  gfx_rectto( in_gfx + x_pos, 8 + y_pos);
    
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  gfx_rect(100+x_pos,y_pos+1,1,8);
);

function labels(x_pos,y_pos)
(
    gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
    gfx_x = 199+x_pos; gfx_y = y_pos;gfx_drawnumber(10,0);
    gfx_x = 161+x_pos; gfx_y = y_pos;gfx_drawnumber(6,0);
    gfx_x = 130+x_pos; gfx_y = y_pos;gfx_drawnumber(3,0);
    gfx_x = 100+x_pos; gfx_y = y_pos;gfx_drawnumber(0,0);
    gfx_x = 69+x_pos; gfx_y = y_pos;gfx_drawnumber(-3,0);
    gfx_x = 38+x_pos; gfx_y = y_pos;gfx_drawnumber(-6,0);
    gfx_x = 0+x_pos; gfx_y = y_pos;gfx_drawnumber(-10,0);
);

function grid(x_pos,y_pos,len)
(
    gfx_r = 0.3; gfx_g = 0.3; gfx_b = 0.3; gfx_a = 1;
    gfx_x = 199+x_pos; gfx_y = y_pos;gfx_lineto(199+x_pos,len+y_pos,0);
    gfx_x = 161+x_pos; gfx_y = y_pos;gfx_lineto(161+x_pos,len+y_pos,0);
    gfx_x = 130+x_pos; gfx_y = y_pos;gfx_lineto(130+x_pos,len+y_pos,0);
    gfx_x = 100+x_pos; gfx_y = y_pos;gfx_lineto(100+x_pos,len+y_pos,0);
    gfx_x = 69+x_pos; gfx_y = y_pos;gfx_lineto(69+x_pos,len+y_pos,0);
    gfx_x = 38+x_pos; gfx_y = y_pos;gfx_lineto(38+x_pos,len+y_pos,0);
    gfx_x = 0+x_pos; gfx_y = y_pos;gfx_lineto(0+x_pos,len+y_pos,0);
);

function draw_hslider(x,y,w,h,f,t,s,d,unit,title)
(
  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,w,h);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,w-2,h-2);
  
  // Knob parameters
  this.knob.w = 10;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 10 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(x+1+this.knob.pos,y+2,this.knob.w,h-4);
  gfx_r = gfx_g = gfx_b = 0.2;  
  gfx_rect(x+this.knob.hw+this.knob.pos,y+3,1,h-6);
  gfx_r = gfx_g = gfx_b = 0.8;  
  gfx_rect(x+this.knob.hw+1+this.knob.pos,y+3,1,h-6); 

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

gfx_r = gfx_g = gfx_b = 0.1;
gfx_rect(0,0,430,230);

gfx_setfont(1,"Arial",24,'b');
gfx_r = gfx_g = gfx_b = 1;
gfx_x = 10; gfx_y = 10;
gfx_drawstr("Transpire");
gfx_setfont(1,"Arial",12,'b');
gfx_x = 10; gfx_y = 29;
gfx_drawstr("Transient Processor");

gfx_setfont(1,"Arial",16);

align_x = 115;
align_y = 50;

slider1 = s1.draw_hslider(align_x,20+align_y,200,20,-10,10,0.25,0,"","Attack");
slider2 = s2.draw_hslider(align_x,50+align_y,200,20,-10,10,0.25,0,"","Sustain");
slider10 = s10.draw_hslider(align_x,80+align_y,200,20,-12,12,0.1,0,"dB","Output");

_sliderDirty ? (
  process_slider();
  _sliderDirty = 0;
);

gfx_setfont(1,"Arial",12);
dynmeter(mtr,align_x,180);
grid(align_x,190,3);
labels(align_x,195);
amax = max(amax - 0.1,0);
smax = 0;

gfx_x = 10; gfx_y = 210;
gfx_r = gfx_g = gfx_b = 1; gfx_a = 0.33;
gfx_setfont(1,"Arial",12);
gfx_drawstr(buildStr);
