desc: VOLA
author: Stige T.
version: 1.0
changelog: Initial release
link: http://jsplugins.supermaailma.net/
about:
	VOLA - Voice Optimized Leveling Amplifier, as the name suggests, was originally made for broadcast voice dynamics processing. But it works well with all kinds of material, like drums and synth pads. VOLA aims to sound clean and transparent, but can be used for extreme compression effects as well.
	Upwards & downwards compression, each separately adjustable.
	Very soft knee compression gradually turning to limiting at "Push Down" point.
	Handles broad dynamic range easily.
	Recovery time tunes the program dependent reaction speed. Longer (negative) recovery time helps keeping the noise down in program material while using upwards compression.
	Various attack presets for different processing styles.
	Visual gain reduction/increase metering displays changes over time.
	Statistics display.

//desc:VOLA [Build 151113]

slider5:0<-30,0,1>-Push Down [dB]
slider6:0<0,30,1>-Pull Up [dB]
slider7:-5<-10,0,1>-Recovery
slider8:0<-20,20,1>-Output [dB]
slider3:0<0,5,1{Off,20Hz,40Hz,80Hz,100Hz}>-LF Filter
slider4:0<0,10,1{Zero,500us,1ms,5ms,10ms,20ms,50ms,100ms,200ms,500ms,1sec}>-Attack Mode

slider10:1<0.1,1,0.01>-[Display Speed]

in_pin:IN1
in_pin:IN2
in_pin:IN SC1
in_pin:IN SC2
out_pin:OUT1
out_pin:OUT2

@init

!"#define VAL(A) (A)" "//";

p_tmp = p_tmp2 = 0;
t20 = exp(-1/(srate*0.02));
t200 = exp(-1/(srate*0.2));
rmm = (44100/srate) * 0.0003;

// GFX Init
mtr_x = 15;
mtr_y = 260;
y_mem = y_mem2 = 360;
rmss = 10000;
x_pos = mtr_x + 90;
y_pos = mtr_y + 190;
gr_pos_x = mtr_x + 10;
gr_pos_y = mtr_y + 10;

loopsize = 360;
memset(gfxmem,100,loopsize+1);
// GFX Init End

function follower(input,att,rel)
instance (env,tmp) (
  tmp = input;
  (tmp > env) ? (
      env = att * (env - tmp) + tmp;
  ) : (
      env = rel * (env - tmp) + tmp;
  );
);

function filterHP(input)
instance(output,c,a1,a2,a3,b1,b2,mX1,mX2,mY1,mY2)
(
  output = a1 * input + a2 * mX1 + a3 * mX2 - b1*mY1 - b2*mY2;
  mX2 = mX1;
  mX1 = input;
  mY2 = mY1;
  mY1 = output;
);

function filterHP_init(f, r)
instance(c,a1,a2,a3,b1,b2)
(
  c = tan($pi * f / srate);
  a1 = 1.0 / ( 1.0 + r * c + c * c);
  a2 = -2*a1;
  a3 = a1;
  b1 = 2.0 * ( c*c - 1.0) * a1;
  b2 = ( 1.0 - r * c + c * c) * a1;
  tmp = f+r;
);

maxbcount = 32;
function blocksniffer(inL,inR) (
  (this.mspl < maxbcount) ? (
    inL == inR ? (this.mspl += 1;) : (this.mspl = 0; sniffer.isMono = 0;);
  ) : (
   sniffer.isMono = 1;
   this.mspl = 0;
  );
);

function process_slider() (
  p_tmp = p_tmp2 = 0;
  
  mlim = 10^(slider5/20);
  mgain = 10^((-slider6+slider5)/20);
  
  slider7 == -10 ? recovery = 100;
  slider7 == -9 ? recovery = 10;
  slider7 == -8 ? recovery = 5;
  slider7 == -7 ? recovery = 1;
  slider7 == -6 ? recovery = 0.5;
  slider7 == -5 ? recovery = 0.25;
  slider7 == -4 ? recovery = 0.15;
  slider7 == -3 ? recovery = 0.1;
  slider7 == -2 ? recovery = 0.08;
  slider7 == -1 ? recovery = 0.06;
  slider7 == 0 ? recovery = 0.03;
  gr = exp(-1/(srate*recovery));
  rel_mod2 = recovery == 100 ? 0.00003 : 0;
  
  output = 10^(slider8/20);
  
  ss = slider3;
  ss == 1 ? (ssf = 20; ssr = 1.42;);
  ss == 2 ? (ssf = 40; ssr = 1.42;);
  ss == 3 ? (ssf = 80; ssr = 1.75;);
  ss == 4 ? (ssf = 100; ssr = 2;);
  
  flt0.filterHP_init(ssf, ssr);
  flt1.filterHP_init(ssf, ssr);
  
  slider4 == 0 ? inertia = 0;
  slider4 == 1 ? inertia = 0.0005;  
  slider4 == 2 ? inertia = 0.001;
  slider4 == 3 ? inertia = 0.005;
  slider4 == 4 ? inertia = 0.01;
  slider4 == 5 ? inertia = 0.02;
  slider4 == 6 ? inertia = 0.05;
  slider4 == 7 ? inertia = 0.1;
  slider4 == 8 ? inertia = 0.2;
  slider4 == 9 ? inertia = 0.5;
  slider4 == 10 ? inertia = 1;
  ga = exp(-1/(srate*inertia));
  
  mtrspeed = slider10;
  speedcmp = (1/(mtrspeed))^0.5;
);

@slider

s3.value = slider3;
s4.value = slider4;
s5.value = slider5;
s6.value = slider6;
s7.value = slider7;
s8.value = slider8;
s10.value = slider10;

process_slider();

@gfx 425 570

function draw_hslider(x,y,w,h,f,t,s,d,unit,title)
(
  
  // Change detecion
  this.value.temp != this.value ? (
    _sliderDirty = 1;
    this.value.temp = this.value;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,w,h);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,w-2,h-2);
  
  // Knob parameters
  this.knob.w = 10;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 10 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(x+1+this.knob.pos,y+2,this.knob.w,h-4);
  gfx_r = gfx_g = gfx_b = 0.2;  
  gfx_rect(x+this.knob.hw+this.knob.pos,y+3,1,h-6);
  gfx_r = gfx_g = gfx_b = 0.8;  
  gfx_rect(x+this.knob.hw+1+this.knob.pos,y+3,1,h-6); 

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

function draw_hselector(x,y,w,h,f,t,s,d,title)
(
  
  // Change detecion
  this.value.temp != this.value ? (
    _sliderDirty = 1;
    this.value.temp = this.value;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,w,h);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,w-2,h-2);
  
  // Knob parameters
  this.knob.w = 10;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t) + 0;
  
  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? this.canChange = 0;
  
  // Process
  this.canChange ? (
    this.knob.input = (mouse_x - x - this.knob.w - this.knob.hw);
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(x+1+this.knob.pos,y+2,this.knob.w,h-4);
  gfx_r = gfx_g = gfx_b = 0.2;  
  gfx_rect(x+this.knob.hw+this.knob.pos,y+3,1,h-6);
  gfx_r = gfx_g = gfx_b = 0.8;  
  gfx_rect(x+this.knob.hw+1+this.knob.pos,y+3,1,h-6);

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1); 
  
  this.value;
);

function draw_chkbox(x,y,s,title)
(

  // Change detecion
  this.checked.temp != this.checked ? (
    _sliderDirty = 1;
    this.checked.temp = this.checked;
  );

  gfx_r = gfx_g = gfx_b = 0.7;
  gfx_measurestr(title,this.str.w,this.str.h);
  gfx_x = x - this.str.w - 5; gfx_y = y + (s * 0.5) - (this.str.h * 0.5);
  gfx_drawstr(title);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+s && mouse_y >= y && mouse_y <= y+s && mouse_cap ? (
    !this.checked && this.canCheck ? (
      this.checked = 1;
      this.canCheck = 0;
    ) : (
      this.canCheck ? (
        this.checked = 0;
        this.canCheck = 0;
      );
    );
  ) : (
    this.canCheck = 1
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,s,s);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,s-2,s-2);
  
  // Checked
  this.checked ? (
    gfx_r = 0.1; gfx_g = 0.75; gfx_b = 1;
    gfx_rect(x+2,y+2,s-4,s-4);
  );
    
  this.checked; 
);

gfx_r = 0.1; gfx_g = 0.12; gfx_b = 0.1;

gfx_rect(0,0,425,570);

gfx_r = 1; gfx_g = 1; gfx_b = 1;
gfx_setfont(1,"Arial",24,'b');
gfx_x = 10; gfx_y = 20;
gfx_drawstr("VOLA");
gfx_setfont(1,"Arial",12,'b');
gfx_x = 10; gfx_y = 10;
gfx_drawstr("Leveling Amplifier");

// sliders

gfx_setfont(1,"Arial",14,'b');

slider3 = s3.draw_hselector(115,50,200,20,0,4,1,0,"LF Filter");
gfx_x = 320;
slider3 == 0 ? gfx_drawstr("Off");
slider3 == 1 ? gfx_drawstr("20 Hz");
slider3 == 2 ? gfx_drawstr("40 Hz");
slider3 == 3 ? gfx_drawstr("80 Hz");
slider3 == 4 ? gfx_drawstr("100 Hz");

slider4 = s4.draw_hselector(115,80,200,20,0,10,1,0,"Attack Mode");
gfx_x = 320;
slider4 == 0 ? gfx_drawstr("Zero");
slider4 == 1 ? gfx_drawstr("500us");
slider4 == 2 ? gfx_drawstr("1 ms");
slider4 == 3 ? gfx_drawstr("5 ms");
slider4 == 4 ? gfx_drawstr("10 ms");
slider4 == 5 ? gfx_drawstr("20 ms");
slider4 == 6 ? gfx_drawstr("50 ms");
slider4 == 7 ? gfx_drawstr("100 ms");
slider4 == 8 ? gfx_drawstr("200 ms");
slider4 == 9 ? gfx_drawstr("500 ms");
slider4 == 10 ? gfx_drawstr("1 s");

slider5 = s5.draw_hslider(115,110,200,20,-30,0,1,0,"dB","Push Down");
slider6 = s6.draw_hslider(115,140,200,20,0,30,1,0,"dB","Pull Up");
slider7 = s7.draw_hslider(115,170,200,20,-10,0,1,-5,"","Recovery");
slider8 = s8.draw_hslider(115,200,200,20,-20,20,1,0,"dB","Output");

slider10 = s10.draw_hslider(192,240,100,8,0.1,1,0.1,1,"","Display Speed");

_sliderDirty ? (
  process_slider();
  _sliderDirty = 0;
);

// GR START

gfx_a = 0.5;
gfx_r = 1; gfx_g = 1; gfx_b = 1;
gfx_rect(mtr_x,mtr_y,395,225);

gfx_a = 0.95;
gfx_r = 0; gfx_g = 0; gfx_b = 0;
gfx_rect(mtr_x+1,mtr_y+1,393,223);

gfx_setfont(1,"Arial",12);

redux = 200-ceil(100 - log(1/(envsum*output))*43.3);
redux = min(redux,200);
redux = max(redux,0);

gfx_a = 0.75;
gfx_r = 1; gfx_g = 1; gfx_b = 1;

gfx_x = gr_pos_x; gfx_y = 0+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,0+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(20,0);

gfx_x = gr_pos_x; gfx_y = 40+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,40+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(12,0);

gfx_x = gr_pos_x; gfx_y = 70+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,70+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(6,0);

gfx_x = gr_pos_x; gfx_y = 100+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,100+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(0,0);

gfx_x = gr_pos_x; gfx_y = 130+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,130+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(-6,0);

gfx_x = gr_pos_x; gfx_y = 159+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,159+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(-12,0);

gfx_x = gr_pos_x; gfx_y = 200+gr_pos_y;
gfx_lineto(loopsize+gr_pos_x,200+gr_pos_y,0);
gfx_x += 5;
gfx_drawnumber(-20,0);

gfx_a = 0.5;
gfx_r = 1; gfx_g = 1; gfx_b = 0;

play_state ? (
  gfx_x = i+gr_pos_x; gfx_y = gr_pos_y;
  gfx_lineto(i+gr_pos_x,200+gr_pos_y,1);
  gfx_y += 0;
  readout = 20 * log10( sqrt(rmss2 +=  0.03 * ((output*envsum)^2 - rmss2)) );
  gfx_drawnumber(readout,1);
  gfxmem[i] = redux;
  i += mtrspeed;
  i > loopsize ? i = 1;
);

gfx_a = 0.5;
gfx_r = 0; gfx_g = 1; gfx_b = 0;
gfx_x = gr_pos_x; gfx_y = y_mem;

dloop = 1;
loop (loopsize,
  y_mem = gfxmem[dloop] + gr_pos_y;
  x_mem = dloop + gr_pos_x;
  gfx_lineto(x_mem,y_mem,1);
  dloop += 1;
);

gfx_a = 1;
gfx_r = 1; gfx_g = 0.5; gfx_b = 0;
gfx_x = gr_pos_x; gfx_y = y_mem2;

dloop2 = 1;
loop (loopsize, 
  rms = sqrt(rmss +=  (0.03 * speedcmp) * (gfxmem[dloop2]^2 - rmss ));
  y_mem2 = rms + gr_pos_y;
  x_mem2 = dloop2 + gr_pos_x;
  gfx_lineto(x_mem2,y_mem2,1);
  dloop2 += 1;
);

// GR END

// Statistics

gfx_setfont(1,"Arial",14,'b');

play_state ? (
  peak = peak2 = 20 * log10(envsum/10)+20;
  peak = peak > p_tmp ? peak : p_tmp;
  p_tmp = peak;
  peak2 = peak2 < p_tmp2 ? peak2 : p_tmp2;
  p_tmp2 = peak2;
);

gfx_a = 0.9;
gfx_r = 1; gfx_g = 1; gfx_b = 0;
gfx_x = x_pos+12; gfx_y = y_pos + 45;
gfx_drawstr("Dyn.Range Reduction: ");

gfx_x = x_pos+160;
str = sprintf(#,"%.2f",peak-peak2);
strcat(str," dB");
gfx_drawstr(str);

gfx_r = 1; gfx_g = 1; gfx_b = 1;
gfx_x = x_pos+12; gfx_y = y_pos + 65;
gfx_drawstr("Max Gain: ");

gfx_x = x_pos+160;
str = sprintf(#,"%.2f",peak);
strcat(str," dB");
gfx_drawstr(str);

gfx_x = x_pos+12; gfx_y = y_pos + 85;
gfx_drawstr("Max Attenuation: ");

gfx_x = x_pos+160;
str = sprintf(#,"%.2f",peak2);
strcat(str," dB");
gfx_drawstr(str);

mouse_cap && mouse_y < mtr_y + 230 &&  mouse_y > mtr_y ? (memset(gfxmem,100,loopsize+1); i = 0;);
mouse_cap && mouse_y > mtr_y + 230 ? (p_tmp = p_tmp2 = 0;);

@sample

  inL = snL = spl0;
  inR = snR = spl1;  

ss ? (
  inL = flt0.filterHP(inL);
  !sniffer.isMono ? (
    inR = flt1.filterHP(inR);
  );
);

  input0 = abs(inL);
  
  envelope2 = env2.follower(input0,0,t200-rel_mod2);
  rel_mod0 = gr / (rmm * envelope2+1);
  
  envelope0 = e1L.follower(input0,ga,rel_mod0);
  envelope0 = e2L.follower(envelope0,0,t20);
  envelope0 = e3L.follower(envelope0,0,t20);
  envelope0 = mlim / (envelope0 + mgain);
  outL = envelope0  * inL;

!sniffer.isMono ? (
  input1 = abs(inR);
  
  envelope3 = env3.follower(input1,0,t200-rel_mod2);
  rel_mod1 = gr / (rmm * envelope3+1);
  
  envelope1 = e1R.follower(input1,ga,rel_mod1);
  envelope1 = e2R.follower(envelope1,0,t20);
  envelope1 = e3R.follower(envelope1,0,t20);
  envelope1 = mlim / (envelope1 + mgain);
  outR = envelope1  * inR;
) : (
  outR = outL;
  envelope1 = 1000;
);

spl0 = outL * output;
spl1 = outR * output;

envsum = min(envelope0,envelope1);

@block

blocksniffer(snL,snR);
