desc: 5.1 Master Limiter
author: Stige T.
version: 1.0
changelog: Initial release
provides: anomaly_5.1 Master Limiter/*
link: http://jsplugins.supermaailma.net/
about:
	5.1 Master Limiter is a 5.1 surround capable limiter/leveler/loudness maximizer for the master channel. Using this on 2-channel setup is not a problem either. Unused channels will not be processed, thus saving CPU.
	Supports all sample rates.
	Weight controls for maintaining balance between channels with 5.1 material.
	Response control: Small values give more hard limiter type sound and max output. The larger values engage more softer, leveler type behavior.
	Dual metering: Green bar corresponds to the gain reduction while blue shows the channel RMS output.
	Two operating modes: The Classic limiter mode acts as a traditional downward limiter with a threshold. The Loudness maximizer mode maximizes the output volume as expected in mastering applications. There is no other sonic differences between them.

/***************************
  5.1 Master Limiter MK2
Copyright 2015-2016 Stige T.
***************************/

EffectName: 5.1 Master Limiter
VendorString: Stige T.
VendorVersion: 1000
UniqueId: 5171

//in_pin:L Front
//in_pin:R Front
//in_pin:Center
//in_pin:LFE
//in_pin:L Back
//in_pin:R Back
//out_pin:L Front
//out_pin:R Front
//out_pin:Center
//out_pin:LFE
//out_pin:L Back
//out_pin:R Back

slider1:0<-40,0,1>-Threshold
slider2:0<0,1,1{Loudness Maximizer,Classic Limiter}>-Threshold mode
slider3:0<-10,10,0.1>-Center Weight -/+
slider4:0<-20,20,0.1>-LFE Weight -/+
slider5:0<-10,10,0.1>-Surround Weight -/+
slider6:1.5<1,5,0.5>-Response [HARD <-> SOFT]
slider7:0<0,4,0{All Channels,Front,C,LFE,Surround}>-Monitor
slider10:-0.2<-20,20,0.1>-Output

@init

!"#define VAL(A) (A)" "//";

buildStr = "build 160709";

/* METER INIT */
mtrX = 90;
mtrY = 320;

m0.conf.x = 10 + mtrX;

m1.conf.x = 20 + mtrX;
m2.conf.x = 60 + mtrX;
m3.conf.x = 100 + mtrX;
m4.conf.x = 140 + mtrX;
m5.conf.x = 180 + mtrX;
m6.conf.x = 220 + mtrX;

m7.conf.x = 23 + mtrX;
m8.conf.x = 63 + mtrX;
m9.conf.x = 103 + mtrX;
m10.conf.x = 143 + mtrX;
m11.conf.x = 183 + mtrX;
m12.conf.x = 223 + mtrX;

m13.conf.x = 20 + mtrX;
m14.conf.x = 60 + mtrX;
m15.conf.x = 100 + mtrX;
m16.conf.x = 140 + mtrX;
m17.conf.x = 180 + mtrX;
m18.conf.x = 220 + mtrX;

m19.conf.x = 20 + mtrX;
m20.conf.x = 60 + mtrX;
m21.conf.x = 100 + mtrX;
m22.conf.x = 140 + mtrX;
m23.conf.x = 180 + mtrX;
m24.conf.x = 220 + mtrX;

// Meter scaling
m0.conf.s =
m1.conf.s =
m2.conf.s =
m3.conf.s =
m4.conf.s =
m5.conf.s =
m6.conf.s =
m7.conf.s =
m8.conf.s =
m9.conf.s =
m10.conf.s =
m11.conf.s =
m12.conf.s = 0.5;
/* METER INIT END */

mtr1L = 1;
mtr1R = 1;
mtr1C = 1;
mtr1LF = 1;
mtr1LS = 1;
mtr1RS = 1;

t005 = exp(-1/(srate*0.0005));
t01 = exp(-1/(srate*0.001));
t02 = exp(-1/(srate*0.002));
t03 = exp(-1/(srate*0.003));
t05 = exp(-1/(srate*0.005));
t10 = exp(-1/(srate*0.01));
t15 = exp(-1/(srate*0.015));
t20 = exp(-1/(srate*0.02));
t30 = exp(-1/(srate*0.03));
t50 = exp(-1/(srate*0.05));
t100 = exp(-1/(srate*0.1));
t200 = exp(-1/(srate*0.2));
t500 = exp(-1/(srate*0.5));
t1000 = exp(-1/(srate*1));
t2000 = exp(-1/(srate*2));

function delay_init(samples,index)
instance (len,sloop,splay)
(
  len = samples > srate ? srate : samples;
  sloop = splay = srate * index;
);

function delay(input)
instance(sindex,splay,sloop,len)
(
  sloop[sindex] = input;
  sindex += 1;
  sindex > len ? sindex = 0;
  splay[sindex];
);

function rms_init(weight_ms)
instance (weight)(
  weight = 1-exp(-1/(weight_ms / 1000 * srate));
);

function rms(input)
instance (s,rms,weight)(
  rms = sqrt(s +=  weight * ( input^2 - s ));
);

function follower(input,att,rel,t)
instance (env,tmp) (
  tmp = input >= tmp ? input : input + t * (tmp-input);
  (tmp > env) ? (
      env = att * (env - tmp) + tmp;
  ) : (
      env = rel * (env - tmp) + tmp;
  );
);

maxscount = 1024;
function samplesniffer(input) (
  abs(input) < 0.00000001 ? (
    this.splCount < maxscount ? this.splCount += 1;
  ) : (
    this.splCount = 0;
  );
  this.out = this.splCount >= maxscount ? 0 : 1;
);

function interpolate(A, B, X) (
    (A * (1 - X) + B * X);
);

function limiter(input) (

  this.sn.samplesniffer(input) ? (
    this.pk = this.pke.follower(input,0,t1000,t10);
    this.rms = this.r.rms(input);
    this.diff = 1/((this.pk * 0.708) - this.rms + 1);
    
    this.cmp = response * 0.1 + 0.9;

    this.drv0 = max(abs(input*this.diff*response),1);
    this.peak0 = max(this.e0.follower(this.drv0,t100,t1000,t10),1);
    input = input / this.peak0  * this.cmp;

    this.drv2 = max(abs(input*this.diff),1);
    this.peak2 = max(this.e2.follower(this.drv2,t20,t100,t10),1);
    input = input / this.peak2;
    
    this.drv4 = max(abs(input*this.diff),1);
    this.peak4 = max(this.e4.follower(this.drv4,t01,t20,t01),1);
    input = input / this.peak4;
 
    this.drv5 = max(abs(input),1);
    this.peak5 = max(this.e5.follower(this.drv5,t005,0,t03),1);
    input = this.d.delay(input) / this.peak5;
    
    this.drv6 = max(abs(input),1);
    this.peak6 = this.e6.follower(this.drv6,0,0,t03);
    input = input / this.peak6;
    
    this.env.tmp = (this.peak0-1) + (this.peak2-1) + (this.peak4-1) + (this.peak5-1) + (this.peak6-1) + 1;
    this.env < this.env.tmp ? (
      this.env = this.env.tmp;
    );
    
    input;
    
  );      
);

function process_sliders() (

  tmode = slider2;
  out = 10 ^ (slider10 / 20);
  
  CWa = 10 ^ (slider3 / 20);
  CWb = 1/CWa;
  LWa = 10 ^ (slider4 / 20);
  LWb = 1/LWa;
  SWa = 10 ^ (slider5 / 20);
  SWb = 1/SWa;
  
  tmode ? (
    thresh = 10 ^ (slider1 / 20);
  ) : (
    thresh = 1;
  );
  
  drive = 10 ^ (abs(slider1) / 20);
  cmp = min(CWa,LWa);
  cmp = min(cmp,SWa);
  cmp = min(cmp,1);  
   
  response = slider6;
  
  s20.checked && lastChecked != 0 ? (
    s21.checked = s22.checked = s23.checked = s24.checked = 0;
    lastChecked = 0;
  );
  
  s21.checked && lastChecked != 1 ? (
    s20.checked = s22.checked = s23.checked = s24.checked = 0;
    lastChecked = 1;
  );
  
  s22.checked && lastChecked != 2 ? (
    s21.checked = s20.checked = s23.checked = s24.checked = 0;
    lastChecked = 2;
  );
  
  s23.checked && lastChecked != 3 ? (
    s21.checked = s22.checked = s20.checked = s24.checked = 0;
    lastChecked = 3;
  );
  
  s24.checked && lastChecked != 4 ? (
    s21.checked = s22.checked = s23.checked = s20.checked = 0;
    lastChecked = 4;
  );
  
  !s20.checked && !s21.checked && !s22.checked && !s23.checked && !s24.checked ? (s20.checked = 1;);
  
  mstat = slider7 = lastChecked;
  
  monF = mstat == 0 || mstat == 1 ? 1 : 0;
  monC = mstat == 0 || mstat == 2 ? 1 : 0;
  monLFE = mstat == 0 || mstat == 3 ? 1 : 0;
  monS = mstat == 0 || mstat == 4 ? 1 : 0;
  
  driveF = drive * monF;
  cmpF = out * cmp * thresh;
  
  driveC = drive * CWa * monC;
  cmpC = out * CWb * cmp * thresh;
  
  driveLFE = drive * LWa * monLFE;
  cmpLFE = out * LWb * cmp * thresh;
  
  driveS = drive * SWa * monS;
  cmpS = out * SWb * cmp * thresh;
   
);

l0.r.rms_init(500);
l1.r.rms_init(500);
l2.r.rms_init(500);
l3.r.rms_init(500);
l4.r.rms_init(500);
l5.r.rms_init(500);

latency = floor(srate/1000);

l0.d.delay_init(latency,0);
l1.d.delay_init(latency,1);
l2.d.delay_init(latency,2);
l3.d.delay_init(latency,3);
l4.d.delay_init(latency,4);
l5.d.delay_init(latency,5);

pdc_delay = latency;
pdc_bot_ch = 0; pdc_top_ch = 6;

@slider

s1.value = slider1;
s2.checked = slider2;
s3.value = slider3;
s4.value = slider4;
s5.value = slider5;
s6.value = slider6;
s7.value = slider10;

s20.checked = slider7 == 0 ? 1;
s21.checked = slider7 == 1 ? 1;
s22.checked = slider7 == 2 ? 1;
s23.checked = slider7 == 3 ? 1;
s24.checked = slider7 == 4 ? 1;

process_sliders();

@block

!mtrInit ? (
  mtrT = (samplesblock/128) * 0.005;
  rm0.rms_init(2000/samplesblock);
  rm1.rms_init(2000/samplesblock);
  rm2.rms_init(2000/samplesblock);
  rm3.rms_init(2000/samplesblock);
  rm4.rms_init(2000/samplesblock);
  rm5.rms_init(2000/samplesblock);
  mtrInit = 1;
);

mtr1L = 1/l0.env;
mtr1R = 1/l1.env;
mtr1C = 1/l2.env;
mtr1LF = 1/l3.env;
mtr1LS = 1/l4.env;
mtr1RS = 1/l5.env;

l0.env = max(l0.env - mtrT, 1);
l1.env = max(l1.env - mtrT, 1);
l2.env = max(l2.env - mtrT, 1);
l3.env = max(l3.env - mtrT, 1);
l4.env = max(l4.env - mtrT, 1);
l5.env = max(l5.env - mtrT, 1);

mtr2L = rm0.rms(spl0);
mtr2R = rm1.rms(spl1);
mtr2C = rm2.rms(spl2);
mtr2LF = rm3.rms(spl3);
mtr2LS = rm4.rms(spl4);
mtr2RS = rm5.rms(spl5);

@sample

spl0 = l0.limiter(spl0 * driveF) * cmpF;
spl1 = l1.limiter(spl1 * driveF) * cmpF;
spl2 = l2.limiter(spl2 * driveC) * cmpC;
spl3 = l3.limiter(spl3 * driveLFE) * cmpLFE;
spl4 = l4.limiter(spl4 * driveS) * cmpS;
spl5 = l5.limiter(spl5 * driveS) * cmpS;

@gfx 430 700

gfx_r = 0.1;
gfx_g = 0.1;
gfx_b = 0.1;

gfx_rect(0, 0, gfx_w, gfx_h);

gfx_setfont(1,"Arial",14);

function vert_meter_reduction(input)
(  
  //this.conf.x = 10;
  this.conf.y = 40 + mtrY;
  this.conf.w = 10;
  this.conf.h = 300;
  //this.conf.s = 0.3;
  this.conf.phcoeff = 100;
  this.conf.phfallspd = 3;
      
  this.mtr.in = this.conf.h - min( (input^this.conf.s) * this.conf.h, this.conf.h -1 ) -1;
  this.mtr.sgn = this.mtr.in; 
  
  gfx_r = 0; gfx_g = 0.85; gfx_b = 0;
  gfx_rect(this.conf.x, this.conf.y + 1, this.conf.w, this.mtr.sgn);
  
  this.mtr.peak <= this.mtr.sgn ? (
    this.mtr.peak = this.mtr.sgn;
    this.mtr.tmp = 0;
  ) : (
    this.mtr.tmp += 1;
    this.mtr.tmp > this.conf.phcoeff ? (
      this.mtr.peak -= this.conf.phfallspd;
    );
  );
  
  this.mtr.peak = max(this.mtr.peak,0);
    
  gfx_rect(this.conf.x, this.conf.y + 1 + this.mtr.peak, this.conf.w, 1);
  
);

function vert_meter_level(input)
(  
  //this.conf.x = 10;
  this.conf.y = 40 + mtrY;
  this.conf.w = 4;
  this.conf.h = 300;
  //this.conf.s = 0.3;
      
  this.mtr.in = this.conf.h - min((input^this.conf.s) * this.conf.h, this.conf.h-1);
  this.mtr.sgn = this.mtr.in;
  
  gfx_r = 0; gfx_g = 1; gfx_b = 1;
  input > 0.2 ? (
    gfx_r = 1; gfx_g = 1; gfx_b = 0;  
  );
  input > 0.316 ? (
    gfx_r = 1; gfx_g = 0.1; gfx_b = 0.1;  
  );  
  gfx_rect(this.conf.x, this.conf.y + this.mtr.sgn, this.conf.w, this.conf.h - this.mtr.sgn);
  
);

function vert_meter_layout()
(
  //this.conf.x = 10;
  this.conf.y = 40 + mtrY;
  this.conf.w = 230;
  this.conf.h = 300;
  //this.conf.s = 0.3;
  
  !this.mtr.20 ? (
    this.mtr.1 = (1 - 0.891^this.conf.s) * this.conf.h;
    this.mtr.3 = (1 - 0.708^this.conf.s) * this.conf.h;
    this.mtr.6 = (1 - 0.501^this.conf.s) * this.conf.h;
    this.mtr.10 = (1 - 0.316^this.conf.s) * this.conf.h;
    this.mtr.14 = (1 - 0.200^this.conf.s) * this.conf.h;
    this.mtr.20 = (1 - 0.1^this.conf.s) * this.conf.h;
    this.mtr.30 = (1 - 0.0316^this.conf.s) * this.conf.h;
    this.mtr.40 = (1 - 0.01^this.conf.s) * this.conf.h;
    this.mtr.60 = (1 - 0.001^this.conf.s) * this.conf.h;
    this.mtr.80 = (1 - 0.0001^this.conf.s) * this.conf.h;
  );

  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.1;
  gfx_rect(this.conf.x, this.conf.y, this.conf.w, this.conf.h);
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h-2);
      
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  
  gfx_rect(this.conf.x+this.conf.w, this.conf.y, 5, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y - 1;
  gfx_drawstr("0");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.1, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.1 - 1;
  gfx_drawstr("1");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.3, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.3 - 1;
  gfx_drawstr("3");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.6, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.6 - 1;
  gfx_drawstr("6");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.10, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.10 - 1;
  gfx_drawstr("10");
  
  gfx_rect(this.conf.x+1, this.conf.y + this.mtr.14, this.conf.w + 4, 1);
  gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.14 - 1;
  gfx_drawstr("14");
  
  this.conf.s <= 1.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.20, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.20 - 1;
    gfx_drawstr("20");
  );
  this.conf.s <= 1 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.30, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.30 - 1;
    gfx_drawstr("30");
  );
  this.conf.s <= 0.7 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.40, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.40 - 1;
    gfx_drawstr("40");
  );
  this.conf.s <= 0.5 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.60, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.60 - 1;
    gfx_drawstr("60");
  );
  this.conf.s <= 0.3 ? (
    gfx_rect(this.conf.x+1, this.conf.y + this.mtr.80, this.conf.w + 4, 1);
    gfx_x = this.conf.x + this.conf.w + 6; gfx_y = this.conf.y + this.mtr.80 - 1;
    gfx_drawstr("80");
  );
  
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.8;
  gfx_rect(this.conf.x + 1, this.conf.y + 1, this.conf.w - 2, this.conf.h - 2);

);

function meter_level_readout(input)
(  
  //this.conf.x = 10;
  this.conf.y = 340 + mtrY;
  this.conf.phcoeff = 20;
  this.conf.phfallspd = 0.1;
  
  
  this.mtr.in = max(input,0.0000001);
  
  this.mtr.sgn <= this.mtr.in ? (
    this.mtr.sgn = this.mtr.in;
    this.mtr.count = 0;
  ) : (
    this.mtr.count += 1;
    this.mtr.count > this.conf.phcoeff ? (
      //this.mtr.sgn -= (this.mtr.sgn * this.conf.phfallspd);
      this.mtr.sgn = this.mtr.in;
    );
  );
  
  gfx_r = 1; gfx_g = 1; gfx_b = 1;
  this.mtr.db = 20 * log10(this.mtr.sgn);
  this.mtr.readout = sprintf(#,"%.1f",this.mtr.db);
  gfx_measurestr(this.mtr.readout,this.mtr.readout.width,this.mtr.readout.heigth);
  gfx_x = this.conf.x - (this.mtr.readout.width / 2) + 5; gfx_y = this.conf.y;
  gfx_drawstr(this.mtr.readout);
        
);

function meter_reduction_readout(input)
(  
  //this.conf.x = 10;
  this.conf.y = 25 + mtrY;
  this.conf.phcoeff = 20;
  this.conf.phfallspd = 0.1;
  
  this.mtr.in = max(1/input,1);
  
  this.mtr.sgn <= this.mtr.in ? (
    this.mtr.sgn = this.mtr.in;
    this.mtr.count = 0;
  ) : (
    this.mtr.count += 1;
    this.mtr.count > this.conf.phcoeff ? (
      //this.mtr.sgn -= (this.mtr.sgn * this.conf.phfallspd);
      this.mtr.sgn = this.mtr.in;
    );
  );
  
  gfx_r = 1; gfx_g = 1; gfx_b = 1;
  this.mtr.db = 20 * log10(1/this.mtr.sgn);
  this.mtr.readout = sprintf(#,"%.1f",this.mtr.db);
  gfx_measurestr(this.mtr.readout,this.mtr.readout.width,this.mtr.readout.heigth);
  gfx_x = this.conf.x - (this.mtr.readout.width / 2) + 5; gfx_y = this.conf.y;
  gfx_drawstr(this.mtr.readout);
        
);

function draw_hslider(x,y,w,h,f,t,s,d,unit,title)
(

  // Frame
  gfx_r = gfx_g = gfx_b = 0.9;
  gfx_rect(x,y,w,h);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,w-2,h-2);
  
  // Knob parameters
  this.knob.w = 10;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 10 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
    _sliderDirty = 1;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(x+1+this.knob.pos,y+2,this.knob.w,h-4);
  gfx_r = gfx_g = gfx_b = 0.2;  
  gfx_rect(x+this.knob.hw+this.knob.pos,y+3,1,h-6);
  gfx_r = gfx_g = gfx_b = 0.8;  
  gfx_rect(x+this.knob.hw+1+this.knob.pos,y+3,1,h-6); 

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

function draw_chkbox(x,y,s,title)
(

  gfx_r = gfx_g = gfx_b = 0.7;
  gfx_measurestr(title,this.str.w,this.str.h);
  gfx_x = x - this.str.w - 5; gfx_y = y + (s * 0.5) - (this.str.h * 0.5);
  gfx_drawstr(title);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+s && mouse_y >= y && mouse_y <= y+s && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = this.canChange = 0;
  );
  !mouse_cap ? (this.canChange = 0;);

  this.canChange ? (
    this.checked = 1-this.checked;
    this.hasEntered = this.hasClicked = this.canChange = 0;
    _sliderDirty = 1;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,s,s);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,s-2,s-2);
  
  // Checked
  this.checked ? (
    gfx_r = 0.1; gfx_g = 0.75; gfx_b = 1;
    gfx_rect(x+2,y+2,s-4,s-4);
  );
    
  this.checked; 
);

sldY = 50;
slider1 = s1.draw_hslider(115,10+sldY,200,20,-40,0,0.5,0,"dB","Threshold");
slider2 = s2.draw_chkbox(115,40+sldY,15,"Classic Limiter");

slider3 = s3.draw_hslider(115,80+sldY,200,20,-20,20,0.5,0,"dB","Center Weight");
slider4 = s4.draw_hslider(115,110+sldY,200,20,-20,20,0.5,0,"dB","LFE Weight");
slider5 = s5.draw_hslider(115,140+sldY,200,20,-20,20,0.5,0,"dB","Surround Weight");

slider6 = s6.draw_hslider(115,180+sldY,200,20,1,5,0.5,1.5,"","Response [H <> S]");
slider10 = s7.draw_hslider(115,210+sldY,200,20,-20,20,0.1,-0.2,"dB","Output");

s20.draw_chkbox(115,240+sldY,15,"Monitor   ALL");
s21.draw_chkbox(162,240+sldY,15,"FR");
s22.draw_chkbox(207,240+sldY,15,"C");
s23.draw_chkbox(252,240+sldY,15,"LF");
s24.draw_chkbox(300,240+sldY,15,"SR");

_sliderDirty ? (
  process_sliders(); 
  _sliderDirty = 0;
);

m0.vert_meter_layout();

m1.vert_meter_reduction(mtr1L);
m2.vert_meter_reduction(mtr1R);
m3.vert_meter_reduction(mtr1C);
m4.vert_meter_reduction(mtr1LF);
m5.vert_meter_reduction(mtr1LS);
m6.vert_meter_reduction(mtr1RS);

m7.vert_meter_level(mtr2L);
m8.vert_meter_level(mtr2R);
m9.vert_meter_level(mtr2C);
m10.vert_meter_level(mtr2LF);
m11.vert_meter_level(mtr2LS);
m12.vert_meter_level(mtr2RS);

m13.meter_level_readout(mtr2L);
m14.meter_level_readout(mtr2R);
m15.meter_level_readout(mtr2C);
m16.meter_level_readout(mtr2LF);
m17.meter_level_readout(mtr2LS);
m18.meter_level_readout(mtr2RS);

m19.meter_reduction_readout(mtr1L);
m20.meter_reduction_readout(mtr1R);
m21.meter_reduction_readout(mtr1C);
m22.meter_reduction_readout(mtr1LF);
m23.meter_reduction_readout(mtr1LS);
m24.meter_reduction_readout(mtr1RS);

gfx_r = 1; gfx_g = 1; gfx_b = 1;
gfx_setfont(1,"Arial",16,'b');

gfx_y = 5 + mtrY;
gfx_x = 20 + mtrX;
gfx_drawstr("L");
gfx_x = 60 + mtrX;
gfx_drawstr("R");
gfx_x = 100 + mtrX;
gfx_drawstr("C");
gfx_x = 137 + mtrX;
gfx_drawstr("LF");
gfx_x = 177 + mtrX;
gfx_drawstr("LS");
gfx_x = 217 + mtrX;
gfx_drawstr("RS");

gfx_y = 355 + mtrY;
gfx_x = 110 + mtrX;
gfx_drawstr("RMS");

gfx_setfont(1,"Arial",20,'b');
gfx_y = 10;
gfx_x = 10;
gfx_drawstr("5.1 MASTER LIMITER");

gfx_x = 365; gfx_y = 680;
gfx_a = 0.5;
gfx_setfont(1,"Arial",12);
gfx_drawstr(buildStr);