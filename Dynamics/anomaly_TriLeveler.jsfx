desc: TriLeveler
author: Stige T.
version: 1.0
changelog: Initial release
provides: anomaly_TriLeveler/*
link: http://jsplugins.supermaailma.net/
about:
	Trileveler is an ultimate broadcast voice leveler. It offers three RMS driven dynamics sections chained in series. Each section has a slightly different purpose in the chain. When signal progresses from section to next, it becomes more and more compressed and tied to the target level.
	Please notice: TriLeveler is designed to work with broadcast voice. It may not work very well with other sources, like musical instruments or full mixes.
	Excellent leveling performance & transparency.
	Comes with a user manual where the operation is explained in detail.

/******************************
*        TriLeveler           *
* Copyright (C) 2015 Stige T. *
******************************/

EffectName=TriLveler
VendorString=Stige T.
VendorVersion=1000
UniqueId=3131


slider10:0<-20,20,1>-Input Trim [dB]
slider11:-26<-40,0,1>-Target [dBrms]

slider13:20<20,500,10>-LF Cut [Hz]
slider14:22000<5000,22000,1000>-HF Cut [Hz]

slider16:0<0,10,1>-Micro Dynamics Max [dB]
slider17:-10<-10,0,1>-Micro Dynamics Min [dB]

slider19:10<0,20,1>-Medium Dynamics Max [dB]
slider20:-10<-20,0,1>-Medium Dynamics Min [dB]

slider22:20<0,40,1>-Macro Dynamics Max [dB]
slider23:-20<-40,0,1>-Macro Dynamics Min [dB]

slider25:-40<-80,0,1>-Expander Gate [dB]

slider27:20<10,30,1>-Headroom [dB]

slider28:0<-6,6,0.1>-Output Trim [dB]

slider30:0<0,1,1{No,Yes}>-Use Loudness Curve

@init

!"#define VAL(A) (A)" "//";

buildStr = "build 160708";

t001 = exp(-1/(srate*0.0001));
t005 = exp(-1/(srate*0.0005));
t01 = exp(-1/(srate*0.001));
t05 = exp(-1/(srate*0.005));
t10 = exp(-1/(srate*0.01));
t20 = exp(-1/(srate*0.02));
t30 = exp(-1/(srate*0.03));
t50 = exp(-1/(srate*0.05));
t60 = exp(-1/(srate*0.06));
t100 = exp(-1/(srate*0.1));
t200 = exp(-1/(srate*0.2));
t300 = exp(-1/(srate*0.3));
t500 = exp(-1/(srate*0.5));
t1000 = exp(-1/(srate*1));


function interpolate(A, B, X) (
  (A * (1 - X) + B * X);
);

function filterLP_init(freq,Q)
instance(omega,tsin,tcos,alpha,b0,b1,b2,a0,a1,a2)
(
  Q = max(Q,0.01);
  Q = min(Q,10);
  freq = max(freq,0.1);
  freq = min(freq,srate/2);

  omega = 2*$pi*freq/srate;
  tsin = sin(omega);
  tcos = cos(omega);
  alpha = tsin/(2.0*Q);
  
  b0 = (1-tcos)/2;
  b1 = 1-tcos;
  b2 = (1-tcos)/2;
  a0 = 1+alpha;
  a1 = -2*tcos;
  a2 = 1-alpha;
  
  b0 /= a0;
  b1 /= a0;
  b2 /= a0;
  a1 /= a0;
  a2 /= a0;  
);

function filterHP_init(freq,Q)
instance(omega,tsin,tcos,alpha,b0,b1,b2,a0,a1,a2)
(
  Q = max(Q,0.01);
  Q = min(Q,10);
  freq = max(freq,0.1);
  freq = min(freq,srate/2);

  omega = 2*$pi*freq/srate;
  tsin = sin(omega);
  tcos = cos(omega);
  alpha = tsin/(2.0*Q);

  b0 = (1+tcos)/2;
  b1 = -(1+tcos);
  b2 = (1+tcos)/2;
  a0 = 1+alpha;
  a1 = -2*tcos;
  a2 = 1-alpha;
  
  b0 /= a0;
  b1 /= a0;
  b2 /= a0;
  a1 /= a0;
  a2 /= a0;    
);

function filter(input)
instance(mX1,mX2,mY1,mY2,b0,b1,b2,a0,a1,a2,output)
(
  output = b0*input + b1*mX1 + b2*mX2 - a1*mY1 - a2*mY2;
  mX2 = mX1;
  mX1 = input;
  mY2 = mY1;
  mY1 = output;
);

function HFLF_init(freq)
instance(n0,weight)
(
  n0 = 0;
  weight = 1-exp(-2*$pi*freq/srate);
);

function HFcut(input)
instance(out,n0,weight)
(  
  out = (n0+=((input-n0)*weight));
);

function LFcut(input)
instance(out,n0,weight)
(
  out = input - (n0+=((input-n0)*weight));
);

function delay_init(samples,index)
instance (len,sloop,splay)
(
  len = samples > srate ? srate : samples;
  sloop = splay = srate * index;
);

function delay(input)
instance(sindex,splay,sloop,len)
(
  sloop[sindex] = input;
  sindex += 1;
  sindex > len ? sindex = 0;
  splay[sindex];
);

function rms_init(weight_ms)
instance (weight)(
  weight = 1-exp(-1/(weight_ms / 1000 * srate));
);

function rms(input)
instance (s,rms,weight)(
  rms = sqrt(s +=  weight * ( input^2 - s ));
);

function gatedrms(input)
instance (s,rms,weight)(
  gating > gate_tolerance ? (
    rms = sqrt(s +=  weight * ( input^2 - s ));
  );
  rms;
);

function follower(input,att,rel,inertia)
instance (env,tmp) (
  tmp = input >= tmp ? input : input + t05 * (tmp-input);
  (tmp > env) ? (
      env = att * (env - tmp) + tmp;
  ) : (
      env = rel * (env - tmp) + tmp;
  );
);

function equalize(input)
instance(sgn)
(
    ( (max(min(sgn.fl2.LFcut(input),target),-target)*3) + (input * 0.5) ) * 1.25;
);

function gate(inL,inR)
instance(gating,env,e,gt,lpf,hpf) (
  key = abs(inR) > abs(inL) ? inR : inL;
  key = lpf.HFcut(key);
  key = hpf.LFcut(key);
  env = e.follower(abs(key),t001,release,t60);
  gating = min(env/gate,1)^ratio;
  sgn.l = inL * gating;
  sgn.r = inR * gating;
);

function releasemod(input)
instance(e0,peak,out) (
  peak = e0.follower(abs(input),0,t1000,0);
  out = recovery - (peak*0.00003);
);

function limiter(inL,inR)
instance(env0,env1,env,e0,e1,th,rmod,rlmod,d0,d1,input,lm)
(
  input = abs(inR) > abs(inL) ? inR : inL;
  th = max(abs(input),peak);
  th = th / peak;
  th > 1 ? (
    lm = 1;
  );
  lm ? (
    rlmod = rmod.releasemod(th);
    env0 = e0.follower(th,0,t10,t10);
    env1 = e1.follower(env0,t10,rlmod,0);
    env = max(env0,env1);
    env === 1 ? lm = 0;
  ) : (
    env = 1;
  );
  sgn.l = d0.delay(sgn.l) / env;
  sgn.r = d1.delay(sgn.r) / env;  
);

function leveler(inL,inR)
instance (r0,r1,r2,rms,rms0,rms1,rms2,d0,d1,d2,d3,d4,d5,cur,hp,input)
(
  input = abs(inR) > abs(inL) ? inR : inL;
  cur.gatedrms(input);

  // Fast
  gating > gate_tolerance ? (
    r0.rms(input);
    rms0 = cur.rms / max(min(r0.rms,cur.rms*range0.dwn),cur.rms*range0.up);
  );
  sgn.l = d0.delay(sgn.l) * rms0;
  sgn.r = d3.delay(sgn.r) * rms0;

  // Medium
  gating > gate_tolerance ? (
    input = abs(sgn.r) > abs(sgn.l) ? sgn.r : sgn.l;
    r1.rms(input);
    rms1 = target / max(min(r1.rms,target*range1.dwn),target*range1.up);
  );
  sgn.l = d1.delay(sgn.l) * rms1;
  sgn.r = d4.delay(sgn.r) * rms1;

  // Slow 
  gating > gate_tolerance ? (
    input = abs(sgn.r) > abs(sgn.l) ? sgn.r : sgn.l;
    equ ? (
      r2.rms(equalize(input));
    ) : (
      r2.rms(input);
    );
    rms2 = target / max(min(r2.rms,target*range2.dwn),target*range2.up);
  );
  sgn.l = d2.delay(sgn.l) * rms2;
  sgn.r = d5.delay(sgn.r) * rms2;  

);

maxbcount = 64;
function blocksniffer(inL,inR) (
  (this.mspl < maxbcount) ? (
    inL == inR ? (this.mspl += 1;) : (this.mspl = 0; sniffer.isMono = 0;);
  ) : (
   sniffer.isMono = 1;
   this.mspl = 0;
  );
);

function process_sliders() (

  intrim = 10^(slider10/20);
  target = 10^(slider11/20);
  headroom = 10^(slider27/20);
  peak = min(target * headroom, 0.989);
  
  LFfreq = slider13;
  LF0.filterHP_init(max(LFfreq,20),0.75);
  LF1.filterHP_init(max(LFfreq,20),0.75);
  HFfreq = slider14;
  HF0.filterLP_init(HFfreq,0.75);
  HF1.filterLP_init(HFfreq,0.75);
  
  range0.up = 10^(-slider16/20);
  range0.dwn = 10^(-slider17/20);
  range1.up = 10^(-slider19/20);
  range1.dwn = 10^(-slider20/20);
  range2.up = 10^(-slider22/20);
  range2.dwn = 10^(-slider23/20);
  
  gate = 10^(slider25/20);
  
  trim = 10^(slider28/20);
  
  equ = slider30;
  
  lvl.rms0 = 1;
  lvl.rms1 = 1;
  lvl.rms2 = 1;
  
  show_internals = slider31;

);

srate_mul = srate/44100;
pdc_delay = 34221*srate_mul;
pdc_bot_ch = 0; pdc_top_ch = 2;

/* Channel Init */
lvl.r0.rms_init(50);
lvl.r1.rms_init(500);
lvl.r2.rms_init(2000);
lvl.cur.rms_init(1000);
equalize.sgn.fl1.HFLF_init(8000);
equalize.sgn.fl2.HFLF_init(4000);
gate.lpf.HFLF_init(1000);
gate.hpf.HFLF_init(500);

lvl.d0.delay_init(1102*srate_mul,0);
lvl.d1.delay_init(11025*srate_mul,1);
lvl.d2.delay_init(22050*srate_mul,2);
lvl.d3.delay_init(1102*srate_mul,3);
lvl.d4.delay_init(11025*srate_mul,4);
lvl.d5.delay_init(22050*srate_mul,5);
lm.d0.delay_init(44*srate_mul,6);
lm.d1.delay_init(44*srate_mul,7);
/* ************ */

post.rms_init(5000);

/* Level checks */
chk.med1.rms_init(0.5);
chk.med2.rms_init(0.5);
chk.med3.rms_init(0.5);
chk.mad1.rms_init(0.5);
chk.mad2.rms_init(0.5);
chk.mad3.rms_init(0.5);
/* ************ */

chk.gate.rms_init(1);

/* RMS pre-values */
lvl.r1.s = 0.01;
lvl.r2.s = 0.01;
lvl.cur.s = 0.01;
post.s = 0.00251;
chk.gate.s = 0.01;
/* ************ */

/*
The tolerance (dB) which is
allowed before the processors
will be put into a gated state
*/
gate_tolerance = 0.891;


/* Just some inits */
peak = 1;
gate = 0.001;
peakhold = 1;
recovery = 0;

@slider

s10.value = slider10;
s11.value = slider11;
s13.value = slider13;
s14.value = slider14;
s16.value = slider16;
s17.value = slider17;
s19.value = slider19;
s20.value = slider20;
s22.value = slider22;
s23.value = slider23;
s25.value = slider25;
s27.value = slider27;
s28.value = slider28;
cb1.checked = slider30;

process_sliders();

@block

!init_rms ? (
  pre.rms_init((128/samplesblock)*(srate/44100));
  init_rms = 1;
);

/* play_state was not supported in gfx section by Jeez */
play_state2 = play_state;

mtr0 = lvl.rms0;
mtr1 = lvl.rms1;
mtr2 = lvl.rms2;
limit = 1/lm.env;
peakhold >= limit ? ( peakhold = limit; counter = 0; ) : ( (counter += 1) < 250 ? peakhold : ( peakhold += 0.01; ); );

blocksniffer(sgn.snL,sgn.snR);

pre.rms(abs(sgn.snR) > abs(sgn.snL) ? sgn.snR : sgn.snL);

ratio = min((target / pre.rms) * 0.1,10);
release = interpolate(t10,t1000, min((gate / pre.rms) * 0.1,1) );

@sample

sgn.l = sgn.snL = spl0;
sgn.r = sgn.snR = spl1;

sgn.l = LF0.filter(sgn.l);
!sniffer.isMono ? (
  sgn.r = LF1.filter(sgn.r);
) : (
  sgn.r = sgn.l;
);

HFfreq < 22000 ? (
  sgn.l = HF0.filter(sgn.l);
  !sniffer.isMono ? (
    sgn.r = HF1.filter(sgn.r);
  ) : (
    sgn.r = sgn.l;
  );
);

gate(sgn.l,sgn.r);
gating = gate.gating;

sgn.l *= intrim;
sgn.r *= intrim;

lvl.leveler(sgn.l,sgn.r);
lm.limiter(sgn.l,sgn.r);

sgn.l *= trim;
sgn.r *= trim;

sgn.outsum = abs(sgn.r) > abs(sgn.l) ? sgn.r : sgn.l;
post.gatedrms(sgn.outsum);

spl0 = sgn.l * play_state;
spl1 = sgn.r * play_state;

@gfx 450 520

function pulse() (
  this.counter += 1;
  this.counter >= 10 ? this.counter = 0;
  this.counter >= 5 ? 1 : 0;
);

function arrow_right(x,y) (
  gfx_rect(x,2+y,8,3);
  gfx_rect(8+x,3+y,1,1);
  gfx_rect(6+x,1+y,1,5);
  gfx_rect(5+x,y,1,7);  
);

function arrow_left(x,y) (
  gfx_rect(1+x,2+y,8,3);
  gfx_rect(x,3+y,1,1);
  gfx_rect(2+x,1+y,1,5);
  gfx_rect(3+x,y,1,7);
);

function dynmeter(in,x_pos,y_pos)
instance(redux,col1,col2,in_gfx)
(
  gfx_r = 0.3; gfx_g = 0.3; gfx_b = 0.3; gfx_a = 1;
  gfx_rect(x_pos,y_pos,200,10);
  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
  gfx_rect(x_pos+1,y_pos+1,198,8);
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  
  gfx_x = 101+x_pos; gfx_y = y_pos+2;
  in = max(in,0.1);
  in = min(in,9.8);
  gfx_r = 0; gfx_g = 0.9; gfx_b = 0.9; gfx_a = max(gating,0.5);
  in_gfx = ceil(100 - log(1/in)*43.3);
  gfx_rectto( in_gfx + x_pos, 8 + y_pos);
    
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
  gfx_rect(100+x_pos,y_pos+1,1,8);
);

function labels(x_pos,y_pos)
(
    gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
    gfx_x = 199+x_pos; gfx_y = y_pos;gfx_drawnumber(20,0);
    gfx_x = 161+x_pos; gfx_y = y_pos;gfx_drawnumber(12,0);
    gfx_x = 130+x_pos; gfx_y = y_pos;gfx_drawnumber(6,0);
    gfx_x = 100+x_pos; gfx_y = y_pos;gfx_drawnumber(0,0);
    gfx_x = 69+x_pos; gfx_y = y_pos;gfx_drawnumber(-6,0);
    gfx_x = 38+x_pos; gfx_y = y_pos;gfx_drawnumber(-12,0);
    gfx_x = 0+x_pos; gfx_y = y_pos;gfx_drawnumber(-20,0);
);

function grid(x_pos,y_pos,len)
(
    gfx_r = 0.3; gfx_g = 0.3; gfx_b = 0.3; gfx_a = 1;
    gfx_x = 199+x_pos; gfx_y = y_pos;gfx_lineto(199+x_pos,len+y_pos,0);
    gfx_x = 161+x_pos; gfx_y = y_pos;gfx_lineto(161+x_pos,len+y_pos,0);
    gfx_x = 130+x_pos; gfx_y = y_pos;gfx_lineto(130+x_pos,len+y_pos,0);
    gfx_x = 100+x_pos; gfx_y = y_pos;gfx_lineto(100+x_pos,len+y_pos,0);
    gfx_x = 69+x_pos; gfx_y = y_pos;gfx_lineto(69+x_pos,len+y_pos,0);
    gfx_x = 38+x_pos; gfx_y = y_pos;gfx_lineto(38+x_pos,len+y_pos,0);
    gfx_x = 0+x_pos; gfx_y = y_pos;gfx_lineto(0+x_pos,len+y_pos,0);
);

function draw_hslider(x,y,w,h,f,t,s,d,unit,title)
(
  
  // Change detecion
  this.value.temp != this.value ? (
    _sliderDirty = 1;
    this.value.temp = this.value;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,w,h);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,w-2,h-2);
  
  // Knob parameters
  this.knob.w = 10;
  this.knob.hw = this.knob.w * 0.5;
  this.range = abs(f - t);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = 0;
  );
  !mouse_cap ? (this.canChange = 0; this.init_x = 0;);
  
  // Process
  this.canChange ? (
    mouse_cap & 8 ? (
      !this.init_x ? this.init_x = mouse_x;
      this.knob.input = (this.init_x - x - this.knob.w) + (((mouse_x/this.init_x) - 1) * 10 + this.knob.hw);
    ) : (
      this.knob.input = (mouse_x - x - this.knob.hw);
      this.init_x = 0;
    );
    
    this.knob.input.normalized = this.knob.input / (w-this.knob.w-2);
    this.value.rect = this.range*this.knob.input.normalized;
    this.step = 1/s;
    this.value.rect = ceil(this.value.rect * this.step) / this.step;
    this.value = this.value.rect + f;
    
    mouse_cap & 4 ? this.value = d;
  );
  
  this.value = max(min(this.value,t),f);
  this.knob.pos = (this.range + this.value - t) / (this.range) * (w-this.knob.w-2);

  // Knob
  gfx_r = gfx_g = gfx_b = 0.5;
  gfx_rect(x+1+this.knob.pos,y+2,this.knob.w,h-4);
  gfx_r = gfx_g = gfx_b = 0.2;  
  gfx_rect(x+this.knob.hw+this.knob.pos,y+3,1,h-6);
  gfx_r = gfx_g = gfx_b = 0.8;  
  gfx_rect(x+this.knob.hw+1+this.knob.pos,y+3,1,h-6); 

  // Title
  gfx_r = gfx_g = gfx_b = 0.8;
  this.str1 = title;
  gfx_measurestr(this.str1,this.str1.w,this.str1.h);
  gfx_x = x - this.str1.w - 5 ; gfx_y = y + (h * 0.5) - (this.str1.h * 0.5);
  gfx_drawstr(this.str1);

  // Readout
  !this.hidereadout ? (
    gfx_r = gfx_g = gfx_b = 0.8;
    this.str2 = strcat(sprintf(#,"%.2f",this.value),unit);
    gfx_measurestr(this.str2,this.str2.w,this.str2.h);
    gfx_x = x + w + 5; gfx_y = y + (h * 0.5) - (this.str2.h * 0.5);
    gfx_drawstr(this.str2);
  );
    
  this.value;
);

function draw_chkbox(x,y,s,title)
(

  // Change detecion
  this.checked.temp != this.checked ? (
    _sliderDirty = 1;
    this.checked.temp = this.checked;
  );

  gfx_r = gfx_g = gfx_b = 0.7;
  gfx_measurestr(title,this.str.w,this.str.h);
  gfx_x = x - this.str.w - 5; gfx_y = y + (s * 0.5) - (this.str.h * 0.5);
  gfx_drawstr(title);

  // Mouse Logic
  mouse_x >= x && mouse_x <= x+s && mouse_y >= y && mouse_y <= y+s && !this.disabled ? (
    !mouse_cap ? this.hasEntered = 1;
    mouse_cap ? this.hasClicked = 1;
    this.hasEntered && this.hasClicked ? this.canChange = 1;
  ) : (
    this.hasEntered = this.hasClicked = this.canChange = 0;
  );
  !mouse_cap ? (this.canChange = 0;);

  this.canChange ? (
    this.checked = 1-this.checked;
    this.hasEntered = this.hasClicked = this.canChange = 0;
  );

  // Frame
  gfx_r = gfx_g = gfx_b = 1;
  gfx_rect(x,y,s,s);
  gfx_r = gfx_g = gfx_b = 0.1;
  gfx_rect(x+1,y+1,s-2,s-2);
  
  // Checked
  this.checked ? (
    gfx_r = 0.1; gfx_g = 0.75; gfx_b = 1;
    gfx_rect(x+2,y+2,s-4,s-4);
  );
    
  this.checked; 
);

play_state2 ? (
  flash =  pulse();
);

/* BACKGROUND */

gfx_r = 0.125; gfx_g = 0.125; gfx_b = 0.1; gfx_a = 1;
gfx_rect(1,1,450,520);

/* TITLE */

gfx_r = gfx_g = gfx_b = 1;
gfx_setfont(1,"Arial",24,'b');
gfx_x = 10; gfx_y = 10;
gfx_drawstr("TriLeveler");
gfx_setfont(1,"Arial",14,'b');
gfx_x = 15; gfx_y = 27;
gfx_drawstr("Voice Processor");

/* SLIDERS */

gfx_setfont(1,"Arial",12,'b');

slider_align = 145;
slider_y = 50;

slider10 = s10.draw_hslider(slider_align,slider_y,200,20,-20,20,0.5,0,"dB","Input Trim");
slider11 = s11.draw_hslider(slider_align,25 + slider_y,200,20,-40,0,1,-26,"dB[rms]","Target");

!show_internals ? (
  slider13 = s13.draw_hslider(slider_align,60 + slider_y,200,20,20,500,10,20,"Hz","LF Cut");
  slider14 = s14.draw_hslider(slider_align,85 + slider_y,200,20,5000,22000,100,22000,"Hz","HF Cut");
  
  slider25 = s25.draw_hslider(slider_align,120 + slider_y,200,20,-80,0,1,-40,"dB","Expander Gate");
  
  slider27 = s27.draw_hslider(slider_align,145 + slider_y,200,20,10,30,1,20,"dB","Headroom");
  slider28 = s28.draw_hslider(slider_align,180 + slider_y,200,20,-6,6,0.1,0,"dB","Output Trim");
);

slider30 = cb1.draw_chkbox(slider_align,215 + slider_y,15,"Use Loudness Curve");
slider31 = cb2.draw_chkbox(slider_align,240 + slider_y,15,"Show Internals");

/* Internals Panel */

show_internals ? (
  panel_y = 105;
  gfx_r = 0.2; gfx_g = 0.2; gfx_b = 0.1; gfx_a = 1;
  gfx_rect(10,panel_y,430,175);
  gfx_r = 0.3; gfx_g = 0.3; gfx_b = 0.3; gfx_a = 0.9;
  gfx_line(10,panel_y,10,panel_y+175);
  gfx_line(gfx_w-10,panel_y,gfx_w-10,panel_y+175);
  gfx_line(10,panel_y,gfx_w-10,panel_y);
  gfx_line(10,panel_y+175,gfx_w-10,panel_y+175);
  
  slider16 = s16.draw_hslider(slider_align,5 + panel_y,200,20,0,10,1,0,"dB","Micro Dynamics Max");
  slider17 = s17.draw_hslider(slider_align,30 + panel_y,200,20,-10,0,1,-10,"dB","Micro Dynamics Min");
  
  slider19 = s19.draw_hslider(slider_align,65 + panel_y,200,20,0,20,1,10,"dB","Medium Dynamics Max");
  slider20 = s20.draw_hslider(slider_align,90 + panel_y,200,20,-20,0,1,-10,"dB","Medium Dynamics Min");
  
  slider22 = s22.draw_hslider(slider_align,125 + panel_y,200,20,0,40,1,20,"dB","Macro Dynamics Max");
  slider23 = s23.draw_hslider(slider_align,150 + panel_y,200,20,-40,0,1,-20,"dB","Macro Dynamics Min");
);

_sliderDirty ? (
  process_sliders();
  _sliderDirty = 0;
);

/* METERS */

meters_align = 145;
mtr_y = 280;

gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
gfx_setfont(1,"Arial",14,'b');
gfx_setfont(1,"Arial",14,'b');

#str = "MICRO DYNAMICS";
gfx_measurestr(#str,w,h);
gfx_x = meters_align+100-(w/2); gfx_y = 35 + mtr_y;
gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
gfx_drawstr(#str);
m0.dynmeter(mtr0,meters_align,53 + mtr_y);
grid(meters_align,63 + mtr_y,1);

#str = "MEDIUM DYNAMICS";
gfx_measurestr(#str,w,h);
gfx_x = meters_align+100-(w/2); gfx_y = 75 + mtr_y;
gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
gfx_drawstr(#str);
m1.dynmeter(mtr1,meters_align,93 + mtr_y);
grid(meters_align,103 + mtr_y,1);

#str = "MACRO DYNAMICS";
gfx_measurestr(#str,w,h);
gfx_x = meters_align+100-(w/2); gfx_y = 115 + mtr_y;
gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
gfx_drawstr(#str);
m2.dynmeter(mtr2,meters_align,133 + mtr_y);
grid(meters_align,143 + mtr_y,1);

labels(meters_align,148 + mtr_y);

/* GATE */

gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
chk.gate.rms(gating < 0.891 && gating > 0.708 ? 1 : 0);
chk.gate.rms > 0.6 ? (
  gfx_r = 1; gfx_g = 1-chk.gate.rms; gfx_b = 0; gfx_a = flash;
):(
  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
);

#str = "GATING ";
gating > 0.0000001 ? (
  strcat( #str, (strcat(sprintf(#,"%.0f",20 * log10(1/gating)),"dB")) );
) : (
  strcat( #str, "-inf");
);
gfx_measurestr(#str,w,h);
gfx_x = meters_align; gfx_y = 173 + mtr_y;
gfx_drawstr(#str);

/* LIMIT */

gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
gfx_x = meters_align+125; gfx_y = 173 + mtr_y;
gfx_drawstr("LIMITING ");
gfx_drawstr(strcat(sprintf(#,"%.0f",20 * log10(1/peakhold)),"dB"));

/* OUTPUT */

post.rms <= target * 1.12 && post.rms >= target * 0.891 ? (
  gfx_r = 0; gfx_g = 1; gfx_b = 0; gfx_a = 1;
) : (
  post.rms > target * 1.12 ?
    (gfx_r = 1; gfx_g = 0; gfx_b = 0; gfx_a = 1;)
  :
    (gfx_r = 0; gfx_g = 0.5; gfx_b = 1; gfx_a = 1;);
);
#str = "OUTPUT: ";
post.rms > 0 ? (
  strcat(#str,strcat(sprintf(#,"%.1f",  20 * log10(post.rms) ),"dB"));
) : (
  strcat(#str,"-inf");
);
gfx_measurestr(#str,w,h);
gfx_x = meters_align+100-(w/2); gfx_y = 200 + mtr_y;
gfx_drawstr(#str);

/* HARD LIMIT */

gfx_r = 0.6; gfx_g = 0.6; gfx_b = 0.6; gfx_a = 1;
#str = "HARD LIMIT @ ";
strcat(#str,strcat(sprintf(#,"%.1f",20 * log10(peak)),"dBfs"));
gfx_measurestr(#str,w,h);
gfx_x = meters_align+100-(w/2); gfx_y = 10 + mtr_y;
gfx_drawstr( #str );

/* LEVEL CHECKS */

chk.med1.rms(lvl.rms1);
1/range1.up <= chk.med1.rms+0.001 ? meg = 1 : meg = 0;
megi = chk.med2.rms(meg);

1/range1.dwn >= chk.med1.rms-0.001 ? meg2 = 1 : meg2 = 0;
megi2 = chk.med3.rms(meg2);

chk.mad1.rms(lvl.rms2);
1/range2.up <= chk.mad1.rms+0.001 ? mag = 1 : mag = 0;
magi = chk.mad2.rms(mag);

1/range2.dwn >= chk.mad1.rms-0.001 ? mag2 = 1 : mag2 = 0;
magi2 = chk.mad3.rms(mag2);

flash ? (
  range1.up != 1 && megi > 0.5 ? (
  gfx_r = 1; gfx_g = 1-megi; gfx_b = 0; gfx_a = 1;
  arrow_right(meters_align+205,95 + mtr_y);
  );
  
  range1.dwn != 1 && megi2 > 0.5 ? (
  gfx_r = 1; gfx_g = 1-megi2; gfx_b = 0; gfx_a = 1;
  arrow_left(meters_align-15,95 + mtr_y);
  );
  
  range2.up != 1 && magi > 0.5 ? (
  gfx_r = 1; gfx_g = 1-magi; gfx_b = 0; gfx_a = 1;
  arrow_right(meters_align+205,135 + mtr_y);
  );
  
  range1.dwn != 1 && magi2 > 0.5 ? (
  gfx_r = 1; gfx_g = 1-magi2; gfx_b = 0; gfx_a = 1;
  arrow_left(meters_align-15,135 + mtr_y);
  );
);

gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.75;
gfx_x = 380; gfx_y = 500;
gfx_a = 0.5;
gfx_setfont(1,"Arial",11);
gfx_drawstr(buildStr);
